{".ksonnet":{"children":{"registries":{"children":{"incubator":{"children":{},"type":"directory","full_path":"/Users/tehut/test/.ksonnet/registries/incubator"}},"type":"directory","full_path":"/Users/tehut/test/.ksonnet/registries"}},"type":"directory","full_path":"/Users/tehut/test/.ksonnet"},"app.yaml":"{\n  \"apiVersion\": \"0.1\",\n  \"kind\": \"ksonnet.io/app\",\n  \"name\": \"test\",\n  \"version\": \"0.0.1\",\n  \"registries\": {\n    \"incubator\": {\n      \"Name\": \"incubator\",\n      \"protocol\": \"github\",\n      \"uri\": \"github.com/ksonnet/parts/tree/test-reg/incubator\",\n      \"gitVersion\": {\n        \"refSpec\": \"test-reg\",\n        \"commitSha\": \"974dd0a850880a1fd5ea088253e44f134876f2fe\"\n      }\n    }\n  }\n}","components":{"children":{"params.libsonnet":"{\n  global: {\n    // User-defined global parameters; accessible to all component and environments, Ex:\n    // replicas: 4,\n  },\n  components: {\n    // Component-level parameters, defined initially from 'ks prototype use ...'\n    // Each object below should correspond to a component in the components/ directory\n  },\n}\n"},"type":"directory","full_path":"/Users/tehut/test/components"},"environments":{"children":{"base.libsonnet":"local components = std.extVar(\"__ksonnet/components\");\ncomponents + {\n  // Insert user-specified overrides here.\n}\n","default":{"children":{".metadata":{"children":{"k.libsonnet":"local k8s = import \"k8s.libsonnet\";\n\nlocal apps = k8s.apps;\nlocal core = k8s.core;\nlocal extensions = k8s.extensions;\n\nlocal hidden = {\n  mapContainers(f):: {\n    local podContainers = super.spec.template.spec.containers,\n    spec+: {\n      template+: {\n        spec+: {\n          // IMPORTANT: This overwrites the 'containers' field\n          // for this deployment.\n          containers: std.map(f, podContainers),\n        },\n      },\n    },\n  },\n\n  mapContainersWithName(names, f) ::\n    local nameSet =\n      if std.type(names) == \"array\"\n      then std.set(names)\n      else std.set([names]);\n    local inNameSet(name) = std.length(std.setInter(nameSet, std.set([name]))) > 0;\n    self.mapContainers(\n      function(c)\n        if std.objectHas(c, \"name\") && inNameSet(c.name)\n        then f(c)\n        else c\n    ),\n};\n\nk8s + {\n  apps:: apps + {\n    v1beta1:: apps.v1beta1 + {\n      local v1beta1 = apps.v1beta1,\n\n      daemonSet:: v1beta1.daemonSet + {\n        mapContainers(f):: hidden.mapContainers(f),\n        mapContainersWithName(names, f):: hidden.mapContainersWithName(names, f),\n      },\n\n      deployment:: v1beta1.deployment + {\n        mapContainers(f):: hidden.mapContainers(f),\n        mapContainersWithName(names, f):: hidden.mapContainersWithName(names, f),\n      },\n    },\n  },\n\n  core:: core + {\n    v1:: core.v1 + {\n      list:: {\n        new(items)::\n          {apiVersion: \"v1\"} +\n          {kind: \"List\"} +\n          self.items(items),\n\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n      },\n    },\n  },\n\n  extensions:: extensions + {\n    v1beta1:: extensions.v1beta1 + {\n      local v1beta1 = extensions.v1beta1,\n\n      daemonSet:: v1beta1.daemonSet + {\n        mapContainers(f):: hidden.mapContainers(f),\n        mapContainersWithName(names, f):: hidden.mapContainersWithName(names, f),\n      },\n\n      deployment:: v1beta1.deployment + {\n        mapContainers(f):: hidden.mapContainers(f),\n        mapContainersWithName(names, f):: hidden.mapContainersWithName(names, f),\n      },\n    },\n  },\n}\n","k8s.libsonnet":"// AUTOGENERATED from the Kubernetes OpenAPI specification. DO NOT MODIFY.\n// Kubernetes version: v1.7.0\n\n{\n  admissionregistration:: {\n    v1alpha1:: {\n      local apiVersion = {apiVersion: \"admissionregistration.k8s.io/v1alpha1\"},\n      // ExternalAdmissionHookConfiguration describes the configuration of initializers.\n      externalAdmissionHookConfiguration:: {\n        local kind = {kind: \"ExternalAdmissionHookConfiguration\"},\n        new():: apiVersion + kind,\n        // ExternalAdmissionHooks is a list of external admission webhooks and the affected resources and operations.\n        externalAdmissionHooks(externalAdmissionHooks):: if std.type(externalAdmissionHooks) == \"array\" then {externalAdmissionHooks+: externalAdmissionHooks} else {externalAdmissionHooks+: [externalAdmissionHooks]},\n        externalAdmissionHooksType:: hidden.admissionregistration.v1alpha1.externalAdmissionHook,\n        mixin:: {\n          // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // ExternalAdmissionHookConfigurationList is a list of ExternalAdmissionHookConfiguration.\n      externalAdmissionHookConfigurationList:: {\n        local kind = {kind: \"ExternalAdmissionHookConfigurationList\"},\n        new():: apiVersion + kind,\n        // List of ExternalAdmissionHookConfiguration.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.admissionregistration.v1alpha1.externalAdmissionHookConfiguration,\n        mixin:: {\n          // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n            resourceVersion(resourceVersion):: __metadataMixin({resourceVersion: resourceVersion}),\n            // SelfLink is a URL representing this object. Populated by the system. Read-only.\n            selfLink(selfLink):: __metadataMixin({selfLink: selfLink}),\n          },\n          metadataType:: hidden.meta.v1.listMeta,\n        },\n      },\n      // InitializerConfiguration describes the configuration of initializers.\n      initializerConfiguration:: {\n        local kind = {kind: \"InitializerConfiguration\"},\n        new():: apiVersion + kind,\n        // Initializers is a list of resources and their default initializers Order-sensitive. When merging multiple InitializerConfigurations, we sort the initializers from different InitializerConfigurations by the name of the InitializerConfigurations; the order of the initializers from the same InitializerConfiguration is preserved.\n        initializers(initializers):: if std.type(initializers) == \"array\" then {initializers+: initializers} else {initializers+: [initializers]},\n        initializersType:: hidden.admissionregistration.v1alpha1.initializer,\n        mixin:: {\n          // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // InitializerConfigurationList is a list of InitializerConfiguration.\n      initializerConfigurationList:: {\n        local kind = {kind: \"InitializerConfigurationList\"},\n        new():: apiVersion + kind,\n        // List of InitializerConfiguration.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.admissionregistration.v1alpha1.initializerConfiguration,\n        mixin:: {\n          // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n            resourceVersion(resourceVersion):: __metadataMixin({resourceVersion: resourceVersion}),\n            // SelfLink is a URL representing this object. Populated by the system. Read-only.\n            selfLink(selfLink):: __metadataMixin({selfLink: selfLink}),\n          },\n          metadataType:: hidden.meta.v1.listMeta,\n        },\n      },\n    },\n  },\n  apps:: {\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"apps/v1beta1\"},\n      // ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.\n      controllerRevision:: {\n        local kind = {kind: \"ControllerRevision\"},\n        new():: apiVersion + kind,\n        // Revision indicates the revision of the state represented by Data.\n        revision(revision):: {revision: revision},\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // ControllerRevisionList is a resource containing a list of ControllerRevision objects.\n      controllerRevisionList:: {\n        local kind = {kind: \"ControllerRevisionList\"},\n        new():: apiVersion + kind,\n        // Items is the list of ControllerRevisions\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.apps.v1beta1.controllerRevision,\n        mixin:: {\n          // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n            resourceVersion(resourceVersion):: __metadataMixin({resourceVersion: resourceVersion}),\n            // SelfLink is a URL representing this object. Populated by the system. Read-only.\n            selfLink(selfLink):: __metadataMixin({selfLink: selfLink}),\n          },\n          metadataType:: hidden.meta.v1.listMeta,\n        },\n      },\n      // Deployment enables declarative updates for Pods and ReplicaSets.\n      deployment:: {\n        local kind = {kind: \"Deployment\"},\n        new(name, replicas, containers, podLabels={}):: apiVersion + kind + self.mixin.metadata.name(name) + self.mixin.spec.replicas(replicas) + self.mixin.spec.template.spec.containers(containers) + self.mixin.spec.template.metadata.labels(podLabels),\n        mixin:: {\n          // Standard object metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior of the Deployment.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n            minReadySeconds(minReadySeconds):: __specMixin({minReadySeconds: minReadySeconds}),\n            // Indicates that the deployment is paused.\n            paused(paused):: __specMixin({paused: paused}),\n            // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.\n            progressDeadlineSeconds(progressDeadlineSeconds):: __specMixin({progressDeadlineSeconds: progressDeadlineSeconds}),\n            // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n            replicas(replicas):: __specMixin({replicas: replicas}),\n            // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.\n            revisionHistoryLimit(revisionHistoryLimit):: __specMixin({revisionHistoryLimit: revisionHistoryLimit}),\n            // The config this deployment is rolling back to. Will be cleared after rollback is done.\n            rollbackTo:: {\n              local __rollbackToMixin(rollbackTo) = __specMixin({rollbackTo+: rollbackTo}),\n              mixinInstance(rollbackTo):: __rollbackToMixin(rollbackTo),\n              // The revision to rollback to. If set to 0, rollback to the last revision.\n              revision(revision):: __rollbackToMixin({revision: revision}),\n            },\n            rollbackToType:: hidden.apps.v1beta1.rollbackConfig,\n            // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // The deployment strategy to use to replace existing pods with new ones.\n            strategy:: {\n              local __strategyMixin(strategy) = __specMixin({strategy+: strategy}),\n              mixinInstance(strategy):: __strategyMixin(strategy),\n              // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __strategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n                maxSurge(maxSurge):: __rollingUpdateMixin({maxSurge: maxSurge}),\n                // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n                maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n              },\n              rollingUpdateType:: hidden.apps.v1beta1.rollingUpdateDeployment,\n              // Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n              type(type):: __strategyMixin({type: type}),\n            },\n            strategyType:: hidden.apps.v1beta1.deploymentStrategy,\n            // Template describes the pods that will be created.\n            template:: {\n              local __templateMixin(template) = __specMixin({template+: template}),\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n          specType:: hidden.apps.v1beta1.deploymentSpec,\n        },\n      },\n      // DeploymentList is a list of Deployments.\n      deploymentList:: {\n        local kind = {kind: \"DeploymentList\"},\n        new():: apiVersion + kind,\n        // Items is the list of Deployments.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.apps.v1beta1.deployment,\n        mixin:: {\n        },\n      },\n      // DeploymentRollback stores the information required to rollback a deployment.\n      deploymentRollback:: {\n        local kind = {kind: \"DeploymentRollback\"},\n        new():: apiVersion + kind,\n        // Required: This must match the Name of a deployment.\n        name(name):: {name: name},\n        // The annotations to be updated to a deployment\n        updatedAnnotations(updatedAnnotations):: {updatedAnnotations+: updatedAnnotations},\n        mixin:: {\n          // The config of this deployment rollback.\n          rollbackTo:: {\n            local __rollbackToMixin(rollbackTo) = {rollbackTo+: rollbackTo},\n            mixinInstance(rollbackTo):: __rollbackToMixin(rollbackTo),\n            // The revision to rollback to. If set to 0, rollback to the last revision.\n            revision(revision):: __rollbackToMixin({revision: revision}),\n          },\n          rollbackToType:: hidden.apps.v1beta1.rollbackConfig,\n        },\n      },\n      // Scale represents a scaling request for a resource.\n      scale:: {\n        local kind = {kind: \"Scale\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // desired number of instances for the scaled object.\n            replicas(replicas):: __specMixin({replicas: replicas}),\n          },\n          specType:: hidden.apps.v1beta1.scaleSpec,\n        },\n      },\n      // StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n      //  - Network: A single stable DNS and hostname.\n      //  - Storage: As many VolumeClaims as requested.\n      // The StatefulSet guarantees that a given network identity will always map to the same storage identity.\n      statefulSet:: {\n        local kind = {kind: \"StatefulSet\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the desired identities of pods in this set.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\n            podManagementPolicy(podManagementPolicy):: __specMixin({podManagementPolicy: podManagementPolicy}),\n            // replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.\n            replicas(replicas):: __specMixin({replicas: replicas}),\n            // revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.\n            revisionHistoryLimit(revisionHistoryLimit):: __specMixin({revisionHistoryLimit: revisionHistoryLimit}),\n            // selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.\n            serviceName(serviceName):: __specMixin({serviceName: serviceName}),\n            // template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.\n            template:: {\n              local __templateMixin(template) = __specMixin({template+: template}),\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n            // updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.\n            updateStrategy:: {\n              local __updateStrategyMixin(updateStrategy) = __specMixin({updateStrategy+: updateStrategy}),\n              mixinInstance(updateStrategy):: __updateStrategyMixin(updateStrategy),\n              // RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __updateStrategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // Partition indicates the ordinal at which the StatefulSet should be partitioned.\n                partition(partition):: __rollingUpdateMixin({partition: partition}),\n              },\n              rollingUpdateType:: hidden.apps.v1beta1.rollingUpdateStatefulSetStrategy,\n              // Type indicates the type of the StatefulSetUpdateStrategy.\n              type(type):: __updateStrategyMixin({type: type}),\n            },\n            updateStrategyType:: hidden.apps.v1beta1.statefulSetUpdateStrategy,\n            // volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.\n            volumeClaimTemplates(volumeClaimTemplates):: if std.type(volumeClaimTemplates) == \"array\" then __specMixin({volumeClaimTemplates+: volumeClaimTemplates}) else __specMixin({volumeClaimTemplates+: [volumeClaimTemplates]}),\n            volumeClaimTemplatesType:: hidden.core.v1.persistentVolumeClaim,\n          },\n          specType:: hidden.apps.v1beta1.statefulSetSpec,\n        },\n      },\n      // StatefulSetList is a collection of StatefulSets.\n      statefulSetList:: {\n        local kind = {kind: \"StatefulSetList\"},\n        new():: apiVersion + kind,\n        //\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.apps.v1beta1.statefulSet,\n        mixin:: {\n        },\n      },\n    },\n  },\n  authentication:: {\n    v1:: {\n      local apiVersion = {apiVersion: \"authentication.k8s.io/v1\"},\n      // TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.\n      tokenReview:: {\n        local kind = {kind: \"TokenReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Token is the opaque bearer token.\n            token(token):: __specMixin({token: token}),\n          },\n          specType:: hidden.authentication.v1.tokenReviewSpec,\n        },\n      },\n    },\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"authentication.k8s.io/v1beta1\"},\n      // TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.\n      tokenReview:: {\n        local kind = {kind: \"TokenReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Token is the opaque bearer token.\n            token(token):: __specMixin({token: token}),\n          },\n          specType:: hidden.authentication.v1beta1.tokenReviewSpec,\n        },\n      },\n    },\n  },\n  authorization:: {\n    v1:: {\n      local apiVersion = {apiVersion: \"authorization.k8s.io/v1\"},\n      // LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.\n      localSubjectAccessReview:: {\n        local kind = {kind: \"LocalSubjectAccessReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\n            extra(extra):: __specMixin({extra+: extra}),\n            // Groups is the groups you're testing for.\n            groups(groups):: if std.type(groups) == \"array\" then __specMixin({groups+: groups}) else __specMixin({groups+: [groups]}),\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = __specMixin({nonResourceAttributes+: nonResourceAttributes}),\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = __specMixin({resourceAttributes+: resourceAttributes}),\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1.resourceAttributes,\n            // User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups\n            user(user):: __specMixin({user: user}),\n          },\n          specType:: hidden.authorization.v1.subjectAccessReviewSpec,\n        },\n      },\n      // SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action\n      selfSubjectAccessReview:: {\n        local kind = {kind: \"SelfSubjectAccessReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated.  user and groups must be empty\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = __specMixin({nonResourceAttributes+: nonResourceAttributes}),\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = __specMixin({resourceAttributes+: resourceAttributes}),\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1.resourceAttributes,\n          },\n          specType:: hidden.authorization.v1.selfSubjectAccessReviewSpec,\n        },\n      },\n      // SubjectAccessReview checks whether or not a user or group can perform an action.\n      subjectAccessReview:: {\n        local kind = {kind: \"SubjectAccessReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\n            extra(extra):: __specMixin({extra+: extra}),\n            // Groups is the groups you're testing for.\n            groups(groups):: if std.type(groups) == \"array\" then __specMixin({groups+: groups}) else __specMixin({groups+: [groups]}),\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = __specMixin({nonResourceAttributes+: nonResourceAttributes}),\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = __specMixin({resourceAttributes+: resourceAttributes}),\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1.resourceAttributes,\n            // User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups\n            user(user):: __specMixin({user: user}),\n          },\n          specType:: hidden.authorization.v1.subjectAccessReviewSpec,\n        },\n      },\n    },\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"authorization.k8s.io/v1beta1\"},\n      // LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.\n      localSubjectAccessReview:: {\n        local kind = {kind: \"LocalSubjectAccessReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\n            extra(extra):: __specMixin({extra+: extra}),\n            // Groups is the groups you're testing for.\n            group(group):: if std.type(group) == \"array\" then __specMixin({group+: group}) else __specMixin({group+: [group]}),\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = __specMixin({nonResourceAttributes+: nonResourceAttributes}),\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1beta1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = __specMixin({resourceAttributes+: resourceAttributes}),\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1beta1.resourceAttributes,\n            // User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups\n            user(user):: __specMixin({user: user}),\n          },\n          specType:: hidden.authorization.v1beta1.subjectAccessReviewSpec,\n        },\n      },\n      // SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action\n      selfSubjectAccessReview:: {\n        local kind = {kind: \"SelfSubjectAccessReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated.  user and groups must be empty\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = __specMixin({nonResourceAttributes+: nonResourceAttributes}),\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1beta1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = __specMixin({resourceAttributes+: resourceAttributes}),\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1beta1.resourceAttributes,\n          },\n          specType:: hidden.authorization.v1beta1.selfSubjectAccessReviewSpec,\n        },\n      },\n      // SubjectAccessReview checks whether or not a user or group can perform an action.\n      subjectAccessReview:: {\n        local kind = {kind: \"SubjectAccessReview\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec holds information about the request being evaluated\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\n            extra(extra):: __specMixin({extra+: extra}),\n            // Groups is the groups you're testing for.\n            group(group):: if std.type(group) == \"array\" then __specMixin({group+: group}) else __specMixin({group+: [group]}),\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = __specMixin({nonResourceAttributes+: nonResourceAttributes}),\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1beta1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = __specMixin({resourceAttributes+: resourceAttributes}),\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1beta1.resourceAttributes,\n            // User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups\n            user(user):: __specMixin({user: user}),\n          },\n          specType:: hidden.authorization.v1beta1.subjectAccessReviewSpec,\n        },\n      },\n    },\n  },\n  autoscaling:: {\n    v1:: {\n      local apiVersion = {apiVersion: \"autoscaling/v1\"},\n      // configuration of a horizontal pod autoscaler.\n      horizontalPodAutoscaler:: {\n        local kind = {kind: \"HorizontalPodAutoscaler\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.\n            maxReplicas(maxReplicas):: __specMixin({maxReplicas: maxReplicas}),\n            // lower limit for the number of pods that can be set by the autoscaler, default 1.\n            minReplicas(minReplicas):: __specMixin({minReplicas: minReplicas}),\n            // reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.\n            scaleTargetRef:: {\n              local __scaleTargetRefMixin(scaleTargetRef) = __specMixin({scaleTargetRef+: scaleTargetRef}),\n              mixinInstance(scaleTargetRef):: __scaleTargetRefMixin(scaleTargetRef),\n              // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __scaleTargetRefMixin({name: name}),\n            },\n            scaleTargetRefType:: hidden.autoscaling.v1.crossVersionObjectReference,\n            // target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.\n            targetCpuUtilizationPercentage(targetCpuUtilizationPercentage):: __specMixin({targetCPUUtilizationPercentage: targetCpuUtilizationPercentage}),\n          },\n          specType:: hidden.autoscaling.v1.horizontalPodAutoscalerSpec,\n        },\n      },\n      // list of horizontal pod autoscaler objects.\n      horizontalPodAutoscalerList:: {\n        local kind = {kind: \"HorizontalPodAutoscalerList\"},\n        new():: apiVersion + kind,\n        // list of horizontal pod autoscaler objects.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.autoscaling.v1.horizontalPodAutoscaler,\n        mixin:: {\n        },\n      },\n      // Scale represents a scaling request for a resource.\n      scale:: {\n        local kind = {kind: \"Scale\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // desired number of instances for the scaled object.\n            replicas(replicas):: __specMixin({replicas: replicas}),\n          },\n          specType:: hidden.autoscaling.v1.scaleSpec,\n        },\n      },\n    },\n    v2alpha1:: {\n      local apiVersion = {apiVersion: \"autoscaling/v2alpha1\"},\n      // HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.\n      horizontalPodAutoscaler:: {\n        local kind = {kind: \"HorizontalPodAutoscaler\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.\n            maxReplicas(maxReplicas):: __specMixin({maxReplicas: maxReplicas}),\n            // metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.\n            metrics(metrics):: if std.type(metrics) == \"array\" then __specMixin({metrics+: metrics}) else __specMixin({metrics+: [metrics]}),\n            metricsType:: hidden.autoscaling.v2alpha1.metricSpec,\n            // minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.\n            minReplicas(minReplicas):: __specMixin({minReplicas: minReplicas}),\n            // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.\n            scaleTargetRef:: {\n              local __scaleTargetRefMixin(scaleTargetRef) = __specMixin({scaleTargetRef+: scaleTargetRef}),\n              mixinInstance(scaleTargetRef):: __scaleTargetRefMixin(scaleTargetRef),\n              // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __scaleTargetRefMixin({name: name}),\n            },\n            scaleTargetRefType:: hidden.autoscaling.v2alpha1.crossVersionObjectReference,\n          },\n          specType:: hidden.autoscaling.v2alpha1.horizontalPodAutoscalerSpec,\n        },\n      },\n      // HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.\n      horizontalPodAutoscalerList:: {\n        local kind = {kind: \"HorizontalPodAutoscalerList\"},\n        new():: apiVersion + kind,\n        // items is the list of horizontal pod autoscaler objects.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.autoscaling.v2alpha1.horizontalPodAutoscaler,\n        mixin:: {\n        },\n      },\n    },\n  },\n  batch:: {\n    v1:: {\n      local apiVersion = {apiVersion: \"batch/v1\"},\n      // Job represents the configuration of a single job.\n      job:: {\n        local kind = {kind: \"Job\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer\n            activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n            // Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n            completions(completions):: __specMixin({completions: completions}),\n            // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n            manualSelector(manualSelector):: __specMixin({manualSelector: manualSelector}),\n            // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n            parallelism(parallelism):: __specMixin({parallelism: parallelism}),\n            // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n            template:: {\n              local __templateMixin(template) = __specMixin({template+: template}),\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n          specType:: hidden.batch.v1.jobSpec,\n        },\n      },\n      // JobList is a collection of jobs.\n      jobList:: {\n        local kind = {kind: \"JobList\"},\n        new():: apiVersion + kind,\n        // items is the list of Jobs.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.batch.v1.job,\n        mixin:: {\n        },\n      },\n    },\n    v2alpha1:: {\n      local apiVersion = {apiVersion: \"batch/v2alpha1\"},\n      // CronJob represents the configuration of a single cron job.\n      cronJob:: {\n        local kind = {kind: \"CronJob\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Specifies how to treat concurrent executions of a Job. Defaults to Allow.\n            concurrencyPolicy(concurrencyPolicy):: __specMixin({concurrencyPolicy: concurrencyPolicy}),\n            // The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.\n            failedJobsHistoryLimit(failedJobsHistoryLimit):: __specMixin({failedJobsHistoryLimit: failedJobsHistoryLimit}),\n            // Specifies the job that will be created when executing a CronJob.\n            jobTemplate:: {\n              local __jobTemplateMixin(jobTemplate) = __specMixin({jobTemplate+: jobTemplate}),\n              mixinInstance(jobTemplate):: __jobTemplateMixin(jobTemplate),\n              // Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __jobTemplateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __jobTemplateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n                completions(completions):: __specMixin({completions: completions}),\n                // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n                manualSelector(manualSelector):: __specMixin({manualSelector: manualSelector}),\n                // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n                parallelism(parallelism):: __specMixin({parallelism: parallelism}),\n                // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n                selector:: {\n                  local __selectorMixin(selector) = __specMixin({selector+: selector}),\n                  mixinInstance(selector):: __selectorMixin(selector),\n                  // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n                  matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n                  matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n                  // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n                  matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n                },\n                selectorType:: hidden.meta.v1.labelSelector,\n                // Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n                template:: {\n                  local __templateMixin(template) = __specMixin({template+: template}),\n                  mixinInstance(template):: __templateMixin(template),\n                  // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n                  metadata:: {\n                    local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                    mixinInstance(metadata):: __metadataMixin(metadata),\n                    // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                    annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                    // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                    clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                    // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                    deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                    // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                    finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                    // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                    //\n                    // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                    //\n                    // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                    generateName(generateName):: __metadataMixin({generateName: generateName}),\n                    // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                    //\n                    // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                    initializers:: {\n                      local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                      mixinInstance(initializers):: __initializersMixin(initializers),\n                      // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                      pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                      pendingType:: hidden.meta.v1.initializer,\n                      // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                      result:: {\n                        local __resultMixin(result) = __initializersMixin({result+: result}),\n                        mixinInstance(result):: __resultMixin(result),\n                        // Suggested HTTP return code for this status, 0 if not set.\n                        code(code):: __resultMixin({code: code}),\n                        // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                        details:: {\n                          local __detailsMixin(details) = __resultMixin({details+: details}),\n                          mixinInstance(details):: __detailsMixin(details),\n                          // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                          causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                          causesType:: hidden.meta.v1.statusCause,\n                          // The group attribute of the resource associated with the status StatusReason.\n                          group(group):: __detailsMixin({group: group}),\n                          // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                          name(name):: __detailsMixin({name: name}),\n                          // If specified, the time in seconds before the operation should be retried.\n                          retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                          // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                          uid(uid):: __detailsMixin({uid: uid}),\n                        },\n                        detailsType:: hidden.meta.v1.statusDetails,\n                        // A human-readable description of the status of this operation.\n                        message(message):: __resultMixin({message: message}),\n                        // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                        reason(reason):: __resultMixin({reason: reason}),\n                      },\n                      resultType:: hidden.meta.v1.status,\n                    },\n                    initializersType:: hidden.meta.v1.initializers,\n                    // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                    labels(labels):: __metadataMixin({labels+: labels}),\n                    // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                    name(name):: __metadataMixin({name: name}),\n                    // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                    //\n                    // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                    namespace(namespace):: __metadataMixin({namespace: namespace}),\n                  },\n                  metadataType:: hidden.meta.v1.objectMeta,\n                  // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n                  spec:: {\n                    local __specMixin(spec) = __templateMixin({spec+: spec}),\n                    mixinInstance(spec):: __specMixin(spec),\n                    // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                    activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                    // If specified, the pod's scheduling constraints\n                    affinity:: {\n                      local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                      mixinInstance(affinity):: __affinityMixin(affinity),\n                      // Describes node affinity scheduling rules for the pod.\n                      nodeAffinity:: {\n                        local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                        mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                        // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                        preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                        preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                        // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                        requiredDuringSchedulingIgnoredDuringExecution:: {\n                          local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                          mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                          // Required. A list of node selector terms. The terms are ORed.\n                          nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                          nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                        },\n                        requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                      },\n                      nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                      // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                      podAffinity:: {\n                        local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                        mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                        // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                        preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                        preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                        // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                        requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                        requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                      },\n                      podAffinityType:: hidden.core.v1.podAffinity,\n                      // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                      podAntiAffinity:: {\n                        local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                        mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                        // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                        preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                        preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                        // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                        requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                        requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                      },\n                      podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                    },\n                    affinityType:: hidden.core.v1.affinity,\n                    // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                    automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                    // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                    containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                    containersType:: hidden.core.v1.container,\n                    // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                    dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                    // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                    hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                    hostAliasesType:: hidden.core.v1.hostAlias,\n                    // Use the host's ipc namespace. Optional: Default to false.\n                    hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                    // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                    hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                    // Use the host's pid namespace. Optional: Default to false.\n                    hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                    // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                    hostname(hostname):: __specMixin({hostname: hostname}),\n                    // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                    imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                    imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                    // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                    initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                    initContainersType:: hidden.core.v1.container,\n                    // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                    nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                    // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                    nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                    // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                    restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                    // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                    schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                    // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                    securityContext:: {\n                      local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                      mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                      // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                      //\n                      // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                      //\n                      // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                      fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                      // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                      runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                      // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                      runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                      // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                      seLinuxOptions:: {\n                        local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                        mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                        // Level is SELinux level label that applies to the container.\n                        level(level):: __seLinuxOptionsMixin({level: level}),\n                        // Role is a SELinux role label that applies to the container.\n                        role(role):: __seLinuxOptionsMixin({role: role}),\n                        // Type is a SELinux type label that applies to the container.\n                        type(type):: __seLinuxOptionsMixin({type: type}),\n                        // User is a SELinux user label that applies to the container.\n                        user(user):: __seLinuxOptionsMixin({user: user}),\n                      },\n                      seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                      // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                      supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                    },\n                    securityContextType:: hidden.core.v1.podSecurityContext,\n                    // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                    serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                    // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                    serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                    // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                    subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                    // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                    terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                    // If specified, the pod's tolerations.\n                    tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                    tolerationsType:: hidden.core.v1.toleration,\n                    // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                    volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                    volumesType:: hidden.core.v1.volume,\n                  },\n                  specType:: hidden.core.v1.podSpec,\n                },\n                templateType:: hidden.core.v1.podTemplateSpec,\n              },\n              specType:: hidden.batch.v1.jobSpec,\n            },\n            jobTemplateType:: hidden.batch.v2alpha1.jobTemplateSpec,\n            // The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.\n            schedule(schedule):: __specMixin({schedule: schedule}),\n            // Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.\n            startingDeadlineSeconds(startingDeadlineSeconds):: __specMixin({startingDeadlineSeconds: startingDeadlineSeconds}),\n            // The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.\n            successfulJobsHistoryLimit(successfulJobsHistoryLimit):: __specMixin({successfulJobsHistoryLimit: successfulJobsHistoryLimit}),\n            // This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.\n            suspend(suspend):: __specMixin({suspend: suspend}),\n          },\n          specType:: hidden.batch.v2alpha1.cronJobSpec,\n        },\n      },\n      // CronJobList is a collection of cron jobs.\n      cronJobList:: {\n        local kind = {kind: \"CronJobList\"},\n        new():: apiVersion + kind,\n        // items is the list of CronJobs.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.batch.v2alpha1.cronJob,\n        mixin:: {\n        },\n      },\n    },\n  },\n  certificates:: {\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"certificates.k8s.io/v1beta1\"},\n      // Describes a certificate signing request\n      certificateSigningRequest:: {\n        local kind = {kind: \"CertificateSigningRequest\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // The certificate request itself and any additional information.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Extra information about the requesting user. See user.Info interface for details.\n            extra(extra):: __specMixin({extra+: extra}),\n            // Group information about the requesting user. See user.Info interface for details.\n            groups(groups):: if std.type(groups) == \"array\" then __specMixin({groups+: groups}) else __specMixin({groups+: [groups]}),\n            // Base64-encoded PKCS#10 CSR data\n            request(request):: __specMixin({request: request}),\n            // UID information about the requesting user. See user.Info interface for details.\n            uid(uid):: __specMixin({uid: uid}),\n            // allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3\n            //      https://tools.ietf.org/html/rfc5280#section-4.2.1.12\n            usages(usages):: if std.type(usages) == \"array\" then __specMixin({usages+: usages}) else __specMixin({usages+: [usages]}),\n            // Information about the requesting user. See user.Info interface for details.\n            username(username):: __specMixin({username: username}),\n          },\n          specType:: hidden.certificates.v1beta1.certificateSigningRequestSpec,\n        },\n      },\n      //\n      certificateSigningRequestList:: {\n        local kind = {kind: \"CertificateSigningRequestList\"},\n        new():: apiVersion + kind,\n        //\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.certificates.v1beta1.certificateSigningRequest,\n        mixin:: {\n        },\n      },\n    },\n  },\n  core:: {\n    v1:: {\n      local apiVersion = {apiVersion: \"v1\"},\n      // Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.\n      binding:: {\n        local kind = {kind: \"Binding\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // The target object that you want to bind to the standard object.\n          target:: {\n            local __targetMixin(target) = {target+: target},\n            mixinInstance(target):: __targetMixin(target),\n            // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n            fieldPath(fieldPath):: __targetMixin({fieldPath: fieldPath}),\n            // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n            name(name):: __targetMixin({name: name}),\n            // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n            namespace(namespace):: __targetMixin({namespace: namespace}),\n            // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n            resourceVersion(resourceVersion):: __targetMixin({resourceVersion: resourceVersion}),\n            // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n            uid(uid):: __targetMixin({uid: uid}),\n          },\n          targetType:: hidden.core.v1.objectReference,\n        },\n      },\n      // ComponentStatus (and ComponentStatusList) holds the cluster validation info.\n      componentStatus:: {\n        local kind = {kind: \"ComponentStatus\"},\n        new():: apiVersion + kind,\n        // List of component conditions observed\n        conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n        conditionsType:: hidden.core.v1.componentCondition,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // Status of all the conditions for the component as a list of ComponentStatus objects.\n      componentStatusList:: {\n        local kind = {kind: \"ComponentStatusList\"},\n        new():: apiVersion + kind,\n        // List of ComponentStatus objects.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.componentStatus,\n        mixin:: {\n        },\n      },\n      // ConfigMap holds configuration data for pods to consume.\n      configMap:: {\n        local kind = {kind: \"ConfigMap\"},\n        new():: apiVersion + kind,\n        // Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'.\n        data(data):: {data+: data},\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // ConfigMapList is a resource containing a list of ConfigMap objects.\n      configMapList:: {\n        local kind = {kind: \"ConfigMapList\"},\n        new():: apiVersion + kind,\n        // Items is the list of ConfigMaps.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.configMap,\n        mixin:: {\n        },\n      },\n      // Endpoints is a collection of endpoints that implement the actual service. Example:\n      //   Name: \"mysvc\",\n      //   Subsets: [\n      //     {\n      //       Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      //       Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n      //     },\n      //     {\n      //       Addresses: [{\"ip\": \"10.10.3.3\"}],\n      //       Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n      //     },\n      //  ]\n      endpoints:: {\n        local kind = {kind: \"Endpoints\"},\n        new():: apiVersion + kind,\n        // The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.\n        subsets(subsets):: if std.type(subsets) == \"array\" then {subsets+: subsets} else {subsets+: [subsets]},\n        subsetsType:: hidden.core.v1.endpointSubset,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // EndpointsList is a list of endpoints.\n      endpointsList:: {\n        local kind = {kind: \"EndpointsList\"},\n        new():: apiVersion + kind,\n        // List of endpoints.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.endpoints,\n        mixin:: {\n        },\n      },\n      // Event is a report of an event somewhere in the cluster.\n      event:: {\n        local kind = {kind: \"Event\"},\n        new():: apiVersion + kind,\n        // The number of times this event has occurred.\n        count(count):: {count: count},\n        // A human-readable description of the status of this operation.\n        message(message):: {message: message},\n        // This should be a short, machine understandable string that gives the reason for the transition into the object's current status.\n        reason(reason):: {reason: reason},\n        // Type of this event (Normal, Warning), new types could be added in the future\n        type(type):: {type: type},\n        mixin:: {\n          // The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)\n          firstTimestamp:: {\n            local __firstTimestampMixin(firstTimestamp) = {firstTimestamp+: firstTimestamp},\n            mixinInstance(firstTimestamp):: __firstTimestampMixin(firstTimestamp),\n          },\n          firstTimestampType:: hidden.meta.v1.time,\n          // The object that this event is about.\n          involvedObject:: {\n            local __involvedObjectMixin(involvedObject) = {involvedObject+: involvedObject},\n            mixinInstance(involvedObject):: __involvedObjectMixin(involvedObject),\n            // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n            fieldPath(fieldPath):: __involvedObjectMixin({fieldPath: fieldPath}),\n            // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n            name(name):: __involvedObjectMixin({name: name}),\n            // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n            namespace(namespace):: __involvedObjectMixin({namespace: namespace}),\n            // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n            resourceVersion(resourceVersion):: __involvedObjectMixin({resourceVersion: resourceVersion}),\n            // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n            uid(uid):: __involvedObjectMixin({uid: uid}),\n          },\n          involvedObjectType:: hidden.core.v1.objectReference,\n          // The time at which the most recent occurrence of this event was recorded.\n          lastTimestamp:: {\n            local __lastTimestampMixin(lastTimestamp) = {lastTimestamp+: lastTimestamp},\n            mixinInstance(lastTimestamp):: __lastTimestampMixin(lastTimestamp),\n          },\n          lastTimestampType:: hidden.meta.v1.time,\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // The component reporting this event. Should be a short machine understandable string.\n          source:: {\n            local __sourceMixin(source) = {source+: source},\n            mixinInstance(source):: __sourceMixin(source),\n            // Component from which the event is generated.\n            component(component):: __sourceMixin({component: component}),\n            // Node name on which the event is generated.\n            host(host):: __sourceMixin({host: host}),\n          },\n          sourceType:: hidden.core.v1.eventSource,\n        },\n      },\n      // EventList is a list of events.\n      eventList:: {\n        local kind = {kind: \"EventList\"},\n        new():: apiVersion + kind,\n        // List of events\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.event,\n        mixin:: {\n        },\n      },\n      // LimitRange sets resource usage limits for each kind of resource in a Namespace.\n      limitRange:: {\n        local kind = {kind: \"LimitRange\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Limits is the list of LimitRangeItem objects that are enforced.\n            limits(limits):: if std.type(limits) == \"array\" then __specMixin({limits+: limits}) else __specMixin({limits+: [limits]}),\n            limitsType:: hidden.core.v1.limitRangeItem,\n          },\n          specType:: hidden.core.v1.limitRangeSpec,\n        },\n      },\n      // LimitRangeList is a list of LimitRange items.\n      limitRangeList:: {\n        local kind = {kind: \"LimitRangeList\"},\n        new():: apiVersion + kind,\n        // Items is a list of LimitRange objects. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_limit_range.md\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.limitRange,\n        mixin:: {\n        },\n      },\n      // Namespace provides a scope for Names. Use of multiple namespaces is optional.\n      namespace:: {\n        local kind = {kind: \"Namespace\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://git.k8s.io/community/contributors/design-proposals/namespaces.md#finalizers\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __specMixin({finalizers+: finalizers}) else __specMixin({finalizers+: [finalizers]}),\n          },\n          specType:: hidden.core.v1.namespaceSpec,\n        },\n      },\n      // NamespaceList is a list of Namespaces.\n      namespaceList:: {\n        local kind = {kind: \"NamespaceList\"},\n        new():: apiVersion + kind,\n        // Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.namespace,\n        mixin:: {\n        },\n      },\n      // Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).\n      node:: {\n        local kind = {kind: \"Node\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.\n            externalId(externalId):: __specMixin({externalID: externalId}),\n            // PodCIDR represents the pod IP range assigned to the node.\n            podCidr(podCidr):: __specMixin({podCIDR: podCidr}),\n            // ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>\n            providerId(providerId):: __specMixin({providerID: providerId}),\n            // If specified, the node's taints.\n            taints(taints):: if std.type(taints) == \"array\" then __specMixin({taints+: taints}) else __specMixin({taints+: [taints]}),\n            taintsType:: hidden.core.v1.taint,\n            // Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration\n            unschedulable(unschedulable):: __specMixin({unschedulable: unschedulable}),\n          },\n          specType:: hidden.core.v1.nodeSpec,\n        },\n      },\n      // NodeList is the whole list of all Nodes which have been registered with master.\n      nodeList:: {\n        local kind = {kind: \"NodeList\"},\n        new():: apiVersion + kind,\n        // List of nodes\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.node,\n        mixin:: {\n        },\n      },\n      // PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\n      persistentVolume:: {\n        local kind = {kind: \"PersistentVolume\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes\n            accessModes(accessModes):: if std.type(accessModes) == \"array\" then __specMixin({accessModes+: accessModes}) else __specMixin({accessModes+: [accessModes]}),\n            // AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n            awsElasticBlockStore:: {\n              local __awsElasticBlockStoreMixin(awsElasticBlockStore) = __specMixin({awsElasticBlockStore+: awsElasticBlockStore}),\n              mixinInstance(awsElasticBlockStore):: __awsElasticBlockStoreMixin(awsElasticBlockStore),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              fsType(fsType):: __awsElasticBlockStoreMixin({fsType: fsType}),\n              // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n              partition(partition):: __awsElasticBlockStoreMixin({partition: partition}),\n              // Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              readOnly(readOnly):: __awsElasticBlockStoreMixin({readOnly: readOnly}),\n              // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              volumeId(volumeId):: __awsElasticBlockStoreMixin({volumeID: volumeId}),\n            },\n            awsElasticBlockStoreType:: hidden.core.v1.awsElasticBlockStoreVolumeSource,\n            // AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n            azureDisk:: {\n              local __azureDiskMixin(azureDisk) = __specMixin({azureDisk+: azureDisk}),\n              mixinInstance(azureDisk):: __azureDiskMixin(azureDisk),\n              // Host Caching mode: None, Read Only, Read Write.\n              cachingMode(cachingMode):: __azureDiskMixin({cachingMode: cachingMode}),\n              // The Name of the data disk in the blob storage\n              diskName(diskName):: __azureDiskMixin({diskName: diskName}),\n              // The URI the data disk in the blob storage\n              diskUri(diskUri):: __azureDiskMixin({diskURI: diskUri}),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __azureDiskMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __azureDiskMixin({readOnly: readOnly}),\n            },\n            azureDiskType:: hidden.core.v1.azureDiskVolumeSource,\n            // AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n            azureFile:: {\n              local __azureFileMixin(azureFile) = __specMixin({azureFile+: azureFile}),\n              mixinInstance(azureFile):: __azureFileMixin(azureFile),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __azureFileMixin({readOnly: readOnly}),\n              // the name of secret that contains Azure Storage Account Name and Key\n              secretName(secretName):: __azureFileMixin({secretName: secretName}),\n              // Share Name\n              shareName(shareName):: __azureFileMixin({shareName: shareName}),\n            },\n            azureFileType:: hidden.core.v1.azureFileVolumeSource,\n            // A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n            capacity(capacity):: __specMixin({capacity+: capacity}),\n            // CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n            cephfs:: {\n              local __cephfsMixin(cephfs) = __specMixin({cephfs+: cephfs}),\n              mixinInstance(cephfs):: __cephfsMixin(cephfs),\n              // Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              monitors(monitors):: if std.type(monitors) == \"array\" then __cephfsMixin({monitors+: monitors}) else __cephfsMixin({monitors+: [monitors]}),\n              // Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n              path(path):: __cephfsMixin({path: path}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              readOnly(readOnly):: __cephfsMixin({readOnly: readOnly}),\n              // Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              secretFile(secretFile):: __cephfsMixin({secretFile: secretFile}),\n              // Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __cephfsMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              user(user):: __cephfsMixin({user: user}),\n            },\n            cephfsType:: hidden.core.v1.cephFsVolumeSource,\n            // Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n            cinder:: {\n              local __cinderMixin(cinder) = __specMixin({cinder+: cinder}),\n              mixinInstance(cinder):: __cinderMixin(cinder),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              fsType(fsType):: __cinderMixin({fsType: fsType}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              readOnly(readOnly):: __cinderMixin({readOnly: readOnly}),\n              // volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              volumeId(volumeId):: __cinderMixin({volumeID: volumeId}),\n            },\n            cinderType:: hidden.core.v1.cinderVolumeSource,\n            // ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding\n            claimRef:: {\n              local __claimRefMixin(claimRef) = __specMixin({claimRef+: claimRef}),\n              mixinInstance(claimRef):: __claimRefMixin(claimRef),\n              // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n              fieldPath(fieldPath):: __claimRefMixin({fieldPath: fieldPath}),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __claimRefMixin({name: name}),\n              // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n              namespace(namespace):: __claimRefMixin({namespace: namespace}),\n              // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n              resourceVersion(resourceVersion):: __claimRefMixin({resourceVersion: resourceVersion}),\n              // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n              uid(uid):: __claimRefMixin({uid: uid}),\n            },\n            claimRefType:: hidden.core.v1.objectReference,\n            // FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n            fc:: {\n              local __fcMixin(fc) = __specMixin({fc+: fc}),\n              mixinInstance(fc):: __fcMixin(fc),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __fcMixin({fsType: fsType}),\n              // Required: FC target lun number\n              lun(lun):: __fcMixin({lun: lun}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __fcMixin({readOnly: readOnly}),\n              // Required: FC target worldwide names (WWNs)\n              targetWwns(targetWwns):: if std.type(targetWwns) == \"array\" then __fcMixin({targetWWNs+: targetWwns}) else __fcMixin({targetWWNs+: [targetWwns]}),\n            },\n            fcType:: hidden.core.v1.fcVolumeSource,\n            // FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n            flexVolume:: {\n              local __flexVolumeMixin(flexVolume) = __specMixin({flexVolume+: flexVolume}),\n              mixinInstance(flexVolume):: __flexVolumeMixin(flexVolume),\n              // Driver is the name of the driver to use for this volume.\n              driver(driver):: __flexVolumeMixin({driver: driver}),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n              fsType(fsType):: __flexVolumeMixin({fsType: fsType}),\n              // Optional: Extra command options if any.\n              options(options):: __flexVolumeMixin({options+: options}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __flexVolumeMixin({readOnly: readOnly}),\n              // Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __flexVolumeMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n            },\n            flexVolumeType:: hidden.core.v1.flexVolumeSource,\n            // Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n            flocker:: {\n              local __flockerMixin(flocker) = __specMixin({flocker+: flocker}),\n              mixinInstance(flocker):: __flockerMixin(flocker),\n              // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated\n              datasetName(datasetName):: __flockerMixin({datasetName: datasetName}),\n              // UUID of the dataset. This is unique identifier of a Flocker dataset\n              datasetUuid(datasetUuid):: __flockerMixin({datasetUUID: datasetUuid}),\n            },\n            flockerType:: hidden.core.v1.flockerVolumeSource,\n            // GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n            gcePersistentDisk:: {\n              local __gcePersistentDiskMixin(gcePersistentDisk) = __specMixin({gcePersistentDisk+: gcePersistentDisk}),\n              mixinInstance(gcePersistentDisk):: __gcePersistentDiskMixin(gcePersistentDisk),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              fsType(fsType):: __gcePersistentDiskMixin({fsType: fsType}),\n              // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              partition(partition):: __gcePersistentDiskMixin({partition: partition}),\n              // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              pdName(pdName):: __gcePersistentDiskMixin({pdName: pdName}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              readOnly(readOnly):: __gcePersistentDiskMixin({readOnly: readOnly}),\n            },\n            gcePersistentDiskType:: hidden.core.v1.gcePersistentDiskVolumeSource,\n            // Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md\n            glusterfs:: {\n              local __glusterfsMixin(glusterfs) = __specMixin({glusterfs+: glusterfs}),\n              mixinInstance(glusterfs):: __glusterfsMixin(glusterfs),\n              // EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              endpoints(endpoints):: __glusterfsMixin({endpoints: endpoints}),\n              // Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              path(path):: __glusterfsMixin({path: path}),\n              // ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              readOnly(readOnly):: __glusterfsMixin({readOnly: readOnly}),\n            },\n            glusterfsType:: hidden.core.v1.glusterfsVolumeSource,\n            // HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n            hostPath:: {\n              local __hostPathMixin(hostPath) = __specMixin({hostPath+: hostPath}),\n              mixinInstance(hostPath):: __hostPathMixin(hostPath),\n              // Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n              path(path):: __hostPathMixin({path: path}),\n            },\n            hostPathType:: hidden.core.v1.hostPathVolumeSource,\n            // ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\n            iscsi:: {\n              local __iscsiMixin(iscsi) = __specMixin({iscsi+: iscsi}),\n              mixinInstance(iscsi):: __iscsiMixin(iscsi),\n              // whether support iSCSI Discovery CHAP authentication\n              chapAuthDiscovery(chapAuthDiscovery):: __iscsiMixin({chapAuthDiscovery: chapAuthDiscovery}),\n              // whether support iSCSI Session CHAP authentication\n              chapAuthSession(chapAuthSession):: __iscsiMixin({chapAuthSession: chapAuthSession}),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n              fsType(fsType):: __iscsiMixin({fsType: fsType}),\n              // Target iSCSI Qualified Name.\n              iqn(iqn):: __iscsiMixin({iqn: iqn}),\n              // Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.\n              iscsiInterface(iscsiInterface):: __iscsiMixin({iscsiInterface: iscsiInterface}),\n              // iSCSI target lun number.\n              lun(lun):: __iscsiMixin({lun: lun}),\n              // iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n              portals(portals):: if std.type(portals) == \"array\" then __iscsiMixin({portals+: portals}) else __iscsiMixin({portals+: [portals]}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\n              readOnly(readOnly):: __iscsiMixin({readOnly: readOnly}),\n              // CHAP secret for iSCSI target and initiator authentication\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __iscsiMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n              targetPortal(targetPortal):: __iscsiMixin({targetPortal: targetPortal}),\n            },\n            iscsiType:: hidden.core.v1.iscsiVolumeSource,\n            // Local represents directly-attached storage with node affinity\n            localStorage:: {\n              local __localStorageMixin(localStorage) = __specMixin({\"local\"+: localStorage}),\n              mixinInstance(localStorage):: __localStorageMixin(localStorage),\n              // The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device\n              path(path):: __localStorageMixin({path: path}),\n            },\n            localStorageType:: hidden.core.v1.localVolumeSource,\n            // NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n            nfs:: {\n              local __nfsMixin(nfs) = __specMixin({nfs+: nfs}),\n              mixinInstance(nfs):: __nfsMixin(nfs),\n              // Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              path(path):: __nfsMixin({path: path}),\n              // ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              readOnly(readOnly):: __nfsMixin({readOnly: readOnly}),\n              // Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              server(server):: __nfsMixin({server: server}),\n            },\n            nfsType:: hidden.core.v1.nfsVolumeSource,\n            // What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\n            persistentVolumeReclaimPolicy(persistentVolumeReclaimPolicy):: __specMixin({persistentVolumeReclaimPolicy: persistentVolumeReclaimPolicy}),\n            // PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\n            photonPersistentDisk:: {\n              local __photonPersistentDiskMixin(photonPersistentDisk) = __specMixin({photonPersistentDisk+: photonPersistentDisk}),\n              mixinInstance(photonPersistentDisk):: __photonPersistentDiskMixin(photonPersistentDisk),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __photonPersistentDiskMixin({fsType: fsType}),\n              // ID that identifies Photon Controller persistent disk\n              pdId(pdId):: __photonPersistentDiskMixin({pdID: pdId}),\n            },\n            photonPersistentDiskType:: hidden.core.v1.photonPersistentDiskVolumeSource,\n            // PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\n            portworxVolume:: {\n              local __portworxVolumeMixin(portworxVolume) = __specMixin({portworxVolume+: portworxVolume}),\n              mixinInstance(portworxVolume):: __portworxVolumeMixin(portworxVolume),\n              // FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __portworxVolumeMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __portworxVolumeMixin({readOnly: readOnly}),\n              // VolumeID uniquely identifies a Portworx volume\n              volumeId(volumeId):: __portworxVolumeMixin({volumeID: volumeId}),\n            },\n            portworxVolumeType:: hidden.core.v1.portworxVolumeSource,\n            // Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n            quobyte:: {\n              local __quobyteMixin(quobyte) = __specMixin({quobyte+: quobyte}),\n              mixinInstance(quobyte):: __quobyteMixin(quobyte),\n              // Group to map volume access to Default is no group\n              group(group):: __quobyteMixin({group: group}),\n              // ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n              readOnly(readOnly):: __quobyteMixin({readOnly: readOnly}),\n              // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n              registry(registry):: __quobyteMixin({registry: registry}),\n              // User to map volume access to Defaults to serivceaccount user\n              user(user):: __quobyteMixin({user: user}),\n              // Volume is a string that references an already created Quobyte volume by name.\n              volume(volume):: __quobyteMixin({volume: volume}),\n            },\n            quobyteType:: hidden.core.v1.quobyteVolumeSource,\n            // RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md\n            rbd:: {\n              local __rbdMixin(rbd) = __specMixin({rbd+: rbd}),\n              mixinInstance(rbd):: __rbdMixin(rbd),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n              fsType(fsType):: __rbdMixin({fsType: fsType}),\n              // The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              image(image):: __rbdMixin({image: image}),\n              // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              keyring(keyring):: __rbdMixin({keyring: keyring}),\n              // A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              monitors(monitors):: if std.type(monitors) == \"array\" then __rbdMixin({monitors+: monitors}) else __rbdMixin({monitors+: [monitors]}),\n              // The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              pool(pool):: __rbdMixin({pool: pool}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              readOnly(readOnly):: __rbdMixin({readOnly: readOnly}),\n              // SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __rbdMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              user(user):: __rbdMixin({user: user}),\n            },\n            rbdType:: hidden.core.v1.rbdVolumeSource,\n            // ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n            scaleIo:: {\n              local __scaleIoMixin(scaleIo) = __specMixin({scaleIO+: scaleIo}),\n              mixinInstance(scaleIo):: __scaleIoMixin(scaleIo),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __scaleIoMixin({fsType: fsType}),\n              // The host address of the ScaleIO API Gateway.\n              gateway(gateway):: __scaleIoMixin({gateway: gateway}),\n              // The name of the Protection Domain for the configured storage (defaults to \"default\").\n              protectionDomain(protectionDomain):: __scaleIoMixin({protectionDomain: protectionDomain}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __scaleIoMixin({readOnly: readOnly}),\n              // SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __scaleIoMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // Flag to enable/disable SSL communication with Gateway, default false\n              sslEnabled(sslEnabled):: __scaleIoMixin({sslEnabled: sslEnabled}),\n              // Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\").\n              storageMode(storageMode):: __scaleIoMixin({storageMode: storageMode}),\n              // The Storage Pool associated with the protection domain (defaults to \"default\").\n              storagePool(storagePool):: __scaleIoMixin({storagePool: storagePool}),\n              // The name of the storage system as configured in ScaleIO.\n              system(system):: __scaleIoMixin({system: system}),\n              // The name of a volume already created in the ScaleIO system that is associated with this volume source.\n              volumeName(volumeName):: __scaleIoMixin({volumeName: volumeName}),\n            },\n            scaleIoType:: hidden.core.v1.scaleIoVolumeSource,\n            // Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.\n            storageClassName(storageClassName):: __specMixin({storageClassName: storageClassName}),\n            // StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md\n            storageos:: {\n              local __storageosMixin(storageos) = __specMixin({storageos+: storageos}),\n              mixinInstance(storageos):: __storageosMixin(storageos),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __storageosMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __storageosMixin({readOnly: readOnly}),\n              // SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __storageosMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n                fieldPath(fieldPath):: __secretRefMixin({fieldPath: fieldPath}),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n                // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n                namespace(namespace):: __secretRefMixin({namespace: namespace}),\n                // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n                resourceVersion(resourceVersion):: __secretRefMixin({resourceVersion: resourceVersion}),\n                // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n                uid(uid):: __secretRefMixin({uid: uid}),\n              },\n              secretRefType:: hidden.core.v1.objectReference,\n              // VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\n              volumeName(volumeName):: __storageosMixin({volumeName: volumeName}),\n              // VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n              volumeNamespace(volumeNamespace):: __storageosMixin({volumeNamespace: volumeNamespace}),\n            },\n            storageosType:: hidden.core.v1.storageOSPersistentVolumeSource,\n            // VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n            vsphereVolume:: {\n              local __vsphereVolumeMixin(vsphereVolume) = __specMixin({vsphereVolume+: vsphereVolume}),\n              mixinInstance(vsphereVolume):: __vsphereVolumeMixin(vsphereVolume),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __vsphereVolumeMixin({fsType: fsType}),\n              // Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n              storagePolicyID(storagePolicyID):: __vsphereVolumeMixin({storagePolicyID: storagePolicyID}),\n              // Storage Policy Based Management (SPBM) profile name.\n              storagePolicyName(storagePolicyName):: __vsphereVolumeMixin({storagePolicyName: storagePolicyName}),\n              // Path that identifies vSphere volume vmdk\n              volumePath(volumePath):: __vsphereVolumeMixin({volumePath: volumePath}),\n            },\n            vsphereVolumeType:: hidden.core.v1.vsphereVirtualDiskVolumeSource,\n          },\n          specType:: hidden.core.v1.persistentVolumeSpec,\n        },\n      },\n      // PersistentVolumeClaim is a user's request for and claim to a persistent volume\n      persistentVolumeClaim:: {\n        local kind = {kind: \"PersistentVolumeClaim\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n            accessModes(accessModes):: if std.type(accessModes) == \"array\" then __specMixin({accessModes+: accessModes}) else __specMixin({accessModes+: [accessModes]}),\n            // Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n            resources:: {\n              local __resourcesMixin(resources) = __specMixin({resources+: resources}),\n              mixinInstance(resources):: __resourcesMixin(resources),\n              // Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n              limits(limits):: __resourcesMixin({limits+: limits}),\n              // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n              requests(requests):: __resourcesMixin({requests+: requests}),\n            },\n            resourcesType:: hidden.core.v1.resourceRequirements,\n            // A label query over volumes to consider for binding.\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n            storageClassName(storageClassName):: __specMixin({storageClassName: storageClassName}),\n            // VolumeName is the binding reference to the PersistentVolume backing this claim.\n            volumeName(volumeName):: __specMixin({volumeName: volumeName}),\n          },\n          specType:: hidden.core.v1.persistentVolumeClaimSpec,\n        },\n      },\n      // PersistentVolumeClaimList is a list of PersistentVolumeClaim items.\n      persistentVolumeClaimList:: {\n        local kind = {kind: \"PersistentVolumeClaimList\"},\n        new():: apiVersion + kind,\n        // A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.persistentVolumeClaim,\n        mixin:: {\n        },\n      },\n      // PersistentVolumeList is a list of PersistentVolume items.\n      persistentVolumeList:: {\n        local kind = {kind: \"PersistentVolumeList\"},\n        new():: apiVersion + kind,\n        // List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.persistentVolume,\n        mixin:: {\n        },\n      },\n      // Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.\n      pod:: {\n        local kind = {kind: \"Pod\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n            activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n            // If specified, the pod's scheduling constraints\n            affinity:: {\n              local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n              mixinInstance(affinity):: __affinityMixin(affinity),\n              // Describes node affinity scheduling rules for the pod.\n              nodeAffinity:: {\n                local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                requiredDuringSchedulingIgnoredDuringExecution:: {\n                  local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                  mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                  // Required. A list of node selector terms. The terms are ORed.\n                  nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                  nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                },\n                requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n              },\n              nodeAffinityType:: hidden.core.v1.nodeAffinity,\n              // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n              podAffinity:: {\n                local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n              },\n              podAffinityType:: hidden.core.v1.podAffinity,\n              // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n              podAntiAffinity:: {\n                local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n              },\n              podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n            },\n            affinityType:: hidden.core.v1.affinity,\n            // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n            automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n            // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n            containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n            containersType:: hidden.core.v1.container,\n            // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n            dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n            // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n            hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n            hostAliasesType:: hidden.core.v1.hostAlias,\n            // Use the host's ipc namespace. Optional: Default to false.\n            hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n            // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n            hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n            // Use the host's pid namespace. Optional: Default to false.\n            hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n            // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n            hostname(hostname):: __specMixin({hostname: hostname}),\n            // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n            imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n            imagePullSecretsType:: hidden.core.v1.localObjectReference,\n            // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n            initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n            initContainersType:: hidden.core.v1.container,\n            // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n            nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n            // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n            nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n            // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n            restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n            // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n            schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n            // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n            securityContext:: {\n              local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n              mixinInstance(securityContext):: __securityContextMixin(securityContext),\n              // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n              //\n              // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n              //\n              // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n              fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n              // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n              runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n              // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n              runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n              // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n              seLinuxOptions:: {\n                local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                // Level is SELinux level label that applies to the container.\n                level(level):: __seLinuxOptionsMixin({level: level}),\n                // Role is a SELinux role label that applies to the container.\n                role(role):: __seLinuxOptionsMixin({role: role}),\n                // Type is a SELinux type label that applies to the container.\n                type(type):: __seLinuxOptionsMixin({type: type}),\n                // User is a SELinux user label that applies to the container.\n                user(user):: __seLinuxOptionsMixin({user: user}),\n              },\n              seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n              // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n              supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n            },\n            securityContextType:: hidden.core.v1.podSecurityContext,\n            // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n            serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n            // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n            serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n            // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n            subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n            // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n            terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n            // If specified, the pod's tolerations.\n            tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n            tolerationsType:: hidden.core.v1.toleration,\n            // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n            volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n            volumesType:: hidden.core.v1.volume,\n          },\n          specType:: hidden.core.v1.podSpec,\n        },\n      },\n      // PodList is a list of Pods.\n      podList:: {\n        local kind = {kind: \"PodList\"},\n        new():: apiVersion + kind,\n        // List of pods. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.pod,\n        mixin:: {\n        },\n      },\n      // PodTemplate describes a template for creating copies of a predefined pod.\n      podTemplate:: {\n        local kind = {kind: \"PodTemplate\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          template:: {\n            local __templateMixin(template) = {template+: template},\n            mixinInstance(template):: __templateMixin(template),\n            // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n            metadata:: {\n              local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n              mixinInstance(metadata):: __metadataMixin(metadata),\n              // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n              annotations(annotations):: __metadataMixin({annotations+: annotations}),\n              // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n              clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n              // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n              deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n              // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n              finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n              // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n              //\n              // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n              //\n              // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n              generateName(generateName):: __metadataMixin({generateName: generateName}),\n              // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n              //\n              // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n              initializers:: {\n                local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                mixinInstance(initializers):: __initializersMixin(initializers),\n                // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                pendingType:: hidden.meta.v1.initializer,\n                // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                result:: {\n                  local __resultMixin(result) = __initializersMixin({result+: result}),\n                  mixinInstance(result):: __resultMixin(result),\n                  // Suggested HTTP return code for this status, 0 if not set.\n                  code(code):: __resultMixin({code: code}),\n                  // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                  details:: {\n                    local __detailsMixin(details) = __resultMixin({details+: details}),\n                    mixinInstance(details):: __detailsMixin(details),\n                    // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                    causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                    causesType:: hidden.meta.v1.statusCause,\n                    // The group attribute of the resource associated with the status StatusReason.\n                    group(group):: __detailsMixin({group: group}),\n                    // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                    name(name):: __detailsMixin({name: name}),\n                    // If specified, the time in seconds before the operation should be retried.\n                    retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                    // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                    uid(uid):: __detailsMixin({uid: uid}),\n                  },\n                  detailsType:: hidden.meta.v1.statusDetails,\n                  // A human-readable description of the status of this operation.\n                  message(message):: __resultMixin({message: message}),\n                  // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                  reason(reason):: __resultMixin({reason: reason}),\n                },\n                resultType:: hidden.meta.v1.status,\n              },\n              initializersType:: hidden.meta.v1.initializers,\n              // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n              labels(labels):: __metadataMixin({labels+: labels}),\n              // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __metadataMixin({name: name}),\n              // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n              //\n              // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n              namespace(namespace):: __metadataMixin({namespace: namespace}),\n            },\n            metadataType:: hidden.meta.v1.objectMeta,\n            // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n            spec:: {\n              local __specMixin(spec) = __templateMixin({spec+: spec}),\n              mixinInstance(spec):: __specMixin(spec),\n              // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n              activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n              // If specified, the pod's scheduling constraints\n              affinity:: {\n                local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                mixinInstance(affinity):: __affinityMixin(affinity),\n                // Describes node affinity scheduling rules for the pod.\n                nodeAffinity:: {\n                  local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                  mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                  // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                  preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                  preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                  // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                  requiredDuringSchedulingIgnoredDuringExecution:: {\n                    local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                    mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                    // Required. A list of node selector terms. The terms are ORed.\n                    nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                    nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                  },\n                  requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                },\n                nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                podAffinity:: {\n                  local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                  mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                  // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                  preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                  preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                  // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                  requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                  requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                },\n                podAffinityType:: hidden.core.v1.podAffinity,\n                // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                podAntiAffinity:: {\n                  local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                  mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                  // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                  preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                  preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                  // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                  requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                  requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                },\n                podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n              },\n              affinityType:: hidden.core.v1.affinity,\n              // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n              automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n              // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n              containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n              containersType:: hidden.core.v1.container,\n              // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n              dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n              // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n              hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n              hostAliasesType:: hidden.core.v1.hostAlias,\n              // Use the host's ipc namespace. Optional: Default to false.\n              hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n              // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n              hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n              // Use the host's pid namespace. Optional: Default to false.\n              hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n              // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n              hostname(hostname):: __specMixin({hostname: hostname}),\n              // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n              imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n              imagePullSecretsType:: hidden.core.v1.localObjectReference,\n              // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n              initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n              initContainersType:: hidden.core.v1.container,\n              // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n              nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n              // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n              nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n              // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n              restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n              // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n              schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n              // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n              securityContext:: {\n                local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                //\n                // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                //\n                // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                seLinuxOptions:: {\n                  local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                  mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                  // Level is SELinux level label that applies to the container.\n                  level(level):: __seLinuxOptionsMixin({level: level}),\n                  // Role is a SELinux role label that applies to the container.\n                  role(role):: __seLinuxOptionsMixin({role: role}),\n                  // Type is a SELinux type label that applies to the container.\n                  type(type):: __seLinuxOptionsMixin({type: type}),\n                  // User is a SELinux user label that applies to the container.\n                  user(user):: __seLinuxOptionsMixin({user: user}),\n                },\n                seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n              },\n              securityContextType:: hidden.core.v1.podSecurityContext,\n              // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n              serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n              // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n              serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n              // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n              subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n              // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n              terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n              // If specified, the pod's tolerations.\n              tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n              tolerationsType:: hidden.core.v1.toleration,\n              // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n              volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n              volumesType:: hidden.core.v1.volume,\n            },\n            specType:: hidden.core.v1.podSpec,\n          },\n          templateType:: hidden.core.v1.podTemplateSpec,\n        },\n      },\n      // PodTemplateList is a list of PodTemplates.\n      podTemplateList:: {\n        local kind = {kind: \"PodTemplateList\"},\n        new():: apiVersion + kind,\n        // List of pod templates\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.podTemplate,\n        mixin:: {\n        },\n      },\n      // ReplicationController represents the configuration of a replication controller.\n      replicationController:: {\n        local kind = {kind: \"ReplicationController\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n            minReadySeconds(minReadySeconds):: __specMixin({minReadySeconds: minReadySeconds}),\n            // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller\n            replicas(replicas):: __specMixin({replicas: replicas}),\n            // Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector(selector):: __specMixin({selector+: selector}),\n            // Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n            template:: {\n              local __templateMixin(template) = __specMixin({template+: template}),\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n          specType:: hidden.core.v1.replicationControllerSpec,\n        },\n      },\n      // ReplicationControllerList is a collection of replication controllers.\n      replicationControllerList:: {\n        local kind = {kind: \"ReplicationControllerList\"},\n        new():: apiVersion + kind,\n        // List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.replicationController,\n        mixin:: {\n        },\n      },\n      // ResourceQuota sets aggregate quota restrictions enforced per namespace\n      resourceQuota:: {\n        local kind = {kind: \"ResourceQuota\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Hard is the set of desired hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md\n            hard(hard):: __specMixin({hard+: hard}),\n            // A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.\n            scopes(scopes):: if std.type(scopes) == \"array\" then __specMixin({scopes+: scopes}) else __specMixin({scopes+: [scopes]}),\n          },\n          specType:: hidden.core.v1.resourceQuotaSpec,\n        },\n      },\n      // ResourceQuotaList is a list of ResourceQuota items.\n      resourceQuotaList:: {\n        local kind = {kind: \"ResourceQuotaList\"},\n        new():: apiVersion + kind,\n        // Items is a list of ResourceQuota objects. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.resourceQuota,\n        mixin:: {\n        },\n      },\n      // Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.\n      secret:: {\n        local kind = {kind: \"Secret\"},\n        new():: apiVersion + kind,\n        // Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4\n        data(data):: {data+: data},\n        // stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.\n        stringData(stringData):: {stringData+: stringData},\n        // Used to facilitate programmatic handling of secret data.\n        type(type):: {type: type},\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // SecretList is a list of Secret.\n      secretList:: {\n        local kind = {kind: \"SecretList\"},\n        new():: apiVersion + kind,\n        // Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.secret,\n        mixin:: {\n        },\n      },\n      // Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.\n      service:: {\n        local kind = {kind: \"Service\"},\n        new(name, selector, ports):: apiVersion + kind + self.mixin.metadata.name(name) + self.mixin.spec.selector(selector) + self.mixin.spec.ports(ports),\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n            clusterIp(clusterIp):: __specMixin({clusterIP: clusterIp}),\n            // externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.\n            externalIps(externalIps):: if std.type(externalIps) == \"array\" then __specMixin({externalIPs+: externalIps}) else __specMixin({externalIPs+: [externalIps]}),\n            // externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName.\n            externalName(externalName):: __specMixin({externalName: externalName}),\n            // externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.\n            externalTrafficPolicy(externalTrafficPolicy):: __specMixin({externalTrafficPolicy: externalTrafficPolicy}),\n            // healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.\n            healthCheckNodePort(healthCheckNodePort):: __specMixin({healthCheckNodePort: healthCheckNodePort}),\n            // Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.\n            loadBalancerIp(loadBalancerIp):: __specMixin({loadBalancerIP: loadBalancerIp}),\n            // If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/\n            loadBalancerSourceRanges(loadBalancerSourceRanges):: if std.type(loadBalancerSourceRanges) == \"array\" then __specMixin({loadBalancerSourceRanges+: loadBalancerSourceRanges}) else __specMixin({loadBalancerSourceRanges+: [loadBalancerSourceRanges]}),\n            // The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n            ports(ports):: if std.type(ports) == \"array\" then __specMixin({ports+: ports}) else __specMixin({ports+: [ports]}),\n            portsType:: hidden.core.v1.servicePort,\n            // Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/\n            selector(selector):: __specMixin({selector+: selector}),\n            // Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n            sessionAffinity(sessionAffinity):: __specMixin({sessionAffinity: sessionAffinity}),\n            // type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types\n            type(type):: __specMixin({type: type}),\n          },\n          specType:: hidden.core.v1.serviceSpec,\n        },\n      },\n      // ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets\n      serviceAccount:: {\n        local kind = {kind: \"ServiceAccount\"},\n        new():: apiVersion + kind,\n        // AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.\n        automountServiceAccountToken(automountServiceAccountToken):: {automountServiceAccountToken: automountServiceAccountToken},\n        // ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod\n        imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then {imagePullSecrets+: imagePullSecrets} else {imagePullSecrets+: [imagePullSecrets]},\n        imagePullSecretsType:: hidden.core.v1.localObjectReference,\n        // Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret\n        secrets(secrets):: if std.type(secrets) == \"array\" then {secrets+: secrets} else {secrets+: [secrets]},\n        secretsType:: hidden.core.v1.objectReference,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // ServiceAccountList is a list of ServiceAccount objects\n      serviceAccountList:: {\n        local kind = {kind: \"ServiceAccountList\"},\n        new():: apiVersion + kind,\n        // List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.serviceAccount,\n        mixin:: {\n        },\n      },\n      // ServiceList holds a list of services.\n      serviceList:: {\n        local kind = {kind: \"ServiceList\"},\n        new():: apiVersion + kind,\n        // List of services\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.core.v1.service,\n        mixin:: {\n        },\n      },\n    },\n  },\n  extensions:: {\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"extensions/v1beta1\"},\n      // DaemonSet represents the configuration of a daemon set.\n      daemonSet:: {\n        local kind = {kind: \"DaemonSet\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).\n            minReadySeconds(minReadySeconds):: __specMixin({minReadySeconds: minReadySeconds}),\n            // The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.\n            revisionHistoryLimit(revisionHistoryLimit):: __specMixin({revisionHistoryLimit: revisionHistoryLimit}),\n            // A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n            template:: {\n              local __templateMixin(template) = __specMixin({template+: template}),\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n            // An update strategy to replace existing DaemonSet pods with new pods.\n            updateStrategy:: {\n              local __updateStrategyMixin(updateStrategy) = __specMixin({updateStrategy+: updateStrategy}),\n              mixinInstance(updateStrategy):: __updateStrategyMixin(updateStrategy),\n              // Rolling update config params. Present only if type = \"RollingUpdate\".\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __updateStrategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.\n                maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n              },\n              rollingUpdateType:: hidden.extensions.v1beta1.rollingUpdateDaemonSet,\n              // Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is OnDelete.\n              type(type):: __updateStrategyMixin({type: type}),\n            },\n            updateStrategyType:: hidden.extensions.v1beta1.daemonSetUpdateStrategy,\n          },\n          specType:: hidden.extensions.v1beta1.daemonSetSpec,\n        },\n      },\n      // DaemonSetList is a collection of daemon sets.\n      daemonSetList:: {\n        local kind = {kind: \"DaemonSetList\"},\n        new():: apiVersion + kind,\n        // A list of daemon sets.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.extensions.v1beta1.daemonSet,\n        mixin:: {\n        },\n      },\n      // Deployment enables declarative updates for Pods and ReplicaSets.\n      deployment:: {\n        local kind = {kind: \"Deployment\"},\n        new(name, replicas, containers, podLabels={}):: apiVersion + kind + self.mixin.metadata.name(name) + self.mixin.spec.replicas(replicas) + self.mixin.spec.template.spec.containers(containers) + self.mixin.spec.template.metadata.labels(podLabels),\n        mixin:: {\n          // Standard object metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior of the Deployment.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n            minReadySeconds(minReadySeconds):: __specMixin({minReadySeconds: minReadySeconds}),\n            // Indicates that the deployment is paused and will not be processed by the deployment controller.\n            paused(paused):: __specMixin({paused: paused}),\n            // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.\n            progressDeadlineSeconds(progressDeadlineSeconds):: __specMixin({progressDeadlineSeconds: progressDeadlineSeconds}),\n            // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n            replicas(replicas):: __specMixin({replicas: replicas}),\n            // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.\n            revisionHistoryLimit(revisionHistoryLimit):: __specMixin({revisionHistoryLimit: revisionHistoryLimit}),\n            // The config this deployment is rolling back to. Will be cleared after rollback is done.\n            rollbackTo:: {\n              local __rollbackToMixin(rollbackTo) = __specMixin({rollbackTo+: rollbackTo}),\n              mixinInstance(rollbackTo):: __rollbackToMixin(rollbackTo),\n              // The revision to rollback to. If set to 0, rollback to the last revision.\n              revision(revision):: __rollbackToMixin({revision: revision}),\n            },\n            rollbackToType:: hidden.extensions.v1beta1.rollbackConfig,\n            // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // The deployment strategy to use to replace existing pods with new ones.\n            strategy:: {\n              local __strategyMixin(strategy) = __specMixin({strategy+: strategy}),\n              mixinInstance(strategy):: __strategyMixin(strategy),\n              // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __strategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n                maxSurge(maxSurge):: __rollingUpdateMixin({maxSurge: maxSurge}),\n                // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n                maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n              },\n              rollingUpdateType:: hidden.extensions.v1beta1.rollingUpdateDeployment,\n              // Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n              type(type):: __strategyMixin({type: type}),\n            },\n            strategyType:: hidden.extensions.v1beta1.deploymentStrategy,\n            // Template describes the pods that will be created.\n            template:: {\n              local __templateMixin(template) = __specMixin({template+: template}),\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n          specType:: hidden.extensions.v1beta1.deploymentSpec,\n        },\n      },\n      // DeploymentList is a list of Deployments.\n      deploymentList:: {\n        local kind = {kind: \"DeploymentList\"},\n        new():: apiVersion + kind,\n        // Items is the list of Deployments.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.extensions.v1beta1.deployment,\n        mixin:: {\n        },\n      },\n      // DeploymentRollback stores the information required to rollback a deployment.\n      deploymentRollback:: {\n        local kind = {kind: \"DeploymentRollback\"},\n        new():: apiVersion + kind,\n        // Required: This must match the Name of a deployment.\n        name(name):: {name: name},\n        // The annotations to be updated to a deployment\n        updatedAnnotations(updatedAnnotations):: {updatedAnnotations+: updatedAnnotations},\n        mixin:: {\n          // The config of this deployment rollback.\n          rollbackTo:: {\n            local __rollbackToMixin(rollbackTo) = {rollbackTo+: rollbackTo},\n            mixinInstance(rollbackTo):: __rollbackToMixin(rollbackTo),\n            // The revision to rollback to. If set to 0, rollback to the last revision.\n            revision(revision):: __rollbackToMixin({revision: revision}),\n          },\n          rollbackToType:: hidden.extensions.v1beta1.rollbackConfig,\n        },\n      },\n      // Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.\n      ingress:: {\n        local kind = {kind: \"Ingress\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.\n            backend:: {\n              local __backendMixin(backend) = __specMixin({backend+: backend}),\n              mixinInstance(backend):: __backendMixin(backend),\n              // Specifies the name of the referenced service.\n              serviceName(serviceName):: __backendMixin({serviceName: serviceName}),\n              // Specifies the port of the referenced service.\n              servicePort(servicePort):: __backendMixin({servicePort: servicePort}),\n            },\n            backendType:: hidden.extensions.v1beta1.ingressBackend,\n            // A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.\n            rules(rules):: if std.type(rules) == \"array\" then __specMixin({rules+: rules}) else __specMixin({rules+: [rules]}),\n            rulesType:: hidden.extensions.v1beta1.ingressRule,\n            // TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.\n            tls(tls):: if std.type(tls) == \"array\" then __specMixin({tls+: tls}) else __specMixin({tls+: [tls]}),\n            tlsType:: hidden.extensions.v1beta1.ingressTls,\n          },\n          specType:: hidden.extensions.v1beta1.ingressSpec,\n        },\n      },\n      // IngressList is a collection of Ingress.\n      ingressList:: {\n        local kind = {kind: \"IngressList\"},\n        new():: apiVersion + kind,\n        // Items is the list of Ingress.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.extensions.v1beta1.ingress,\n        mixin:: {\n        },\n      },\n      // NetworkPolicy describes what network traffic is allowed for a set of Pods\n      networkPolicy:: {\n        local kind = {kind: \"NetworkPolicy\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior for this NetworkPolicy.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).\n            ingress(ingress):: if std.type(ingress) == \"array\" then __specMixin({ingress+: ingress}) else __specMixin({ingress+: [ingress]}),\n            ingressType:: hidden.extensions.v1beta1.networkPolicyIngressRule,\n            // Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\n            podSelector:: {\n              local __podSelectorMixin(podSelector) = __specMixin({podSelector+: podSelector}),\n              mixinInstance(podSelector):: __podSelectorMixin(podSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __podSelectorMixin({matchExpressions+: matchExpressions}) else __podSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __podSelectorMixin({matchLabels+: matchLabels}),\n            },\n            podSelectorType:: hidden.meta.v1.labelSelector,\n          },\n          specType:: hidden.extensions.v1beta1.networkPolicySpec,\n        },\n      },\n      // Network Policy List is a list of NetworkPolicy objects.\n      networkPolicyList:: {\n        local kind = {kind: \"NetworkPolicyList\"},\n        new():: apiVersion + kind,\n        // Items is a list of schema objects.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.extensions.v1beta1.networkPolicy,\n        mixin:: {\n        },\n      },\n      // Pod Security Policy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.\n      podSecurityPolicy:: {\n        local kind = {kind: \"PodSecurityPolicy\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // spec defines the policy enforced.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.\n            allowedCapabilities(allowedCapabilities):: if std.type(allowedCapabilities) == \"array\" then __specMixin({allowedCapabilities+: allowedCapabilities}) else __specMixin({allowedCapabilities+: [allowedCapabilities]}),\n            // DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.\n            defaultAddCapabilities(defaultAddCapabilities):: if std.type(defaultAddCapabilities) == \"array\" then __specMixin({defaultAddCapabilities+: defaultAddCapabilities}) else __specMixin({defaultAddCapabilities+: [defaultAddCapabilities]}),\n            // FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.\n            fsGroup:: {\n              local __fsGroupMixin(fsGroup) = __specMixin({fsGroup+: fsGroup}),\n              mixinInstance(fsGroup):: __fsGroupMixin(fsGroup),\n              // Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.\n              ranges(ranges):: if std.type(ranges) == \"array\" then __fsGroupMixin({ranges+: ranges}) else __fsGroupMixin({ranges+: [ranges]}),\n              rangesType:: hidden.extensions.v1beta1.idRange,\n              // Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.\n              rule(rule):: __fsGroupMixin({rule: rule}),\n            },\n            fsGroupType:: hidden.extensions.v1beta1.fsGroupStrategyOptions,\n            // hostIPC determines if the policy allows the use of HostIPC in the pod spec.\n            hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n            // hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.\n            hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n            // hostPID determines if the policy allows the use of HostPID in the pod spec.\n            hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n            // hostPorts determines which host port ranges are allowed to be exposed.\n            hostPorts(hostPorts):: if std.type(hostPorts) == \"array\" then __specMixin({hostPorts+: hostPorts}) else __specMixin({hostPorts+: [hostPorts]}),\n            hostPortsType:: hidden.extensions.v1beta1.hostPortRange,\n            // privileged determines if a pod can request to be run as privileged.\n            privileged(privileged):: __specMixin({privileged: privileged}),\n            // ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.\n            readOnlyRootFilesystem(readOnlyRootFilesystem):: __specMixin({readOnlyRootFilesystem: readOnlyRootFilesystem}),\n            // RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.\n            requiredDropCapabilities(requiredDropCapabilities):: if std.type(requiredDropCapabilities) == \"array\" then __specMixin({requiredDropCapabilities+: requiredDropCapabilities}) else __specMixin({requiredDropCapabilities+: [requiredDropCapabilities]}),\n            // runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.\n            runAsUser:: {\n              local __runAsUserMixin(runAsUser) = __specMixin({runAsUser+: runAsUser}),\n              mixinInstance(runAsUser):: __runAsUserMixin(runAsUser),\n              // Ranges are the allowed ranges of uids that may be used.\n              ranges(ranges):: if std.type(ranges) == \"array\" then __runAsUserMixin({ranges+: ranges}) else __runAsUserMixin({ranges+: [ranges]}),\n              rangesType:: hidden.extensions.v1beta1.idRange,\n              // Rule is the strategy that will dictate the allowable RunAsUser values that may be set.\n              rule(rule):: __runAsUserMixin({rule: rule}),\n            },\n            runAsUserType:: hidden.extensions.v1beta1.runAsUserStrategyOptions,\n            // seLinux is the strategy that will dictate the allowable labels that may be set.\n            seLinux:: {\n              local __seLinuxMixin(seLinux) = __specMixin({seLinux+: seLinux}),\n              mixinInstance(seLinux):: __seLinuxMixin(seLinux),\n              // type is the strategy that will dictate the allowable labels that may be set.\n              rule(rule):: __seLinuxMixin({rule: rule}),\n              // seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md\n              seLinuxOptions:: {\n                local __seLinuxOptionsMixin(seLinuxOptions) = __seLinuxMixin({seLinuxOptions+: seLinuxOptions}),\n                mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                // Level is SELinux level label that applies to the container.\n                level(level):: __seLinuxOptionsMixin({level: level}),\n                // Role is a SELinux role label that applies to the container.\n                role(role):: __seLinuxOptionsMixin({role: role}),\n                // Type is a SELinux type label that applies to the container.\n                type(type):: __seLinuxOptionsMixin({type: type}),\n                // User is a SELinux user label that applies to the container.\n                user(user):: __seLinuxOptionsMixin({user: user}),\n              },\n              seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n            },\n            seLinuxType:: hidden.extensions.v1beta1.seLinuxStrategyOptions,\n            // SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.\n            supplementalGroups:: {\n              local __supplementalGroupsMixin(supplementalGroups) = __specMixin({supplementalGroups+: supplementalGroups}),\n              mixinInstance(supplementalGroups):: __supplementalGroupsMixin(supplementalGroups),\n              // Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.\n              ranges(ranges):: if std.type(ranges) == \"array\" then __supplementalGroupsMixin({ranges+: ranges}) else __supplementalGroupsMixin({ranges+: [ranges]}),\n              rangesType:: hidden.extensions.v1beta1.idRange,\n              // Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.\n              rule(rule):: __supplementalGroupsMixin({rule: rule}),\n            },\n            supplementalGroupsType:: hidden.extensions.v1beta1.supplementalGroupsStrategyOptions,\n            // volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.\n            volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n          },\n          specType:: hidden.extensions.v1beta1.podSecurityPolicySpec,\n        },\n      },\n      // Pod Security Policy List is a list of PodSecurityPolicy objects.\n      podSecurityPolicyList:: {\n        local kind = {kind: \"PodSecurityPolicyList\"},\n        new():: apiVersion + kind,\n        // Items is a list of schema objects.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.extensions.v1beta1.podSecurityPolicy,\n        mixin:: {\n        },\n      },\n      // ReplicaSet represents the configuration of a ReplicaSet.\n      replicaSet:: {\n        local kind = {kind: \"ReplicaSet\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n            minReadySeconds(minReadySeconds):: __specMixin({minReadySeconds: minReadySeconds}),\n            // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller\n            replicas(replicas):: __specMixin({replicas: replicas}),\n            // Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n            template:: {\n              local __templateMixin(template) = __specMixin({template+: template}),\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n          specType:: hidden.extensions.v1beta1.replicaSetSpec,\n        },\n      },\n      // ReplicaSetList is a collection of ReplicaSets.\n      replicaSetList:: {\n        local kind = {kind: \"ReplicaSetList\"},\n        new():: apiVersion + kind,\n        // List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.extensions.v1beta1.replicaSet,\n        mixin:: {\n        },\n      },\n      // represents a scaling request for a resource.\n      scale:: {\n        local kind = {kind: \"Scale\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // desired number of instances for the scaled object.\n            replicas(replicas):: __specMixin({replicas: replicas}),\n          },\n          specType:: hidden.extensions.v1beta1.scaleSpec,\n        },\n      },\n      // A ThirdPartyResource is a generic representation of a resource, it is used by add-ons and plugins to add new resource types to the API.  It consists of one or more Versions of the api.\n      thirdPartyResource:: {\n        local kind = {kind: \"ThirdPartyResource\"},\n        new():: apiVersion + kind,\n        // Description is the description of this object.\n        description(description):: {description: description},\n        // Versions are versions for this third party object\n        versions(versions):: if std.type(versions) == \"array\" then {versions+: versions} else {versions+: [versions]},\n        versionsType:: hidden.extensions.v1beta1.apiVersion,\n        mixin:: {\n          // Standard object metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // ThirdPartyResourceList is a list of ThirdPartyResources.\n      thirdPartyResourceList:: {\n        local kind = {kind: \"ThirdPartyResourceList\"},\n        new():: apiVersion + kind,\n        // Items is the list of ThirdPartyResources.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.extensions.v1beta1.thirdPartyResource,\n        mixin:: {\n        },\n      },\n    },\n  },\n  networking:: {\n    v1:: {\n      local apiVersion = {apiVersion: \"networking.k8s.io/v1\"},\n      // NetworkPolicy describes what network traffic is allowed for a set of Pods\n      networkPolicy:: {\n        local kind = {kind: \"NetworkPolicy\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior for this NetworkPolicy.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)\n            ingress(ingress):: if std.type(ingress) == \"array\" then __specMixin({ingress+: ingress}) else __specMixin({ingress+: [ingress]}),\n            ingressType:: hidden.networking.v1.networkPolicyIngressRule,\n            // Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\n            podSelector:: {\n              local __podSelectorMixin(podSelector) = __specMixin({podSelector+: podSelector}),\n              mixinInstance(podSelector):: __podSelectorMixin(podSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __podSelectorMixin({matchExpressions+: matchExpressions}) else __podSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __podSelectorMixin({matchLabels+: matchLabels}),\n            },\n            podSelectorType:: hidden.meta.v1.labelSelector,\n          },\n          specType:: hidden.networking.v1.networkPolicySpec,\n        },\n      },\n      // NetworkPolicyList is a list of NetworkPolicy objects.\n      networkPolicyList:: {\n        local kind = {kind: \"NetworkPolicyList\"},\n        new():: apiVersion + kind,\n        // Items is a list of schema objects.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.networking.v1.networkPolicy,\n        mixin:: {\n          // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n            resourceVersion(resourceVersion):: __metadataMixin({resourceVersion: resourceVersion}),\n            // SelfLink is a URL representing this object. Populated by the system. Read-only.\n            selfLink(selfLink):: __metadataMixin({selfLink: selfLink}),\n          },\n          metadataType:: hidden.meta.v1.listMeta,\n        },\n      },\n    },\n  },\n  policy:: {\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"policy/v1beta1\"},\n      // Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.\n      eviction:: {\n        local kind = {kind: \"Eviction\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          // DeleteOptions may be provided\n          deleteOptions:: {\n            local __deleteOptionsMixin(deleteOptions) = {deleteOptions+: deleteOptions},\n            mixinInstance(deleteOptions):: __deleteOptionsMixin(deleteOptions),\n            // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n            gracePeriodSeconds(gracePeriodSeconds):: __deleteOptionsMixin({gracePeriodSeconds: gracePeriodSeconds}),\n            // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\n            orphanDependents(orphanDependents):: __deleteOptionsMixin({orphanDependents: orphanDependents}),\n            // Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.\n            preconditions:: {\n              local __preconditionsMixin(preconditions) = __deleteOptionsMixin({preconditions+: preconditions}),\n              mixinInstance(preconditions):: __preconditionsMixin(preconditions),\n              // Specifies the target UID.\n              uid(uid):: __preconditionsMixin({uid: uid}),\n            },\n            preconditionsType:: hidden.meta.v1.preconditions,\n            // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\n            propagationPolicy(propagationPolicy):: __deleteOptionsMixin({propagationPolicy: propagationPolicy}),\n          },\n          deleteOptionsType:: hidden.meta.v1.deleteOptions,\n          // ObjectMeta describes the pod that is being evicted.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods\n      podDisruptionBudget:: {\n        local kind = {kind: \"PodDisruptionBudget\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // Specification of the desired behavior of the PodDisruptionBudget.\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".\n            maxUnavailable(maxUnavailable):: __specMixin({maxUnavailable: maxUnavailable}),\n            // An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".\n            minAvailable(minAvailable):: __specMixin({minAvailable: minAvailable}),\n            // Label query over pods whose evictions are managed by the disruption budget.\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n          },\n          specType:: hidden.policy.v1beta1.podDisruptionBudgetSpec,\n        },\n      },\n      // PodDisruptionBudgetList is a collection of PodDisruptionBudgets.\n      podDisruptionBudgetList:: {\n        local kind = {kind: \"PodDisruptionBudgetList\"},\n        new():: apiVersion + kind,\n        //\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.policy.v1beta1.podDisruptionBudget,\n        mixin:: {\n        },\n      },\n    },\n  },\n  rbac:: {\n    v1alpha1:: {\n      local apiVersion = {apiVersion: \"rbac.authorization.k8s.io/v1alpha1\"},\n      // ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\n      clusterRole:: {\n        local kind = {kind: \"ClusterRole\"},\n        new():: apiVersion + kind,\n        // Rules holds all the PolicyRules for this ClusterRole\n        rules(rules):: if std.type(rules) == \"array\" then {rules+: rules} else {rules+: [rules]},\n        rulesType:: hidden.rbac.v1alpha1.policyRule,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.\n      clusterRoleBinding:: {\n        local kind = {kind: \"ClusterRoleBinding\"},\n        new():: apiVersion + kind,\n        // Subjects holds references to the objects the role applies to.\n        subjects(subjects):: if std.type(subjects) == \"array\" then {subjects+: subjects} else {subjects+: [subjects]},\n        subjectsType:: hidden.rbac.v1alpha1.subject,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\n          roleRef:: {\n            local __roleRefMixin(roleRef) = {roleRef+: roleRef},\n            mixinInstance(roleRef):: __roleRefMixin(roleRef),\n            // APIGroup is the group for the resource being referenced\n            apiGroup(apiGroup):: __roleRefMixin({apiGroup: apiGroup}),\n            // Name is the name of resource being referenced\n            name(name):: __roleRefMixin({name: name}),\n          },\n          roleRefType:: hidden.rbac.v1alpha1.roleRef,\n        },\n      },\n      // ClusterRoleBindingList is a collection of ClusterRoleBindings\n      clusterRoleBindingList:: {\n        local kind = {kind: \"ClusterRoleBindingList\"},\n        new():: apiVersion + kind,\n        // Items is a list of ClusterRoleBindings\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1alpha1.clusterRoleBinding,\n        mixin:: {\n        },\n      },\n      // ClusterRoleList is a collection of ClusterRoles\n      clusterRoleList:: {\n        local kind = {kind: \"ClusterRoleList\"},\n        new():: apiVersion + kind,\n        // Items is a list of ClusterRoles\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1alpha1.clusterRole,\n        mixin:: {\n        },\n      },\n      // Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\n      role:: {\n        local kind = {kind: \"Role\"},\n        new():: apiVersion + kind,\n        // Rules holds all the PolicyRules for this Role\n        rules(rules):: if std.type(rules) == \"array\" then {rules+: rules} else {rules+: [rules]},\n        rulesType:: hidden.rbac.v1alpha1.policyRule,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.\n      roleBinding:: {\n        local kind = {kind: \"RoleBinding\"},\n        new():: apiVersion + kind,\n        // Subjects holds references to the objects the role applies to.\n        subjects(subjects):: if std.type(subjects) == \"array\" then {subjects+: subjects} else {subjects+: [subjects]},\n        subjectsType:: hidden.rbac.v1alpha1.subject,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\n          roleRef:: {\n            local __roleRefMixin(roleRef) = {roleRef+: roleRef},\n            mixinInstance(roleRef):: __roleRefMixin(roleRef),\n            // APIGroup is the group for the resource being referenced\n            apiGroup(apiGroup):: __roleRefMixin({apiGroup: apiGroup}),\n            // Name is the name of resource being referenced\n            name(name):: __roleRefMixin({name: name}),\n          },\n          roleRefType:: hidden.rbac.v1alpha1.roleRef,\n        },\n      },\n      // RoleBindingList is a collection of RoleBindings\n      roleBindingList:: {\n        local kind = {kind: \"RoleBindingList\"},\n        new():: apiVersion + kind,\n        // Items is a list of RoleBindings\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1alpha1.roleBinding,\n        mixin:: {\n        },\n      },\n      // RoleList is a collection of Roles\n      roleList:: {\n        local kind = {kind: \"RoleList\"},\n        new():: apiVersion + kind,\n        // Items is a list of Roles\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1alpha1.role,\n        mixin:: {\n        },\n      },\n    },\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"rbac.authorization.k8s.io/v1beta1\"},\n      // ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\n      clusterRole:: {\n        local kind = {kind: \"ClusterRole\"},\n        new():: apiVersion + kind,\n        // Rules holds all the PolicyRules for this ClusterRole\n        rules(rules):: if std.type(rules) == \"array\" then {rules+: rules} else {rules+: [rules]},\n        rulesType:: hidden.rbac.v1beta1.policyRule,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.\n      clusterRoleBinding:: {\n        local kind = {kind: \"ClusterRoleBinding\"},\n        new():: apiVersion + kind,\n        // Subjects holds references to the objects the role applies to.\n        subjects(subjects):: if std.type(subjects) == \"array\" then {subjects+: subjects} else {subjects+: [subjects]},\n        subjectsType:: hidden.rbac.v1beta1.subject,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\n          roleRef:: {\n            local __roleRefMixin(roleRef) = {roleRef+: roleRef},\n            mixinInstance(roleRef):: __roleRefMixin(roleRef),\n            // APIGroup is the group for the resource being referenced\n            apiGroup(apiGroup):: __roleRefMixin({apiGroup: apiGroup}),\n            // Name is the name of resource being referenced\n            name(name):: __roleRefMixin({name: name}),\n          },\n          roleRefType:: hidden.rbac.v1beta1.roleRef,\n        },\n      },\n      // ClusterRoleBindingList is a collection of ClusterRoleBindings\n      clusterRoleBindingList:: {\n        local kind = {kind: \"ClusterRoleBindingList\"},\n        new():: apiVersion + kind,\n        // Items is a list of ClusterRoleBindings\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1beta1.clusterRoleBinding,\n        mixin:: {\n        },\n      },\n      // ClusterRoleList is a collection of ClusterRoles\n      clusterRoleList:: {\n        local kind = {kind: \"ClusterRoleList\"},\n        new():: apiVersion + kind,\n        // Items is a list of ClusterRoles\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1beta1.clusterRole,\n        mixin:: {\n        },\n      },\n      // Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\n      role:: {\n        local kind = {kind: \"Role\"},\n        new():: apiVersion + kind,\n        // Rules holds all the PolicyRules for this Role\n        rules(rules):: if std.type(rules) == \"array\" then {rules+: rules} else {rules+: [rules]},\n        rulesType:: hidden.rbac.v1beta1.policyRule,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.\n      roleBinding:: {\n        local kind = {kind: \"RoleBinding\"},\n        new():: apiVersion + kind,\n        // Subjects holds references to the objects the role applies to.\n        subjects(subjects):: if std.type(subjects) == \"array\" then {subjects+: subjects} else {subjects+: [subjects]},\n        subjectsType:: hidden.rbac.v1beta1.subject,\n        mixin:: {\n          // Standard object's metadata.\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          // RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\n          roleRef:: {\n            local __roleRefMixin(roleRef) = {roleRef+: roleRef},\n            mixinInstance(roleRef):: __roleRefMixin(roleRef),\n            // APIGroup is the group for the resource being referenced\n            apiGroup(apiGroup):: __roleRefMixin({apiGroup: apiGroup}),\n            // Name is the name of resource being referenced\n            name(name):: __roleRefMixin({name: name}),\n          },\n          roleRefType:: hidden.rbac.v1beta1.roleRef,\n        },\n      },\n      // RoleBindingList is a collection of RoleBindings\n      roleBindingList:: {\n        local kind = {kind: \"RoleBindingList\"},\n        new():: apiVersion + kind,\n        // Items is a list of RoleBindings\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1beta1.roleBinding,\n        mixin:: {\n        },\n      },\n      // RoleList is a collection of Roles\n      roleList:: {\n        local kind = {kind: \"RoleList\"},\n        new():: apiVersion + kind,\n        // Items is a list of Roles\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.rbac.v1beta1.role,\n        mixin:: {\n        },\n      },\n    },\n  },\n  settings:: {\n    v1alpha1:: {\n      local apiVersion = {apiVersion: \"settings.k8s.io/v1alpha1\"},\n      // PodPreset is a policy resource that defines additional runtime requirements for a Pod.\n      podPreset:: {\n        local kind = {kind: \"PodPreset\"},\n        new():: apiVersion + kind,\n        mixin:: {\n          //\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n          //\n          spec:: {\n            local __specMixin(spec) = {spec+: spec},\n            mixinInstance(spec):: __specMixin(spec),\n            // Env defines the collection of EnvVar to inject into containers.\n            env(env):: if std.type(env) == \"array\" then __specMixin({env+: env}) else __specMixin({env+: [env]}),\n            // EnvFrom defines the collection of EnvFromSource to inject into containers.\n            envFrom(envFrom):: if std.type(envFrom) == \"array\" then __specMixin({envFrom+: envFrom}) else __specMixin({envFrom+: [envFrom]}),\n            envFromType:: hidden.core.v1.envFromSource,\n            envType:: hidden.core.v1.envVar,\n            // Selector is a label query over a set of resources, in this case pods. Required.\n            selector:: {\n              local __selectorMixin(selector) = __specMixin({selector+: selector}),\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // VolumeMounts defines the collection of VolumeMount to inject into containers.\n            volumeMounts(volumeMounts):: if std.type(volumeMounts) == \"array\" then __specMixin({volumeMounts+: volumeMounts}) else __specMixin({volumeMounts+: [volumeMounts]}),\n            volumeMountsType:: hidden.core.v1.volumeMount,\n            // Volumes defines the collection of Volume to inject into the pod.\n            volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n            volumesType:: hidden.core.v1.volume,\n          },\n          specType:: hidden.settings.v1alpha1.podPresetSpec,\n        },\n      },\n      // PodPresetList is a list of PodPreset objects.\n      podPresetList:: {\n        local kind = {kind: \"PodPresetList\"},\n        new():: apiVersion + kind,\n        // Items is a list of schema objects.\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.settings.v1alpha1.podPreset,\n        mixin:: {\n        },\n      },\n    },\n  },\n  storage:: {\n    v1:: {\n      local apiVersion = {apiVersion: \"storage.k8s.io/v1\"},\n      // StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n      //\n      // StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.\n      storageClass:: {\n        local kind = {kind: \"StorageClass\"},\n        new():: apiVersion + kind,\n        // Parameters holds the parameters for the provisioner that should create volumes of this storage class.\n        parameters(parameters):: {parameters+: parameters},\n        // Provisioner indicates the type of the provisioner.\n        provisioner(provisioner):: {provisioner: provisioner},\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // StorageClassList is a collection of storage classes.\n      storageClassList:: {\n        local kind = {kind: \"StorageClassList\"},\n        new():: apiVersion + kind,\n        // Items is the list of StorageClasses\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.storage.v1.storageClass,\n        mixin:: {\n        },\n      },\n    },\n    v1beta1:: {\n      local apiVersion = {apiVersion: \"storage.k8s.io/v1beta1\"},\n      // StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n      //\n      // StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.\n      storageClass:: {\n        local kind = {kind: \"StorageClass\"},\n        new():: apiVersion + kind,\n        // Parameters holds the parameters for the provisioner that should create volumes of this storage class.\n        parameters(parameters):: {parameters+: parameters},\n        // Provisioner indicates the type of the provisioner.\n        provisioner(provisioner):: {provisioner: provisioner},\n        mixin:: {\n          // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n          metadata:: {\n            local __metadataMixin(metadata) = {metadata+: metadata},\n            mixinInstance(metadata):: __metadataMixin(metadata),\n            // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n            annotations(annotations):: __metadataMixin({annotations+: annotations}),\n            // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n            clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n            // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n            deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n            // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n            finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n            // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n            //\n            // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n            //\n            // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n            generateName(generateName):: __metadataMixin({generateName: generateName}),\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n            // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n            labels(labels):: __metadataMixin({labels+: labels}),\n            // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n            name(name):: __metadataMixin({name: name}),\n            // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n            //\n            // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n            namespace(namespace):: __metadataMixin({namespace: namespace}),\n          },\n          metadataType:: hidden.meta.v1.objectMeta,\n        },\n      },\n      // StorageClassList is a collection of storage classes.\n      storageClassList:: {\n        local kind = {kind: \"StorageClassList\"},\n        new():: apiVersion + kind,\n        // Items is the list of StorageClasses\n        items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n        itemsType:: hidden.storage.v1beta1.storageClass,\n        mixin:: {\n        },\n      },\n    },\n  },\n  local hidden = {\n    admissionregistration:: {\n      v1alpha1:: {\n        local apiVersion = {apiVersion: \"admissionregistration/v1alpha1\"},\n        // AdmissionHookClientConfig contains the information to make a TLS connection with the webhook\n        admissionHookClientConfig:: {\n          new():: {},\n          // CABundle is a PEM encoded CA bundle which will be used to validate webhook's server certificate. Required\n          caBundle(caBundle):: {caBundle: caBundle},\n          mixin:: {\n            // Service is a reference to the service for this webhook. If there is only one port open for the service, that port will be used. If there are multiple ports open, port 443 will be used if it is open, otherwise it is an error. Required\n            service:: {\n              local __serviceMixin(service) = {service+: service},\n              mixinInstance(service):: __serviceMixin(service),\n              // Name is the name of the service Required\n              name(name):: __serviceMixin({name: name}),\n              // Namespace is the namespace of the service Required\n              namespace(namespace):: __serviceMixin({namespace: namespace}),\n            },\n            serviceType:: hidden.admissionregistration.v1alpha1.serviceReference,\n          },\n        },\n        // ExternalAdmissionHook describes an external admission webhook and the resources and operations it applies to.\n        externalAdmissionHook:: {\n          new():: {},\n          // FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.\n          failurePolicy(failurePolicy):: {failurePolicy: failurePolicy},\n          // The name of the external admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.\n          name(name):: {name: name},\n          // Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule.\n          rules(rules):: if std.type(rules) == \"array\" then {rules+: rules} else {rules+: [rules]},\n          rulesType:: hidden.admissionregistration.v1alpha1.ruleWithOperations,\n          mixin:: {\n            // ClientConfig defines how to communicate with the hook. Required\n            clientConfig:: {\n              local __clientConfigMixin(clientConfig) = {clientConfig+: clientConfig},\n              mixinInstance(clientConfig):: __clientConfigMixin(clientConfig),\n              // CABundle is a PEM encoded CA bundle which will be used to validate webhook's server certificate. Required\n              caBundle(caBundle):: __clientConfigMixin({caBundle: caBundle}),\n              // Service is a reference to the service for this webhook. If there is only one port open for the service, that port will be used. If there are multiple ports open, port 443 will be used if it is open, otherwise it is an error. Required\n              service:: {\n                local __serviceMixin(service) = __clientConfigMixin({service+: service}),\n                mixinInstance(service):: __serviceMixin(service),\n                // Name is the name of the service Required\n                name(name):: __serviceMixin({name: name}),\n                // Namespace is the namespace of the service Required\n                namespace(namespace):: __serviceMixin({namespace: namespace}),\n              },\n              serviceType:: hidden.admissionregistration.v1alpha1.serviceReference,\n            },\n            clientConfigType:: hidden.admissionregistration.v1alpha1.admissionHookClientConfig,\n          },\n        },\n        // Initializer describes the name and the failure policy of an initializer, and what resources it applies to.\n        initializer:: {\n          new():: {},\n          // FailurePolicy defines what happens if the responsible initializer controller fails to takes action. Allowed values are Ignore, or Fail. If \"Ignore\" is set, initializer is removed from the initializers list of an object if the timeout is reached; If \"Fail\" is set, admissionregistration returns timeout error if the timeout is reached.\n          failurePolicy(failurePolicy):: {failurePolicy: failurePolicy},\n          // Name is the identifier of the initializer. It will be added to the object that needs to be initialized. Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where \"alwayspullimages\" is the name of the webhook, and kubernetes.io is the name of the organization. Required\n          name(name):: {name: name},\n          // Rules describes what resources/subresources the initializer cares about. The initializer cares about an operation if it matches _any_ Rule. Rule.Resources must not include subresources.\n          rules(rules):: if std.type(rules) == \"array\" then {rules+: rules} else {rules+: [rules]},\n          rulesType:: hidden.admissionregistration.v1alpha1.rule,\n          mixin:: {\n          },\n        },\n        // Rule is a tuple of APIGroups, APIVersion, and Resources.It is recommended to make sure that all the tuple expansions are valid.\n        rule:: {\n          new():: {},\n          // APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n          apiGroups(apiGroups):: if std.type(apiGroups) == \"array\" then {apiGroups+: apiGroups} else {apiGroups+: [apiGroups]},\n          // APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n          apiVersions(apiVersions):: if std.type(apiVersions) == \"array\" then {apiVersions+: apiVersions} else {apiVersions+: [apiVersions]},\n          // Resources is a list of resources this rule applies to.\n          //\n          // For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n          //\n          // If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n          //\n          // Depending on the enclosing object, subresources might not be allowed. Required.\n          resources(resources):: if std.type(resources) == \"array\" then {resources+: resources} else {resources+: [resources]},\n          mixin:: {\n          },\n        },\n        // RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.\n        ruleWithOperations:: {\n          new():: {},\n          // APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\n          apiGroups(apiGroups):: if std.type(apiGroups) == \"array\" then {apiGroups+: apiGroups} else {apiGroups+: [apiGroups]},\n          // APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\n          apiVersions(apiVersions):: if std.type(apiVersions) == \"array\" then {apiVersions+: apiVersions} else {apiVersions+: [apiVersions]},\n          // Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If '*' is present, the length of the slice must be one. Required.\n          operations(operations):: if std.type(operations) == \"array\" then {operations+: operations} else {operations+: [operations]},\n          // Resources is a list of resources this rule applies to.\n          //\n          // For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n          //\n          // If wildcard is present, the validation rule will ensure resources do not overlap with each other.\n          //\n          // Depending on the enclosing object, subresources might not be allowed. Required.\n          resources(resources):: if std.type(resources) == \"array\" then {resources+: resources} else {resources+: [resources]},\n          mixin:: {\n          },\n        },\n        // ServiceReference holds a reference to Service.legacy.k8s.io\n        serviceReference:: {\n          new():: {},\n          // Name is the name of the service Required\n          name(name):: {name: name},\n          // Namespace is the namespace of the service Required\n          namespace(namespace):: {namespace: namespace},\n          mixin:: {\n          },\n        },\n      },\n    },\n    apiregistration:: {\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"apiregistration/v1beta1\"},\n        // APIService represents a server for a particular GroupVersion. Name must be \"version.group\".\n        aPIService:: {\n          new():: {},\n          mixin:: {\n            //\n            metadata:: {\n              local __metadataMixin(metadata) = {metadata+: metadata},\n              mixinInstance(metadata):: __metadataMixin(metadata),\n              // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n              annotations(annotations):: __metadataMixin({annotations+: annotations}),\n              // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n              clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n              // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n              deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n              // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n              finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n              // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n              //\n              // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n              //\n              // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n              generateName(generateName):: __metadataMixin({generateName: generateName}),\n              // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n              //\n              // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n              initializers:: {\n                local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                mixinInstance(initializers):: __initializersMixin(initializers),\n                // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                pendingType:: hidden.meta.v1.initializer,\n                // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                result:: {\n                  local __resultMixin(result) = __initializersMixin({result+: result}),\n                  mixinInstance(result):: __resultMixin(result),\n                  // Suggested HTTP return code for this status, 0 if not set.\n                  code(code):: __resultMixin({code: code}),\n                  // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                  details:: {\n                    local __detailsMixin(details) = __resultMixin({details+: details}),\n                    mixinInstance(details):: __detailsMixin(details),\n                    // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                    causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                    causesType:: hidden.meta.v1.statusCause,\n                    // The group attribute of the resource associated with the status StatusReason.\n                    group(group):: __detailsMixin({group: group}),\n                    // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                    name(name):: __detailsMixin({name: name}),\n                    // If specified, the time in seconds before the operation should be retried.\n                    retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                    // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                    uid(uid):: __detailsMixin({uid: uid}),\n                  },\n                  detailsType:: hidden.meta.v1.statusDetails,\n                  // A human-readable description of the status of this operation.\n                  message(message):: __resultMixin({message: message}),\n                  // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                  reason(reason):: __resultMixin({reason: reason}),\n                },\n                resultType:: hidden.meta.v1.status,\n              },\n              initializersType:: hidden.meta.v1.initializers,\n              // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n              labels(labels):: __metadataMixin({labels+: labels}),\n              // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __metadataMixin({name: name}),\n              // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n              //\n              // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n              namespace(namespace):: __metadataMixin({namespace: namespace}),\n            },\n            metadataType:: hidden.meta.v1.objectMeta,\n            // Spec contains information for locating and communicating with a server\n            spec:: {\n              local __specMixin(spec) = {spec+: spec},\n              mixinInstance(spec):: __specMixin(spec),\n              // CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.\n              caBundle(caBundle):: __specMixin({caBundle: caBundle}),\n              // Group is the API group name this server hosts\n              group(group):: __specMixin({group: group}),\n              // GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s\n              groupPriorityMinimum(groupPriorityMinimum):: __specMixin({groupPriorityMinimum: groupPriorityMinimum}),\n              // InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.\n              insecureSkipTLSVerify(insecureSkipTLSVerify):: __specMixin({insecureSkipTLSVerify: insecureSkipTLSVerify}),\n              // Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.\n              service:: {\n                local __serviceMixin(service) = __specMixin({service+: service}),\n                mixinInstance(service):: __serviceMixin(service),\n                // Name is the name of the service\n                name(name):: __serviceMixin({name: name}),\n                // Namespace is the namespace of the service\n                namespace(namespace):: __serviceMixin({namespace: namespace}),\n              },\n              serviceType:: hidden.apiregistration.v1beta1.serviceReference,\n              // Version is the API version this server hosts.  For example, \"v1\"\n              version(version):: __specMixin({version: version}),\n              // VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it's inside of a group, the number can be small, probably in the 10s.\n              versionPriority(versionPriority):: __specMixin({versionPriority: versionPriority}),\n            },\n            specType:: hidden.apiregistration.v1beta1.aPIServiceSpec,\n            // Status contains derived information about an API server\n            status:: {\n              local __statusMixin(status) = {status+: status},\n              mixinInstance(status):: __statusMixin(status),\n              // Current service state of apiService.\n              conditions(conditions):: if std.type(conditions) == \"array\" then __statusMixin({conditions+: conditions}) else __statusMixin({conditions+: [conditions]}),\n              conditionsType:: hidden.apiregistration.v1beta1.aPIServiceCondition,\n            },\n            statusType:: hidden.apiregistration.v1beta1.aPIServiceStatus,\n          },\n        },\n        //\n        aPIServiceCondition:: {\n          new():: {},\n          // Human-readable message indicating details about last transition.\n          message(message):: {message: message},\n          // Unique, one-word, CamelCase reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Status is the status of the condition. Can be True, False, Unknown.\n          status(status):: {status: status},\n          // Type is the type of the condition.\n          type(type):: {type: type},\n          mixin:: {\n            // Last time the condition transitioned from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // APIServiceList is a list of APIService objects.\n        aPIServiceList:: {\n          new():: {},\n          //\n          items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n          itemsType:: hidden.apiregistration.v1beta1.aPIService,\n          mixin:: {\n            //\n            metadata:: {\n              local __metadataMixin(metadata) = {metadata+: metadata},\n              mixinInstance(metadata):: __metadataMixin(metadata),\n              // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n              resourceVersion(resourceVersion):: __metadataMixin({resourceVersion: resourceVersion}),\n              // SelfLink is a URL representing this object. Populated by the system. Read-only.\n              selfLink(selfLink):: __metadataMixin({selfLink: selfLink}),\n            },\n            metadataType:: hidden.meta.v1.listMeta,\n          },\n        },\n        // APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.\n        aPIServiceSpec:: {\n          new():: {},\n          // CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.\n          caBundle(caBundle):: {caBundle: caBundle},\n          // Group is the API group name this server hosts\n          group(group):: {group: group},\n          // GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s\n          groupPriorityMinimum(groupPriorityMinimum):: {groupPriorityMinimum: groupPriorityMinimum},\n          // InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.\n          insecureSkipTLSVerify(insecureSkipTLSVerify):: {insecureSkipTLSVerify: insecureSkipTLSVerify},\n          // Version is the API version this server hosts.  For example, \"v1\"\n          version(version):: {version: version},\n          // VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it's inside of a group, the number can be small, probably in the 10s.\n          versionPriority(versionPriority):: {versionPriority: versionPriority},\n          mixin:: {\n            // Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.\n            service:: {\n              local __serviceMixin(service) = {service+: service},\n              mixinInstance(service):: __serviceMixin(service),\n              // Name is the name of the service\n              name(name):: __serviceMixin({name: name}),\n              // Namespace is the namespace of the service\n              namespace(namespace):: __serviceMixin({namespace: namespace}),\n            },\n            serviceType:: hidden.apiregistration.v1beta1.serviceReference,\n          },\n        },\n        // APIServiceStatus contains derived information about an API server\n        aPIServiceStatus:: {\n          new():: {},\n          // Current service state of apiService.\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.apiregistration.v1beta1.aPIServiceCondition,\n          mixin:: {\n          },\n        },\n        // ServiceReference holds a reference to Service.legacy.k8s.io\n        serviceReference:: {\n          new():: {},\n          // Name is the name of the service\n          name(name):: {name: name},\n          // Namespace is the namespace of the service\n          namespace(namespace):: {namespace: namespace},\n          mixin:: {\n          },\n        },\n      },\n    },\n    apps:: {\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"apps/v1beta1\"},\n        // DeploymentCondition describes the state of a deployment at a certain point.\n        deploymentCondition:: {\n          new():: {},\n          // A human readable message indicating details about the transition.\n          message(message):: {message: message},\n          // The reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Type of deployment condition.\n          type(type):: {type: type},\n          mixin:: {\n            // Last time the condition transitioned from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n            // The last time this condition was updated.\n            lastUpdateTime:: {\n              local __lastUpdateTimeMixin(lastUpdateTime) = {lastUpdateTime+: lastUpdateTime},\n              mixinInstance(lastUpdateTime):: __lastUpdateTimeMixin(lastUpdateTime),\n            },\n            lastUpdateTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // DeploymentSpec is the specification of the desired behavior of the Deployment.\n        deploymentSpec:: {\n          new():: {},\n          // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n          minReadySeconds(minReadySeconds):: {minReadySeconds: minReadySeconds},\n          // Indicates that the deployment is paused.\n          paused(paused):: {paused: paused},\n          // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.\n          progressDeadlineSeconds(progressDeadlineSeconds):: {progressDeadlineSeconds: progressDeadlineSeconds},\n          // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n          replicas(replicas):: {replicas: replicas},\n          // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.\n          revisionHistoryLimit(revisionHistoryLimit):: {revisionHistoryLimit: revisionHistoryLimit},\n          mixin:: {\n            // The config this deployment is rolling back to. Will be cleared after rollback is done.\n            rollbackTo:: {\n              local __rollbackToMixin(rollbackTo) = {rollbackTo+: rollbackTo},\n              mixinInstance(rollbackTo):: __rollbackToMixin(rollbackTo),\n              // The revision to rollback to. If set to 0, rollback to the last revision.\n              revision(revision):: __rollbackToMixin({revision: revision}),\n            },\n            rollbackToType:: hidden.apps.v1beta1.rollbackConfig,\n            // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // The deployment strategy to use to replace existing pods with new ones.\n            strategy:: {\n              local __strategyMixin(strategy) = {strategy+: strategy},\n              mixinInstance(strategy):: __strategyMixin(strategy),\n              // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __strategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n                maxSurge(maxSurge):: __rollingUpdateMixin({maxSurge: maxSurge}),\n                // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n                maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n              },\n              rollingUpdateType:: hidden.apps.v1beta1.rollingUpdateDeployment,\n              // Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n              type(type):: __strategyMixin({type: type}),\n            },\n            strategyType:: hidden.apps.v1beta1.deploymentStrategy,\n            // Template describes the pods that will be created.\n            template:: {\n              local __templateMixin(template) = {template+: template},\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n        },\n        // DeploymentStatus is the most recently observed status of the Deployment.\n        deploymentStatus:: {\n          new():: {},\n          // Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n          availableReplicas(availableReplicas):: {availableReplicas: availableReplicas},\n          // Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.\n          collisionCount(collisionCount):: {collisionCount: collisionCount},\n          // Represents the latest available observations of a deployment's current state.\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.apps.v1beta1.deploymentCondition,\n          // The generation observed by the deployment controller.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          // Total number of ready pods targeted by this deployment.\n          readyReplicas(readyReplicas):: {readyReplicas: readyReplicas},\n          // Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n          replicas(replicas):: {replicas: replicas},\n          // Total number of unavailable pods targeted by this deployment.\n          unavailableReplicas(unavailableReplicas):: {unavailableReplicas: unavailableReplicas},\n          // Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n          updatedReplicas(updatedReplicas):: {updatedReplicas: updatedReplicas},\n          mixin:: {\n          },\n        },\n        // DeploymentStrategy describes how to replace existing pods with new ones.\n        deploymentStrategy:: {\n          new():: {},\n          // Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n          type(type):: {type: type},\n          mixin:: {\n            // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n            rollingUpdate:: {\n              local __rollingUpdateMixin(rollingUpdate) = {rollingUpdate+: rollingUpdate},\n              mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n              // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n              maxSurge(maxSurge):: __rollingUpdateMixin({maxSurge: maxSurge}),\n              // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n              maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n            },\n            rollingUpdateType:: hidden.apps.v1beta1.rollingUpdateDeployment,\n          },\n        },\n        //\n        rollbackConfig:: {\n          new():: {},\n          // The revision to rollback to. If set to 0, rollback to the last revision.\n          revision(revision):: {revision: revision},\n          mixin:: {\n          },\n        },\n        // Spec to control the desired behavior of rolling update.\n        rollingUpdateDeployment:: {\n          new():: {},\n          // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n          maxSurge(maxSurge):: {maxSurge: maxSurge},\n          // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n          maxUnavailable(maxUnavailable):: {maxUnavailable: maxUnavailable},\n          mixin:: {\n          },\n        },\n        // RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.\n        rollingUpdateStatefulSetStrategy:: {\n          new():: {},\n          // Partition indicates the ordinal at which the StatefulSet should be partitioned.\n          partition(partition):: {partition: partition},\n          mixin:: {\n          },\n        },\n        // ScaleSpec describes the attributes of a scale subresource\n        scaleSpec:: {\n          new():: {},\n          // desired number of instances for the scaled object.\n          replicas(replicas):: {replicas: replicas},\n          mixin:: {\n          },\n        },\n        // ScaleStatus represents the current status of a scale subresource.\n        scaleStatus:: {\n          new():: {},\n          // actual number of observed instances of the scaled object.\n          replicas(replicas):: {replicas: replicas},\n          // label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors\n          selector(selector):: {selector+: selector},\n          // label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n          targetSelector(targetSelector):: {targetSelector: targetSelector},\n          mixin:: {\n          },\n        },\n        // A StatefulSetSpec is the specification of a StatefulSet.\n        statefulSetSpec:: {\n          new():: {},\n          // podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\n          podManagementPolicy(podManagementPolicy):: {podManagementPolicy: podManagementPolicy},\n          // replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.\n          replicas(replicas):: {replicas: replicas},\n          // revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.\n          revisionHistoryLimit(revisionHistoryLimit):: {revisionHistoryLimit: revisionHistoryLimit},\n          // serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.\n          serviceName(serviceName):: {serviceName: serviceName},\n          // volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.\n          volumeClaimTemplates(volumeClaimTemplates):: if std.type(volumeClaimTemplates) == \"array\" then {volumeClaimTemplates+: volumeClaimTemplates} else {volumeClaimTemplates+: [volumeClaimTemplates]},\n          volumeClaimTemplatesType:: hidden.core.v1.persistentVolumeClaim,\n          mixin:: {\n            // selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.\n            template:: {\n              local __templateMixin(template) = {template+: template},\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n            // updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.\n            updateStrategy:: {\n              local __updateStrategyMixin(updateStrategy) = {updateStrategy+: updateStrategy},\n              mixinInstance(updateStrategy):: __updateStrategyMixin(updateStrategy),\n              // RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __updateStrategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // Partition indicates the ordinal at which the StatefulSet should be partitioned.\n                partition(partition):: __rollingUpdateMixin({partition: partition}),\n              },\n              rollingUpdateType:: hidden.apps.v1beta1.rollingUpdateStatefulSetStrategy,\n              // Type indicates the type of the StatefulSetUpdateStrategy.\n              type(type):: __updateStrategyMixin({type: type}),\n            },\n            updateStrategyType:: hidden.apps.v1beta1.statefulSetUpdateStrategy,\n          },\n        },\n        // StatefulSetStatus represents the current state of a StatefulSet.\n        statefulSetStatus:: {\n          new():: {},\n          // currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.\n          currentReplicas(currentReplicas):: {currentReplicas: currentReplicas},\n          // currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).\n          currentRevision(currentRevision):: {currentRevision: currentRevision},\n          // observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          // readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.\n          readyReplicas(readyReplicas):: {readyReplicas: readyReplicas},\n          // replicas is the number of Pods created by the StatefulSet controller.\n          replicas(replicas):: {replicas: replicas},\n          // updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)\n          updateRevision(updateRevision):: {updateRevision: updateRevision},\n          // updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.\n          updatedReplicas(updatedReplicas):: {updatedReplicas: updatedReplicas},\n          mixin:: {\n          },\n        },\n        // StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.\n        statefulSetUpdateStrategy:: {\n          new():: {},\n          // Type indicates the type of the StatefulSetUpdateStrategy.\n          type(type):: {type: type},\n          mixin:: {\n            // RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.\n            rollingUpdate:: {\n              local __rollingUpdateMixin(rollingUpdate) = {rollingUpdate+: rollingUpdate},\n              mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n              // Partition indicates the ordinal at which the StatefulSet should be partitioned.\n              partition(partition):: __rollingUpdateMixin({partition: partition}),\n            },\n            rollingUpdateType:: hidden.apps.v1beta1.rollingUpdateStatefulSetStrategy,\n          },\n        },\n      },\n    },\n    authentication:: {\n      v1:: {\n        local apiVersion = {apiVersion: \"authentication/v1\"},\n        // TokenReviewSpec is a description of the token authentication request.\n        tokenReviewSpec:: {\n          new():: {},\n          // Token is the opaque bearer token.\n          token(token):: {token: token},\n          mixin:: {\n          },\n        },\n        // TokenReviewStatus is the result of the token authentication request.\n        tokenReviewStatus:: {\n          new():: {},\n          // Authenticated indicates that the token was associated with a known user.\n          authenticated(authenticated):: {authenticated: authenticated},\n          mixin:: {\n            // User is the UserInfo associated with the provided token.\n            user:: {\n              local __userMixin(user) = {user+: user},\n              mixinInstance(user):: __userMixin(user),\n              // Any additional information provided by the authenticator.\n              extra(extra):: __userMixin({extra+: extra}),\n              // The names of groups this user is a part of.\n              groups(groups):: if std.type(groups) == \"array\" then __userMixin({groups+: groups}) else __userMixin({groups+: [groups]}),\n              // A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n              uid(uid):: __userMixin({uid: uid}),\n              // The name that uniquely identifies this user among all active users.\n              username(username):: __userMixin({username: username}),\n            },\n            userType:: hidden.authentication.v1.userInfo,\n          },\n        },\n        // UserInfo holds the information about the user needed to implement the user.Info interface.\n        userInfo:: {\n          new():: {},\n          // Any additional information provided by the authenticator.\n          extra(extra):: {extra+: extra},\n          // The names of groups this user is a part of.\n          groups(groups):: if std.type(groups) == \"array\" then {groups+: groups} else {groups+: [groups]},\n          // A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n          uid(uid):: {uid: uid},\n          // The name that uniquely identifies this user among all active users.\n          username(username):: {username: username},\n          mixin:: {\n          },\n        },\n      },\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"authentication/v1beta1\"},\n        // TokenReviewSpec is a description of the token authentication request.\n        tokenReviewSpec:: {\n          new():: {},\n          // Token is the opaque bearer token.\n          token(token):: {token: token},\n          mixin:: {\n          },\n        },\n        // TokenReviewStatus is the result of the token authentication request.\n        tokenReviewStatus:: {\n          new():: {},\n          // Authenticated indicates that the token was associated with a known user.\n          authenticated(authenticated):: {authenticated: authenticated},\n          mixin:: {\n            // User is the UserInfo associated with the provided token.\n            user:: {\n              local __userMixin(user) = {user+: user},\n              mixinInstance(user):: __userMixin(user),\n              // Any additional information provided by the authenticator.\n              extra(extra):: __userMixin({extra+: extra}),\n              // The names of groups this user is a part of.\n              groups(groups):: if std.type(groups) == \"array\" then __userMixin({groups+: groups}) else __userMixin({groups+: [groups]}),\n              // A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n              uid(uid):: __userMixin({uid: uid}),\n              // The name that uniquely identifies this user among all active users.\n              username(username):: __userMixin({username: username}),\n            },\n            userType:: hidden.authentication.v1beta1.userInfo,\n          },\n        },\n        // UserInfo holds the information about the user needed to implement the user.Info interface.\n        userInfo:: {\n          new():: {},\n          // Any additional information provided by the authenticator.\n          extra(extra):: {extra+: extra},\n          // The names of groups this user is a part of.\n          groups(groups):: if std.type(groups) == \"array\" then {groups+: groups} else {groups+: [groups]},\n          // A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\n          uid(uid):: {uid: uid},\n          // The name that uniquely identifies this user among all active users.\n          username(username):: {username: username},\n          mixin:: {\n          },\n        },\n      },\n    },\n    authorization:: {\n      v1:: {\n        local apiVersion = {apiVersion: \"authorization/v1\"},\n        // NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface\n        nonResourceAttributes:: {\n          new():: {},\n          // Path is the URL path of the request\n          path(path):: {path: path},\n          // Verb is the standard HTTP verb\n          verb(verb):: {verb: verb},\n          mixin:: {\n          },\n        },\n        // ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface\n        resourceAttributes:: {\n          new():: {},\n          // Group is the API Group of the Resource.  \"*\" means all.\n          group(group):: {group: group},\n          // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n          name(name):: {name: name},\n          // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n          namespace(namespace):: {namespace: namespace},\n          // Resource is one of the existing resource types.  \"*\" means all.\n          resource(resource):: {resource: resource},\n          // Subresource is one of the existing resource types.  \"\" means none.\n          subresource(subresource):: {subresource: subresource},\n          // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n          verb(verb):: {verb: verb},\n          // Version is the API Version of the Resource.  \"*\" means all.\n          version(version):: {version: version},\n          mixin:: {\n          },\n        },\n        // SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\n        selfSubjectAccessReviewSpec:: {\n          new():: {},\n          mixin:: {\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = {nonResourceAttributes+: nonResourceAttributes},\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = {resourceAttributes+: resourceAttributes},\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1.resourceAttributes,\n          },\n        },\n        // SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\n        subjectAccessReviewSpec:: {\n          new():: {},\n          // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\n          extra(extra):: {extra+: extra},\n          // Groups is the groups you're testing for.\n          groups(groups):: if std.type(groups) == \"array\" then {groups+: groups} else {groups+: [groups]},\n          // User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups\n          user(user):: {user: user},\n          mixin:: {\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = {nonResourceAttributes+: nonResourceAttributes},\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = {resourceAttributes+: resourceAttributes},\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1.resourceAttributes,\n          },\n        },\n        // SubjectAccessReviewStatus\n        subjectAccessReviewStatus:: {\n          new():: {},\n          // Allowed is required.  True if the action would be allowed, false otherwise.\n          allowed(allowed):: {allowed: allowed},\n          // EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.\n          evaluationError(evaluationError):: {evaluationError: evaluationError},\n          // Reason is optional.  It indicates why a request was allowed or denied.\n          reason(reason):: {reason: reason},\n          mixin:: {\n          },\n        },\n      },\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"authorization/v1beta1\"},\n        // NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface\n        nonResourceAttributes:: {\n          new():: {},\n          // Path is the URL path of the request\n          path(path):: {path: path},\n          // Verb is the standard HTTP verb\n          verb(verb):: {verb: verb},\n          mixin:: {\n          },\n        },\n        // ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface\n        resourceAttributes:: {\n          new():: {},\n          // Group is the API Group of the Resource.  \"*\" means all.\n          group(group):: {group: group},\n          // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n          name(name):: {name: name},\n          // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n          namespace(namespace):: {namespace: namespace},\n          // Resource is one of the existing resource types.  \"*\" means all.\n          resource(resource):: {resource: resource},\n          // Subresource is one of the existing resource types.  \"\" means none.\n          subresource(subresource):: {subresource: subresource},\n          // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n          verb(verb):: {verb: verb},\n          // Version is the API Version of the Resource.  \"*\" means all.\n          version(version):: {version: version},\n          mixin:: {\n          },\n        },\n        // SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\n        selfSubjectAccessReviewSpec:: {\n          new():: {},\n          mixin:: {\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = {nonResourceAttributes+: nonResourceAttributes},\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1beta1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = {resourceAttributes+: resourceAttributes},\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1beta1.resourceAttributes,\n          },\n        },\n        // SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\n        subjectAccessReviewSpec:: {\n          new():: {},\n          // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\n          extra(extra):: {extra+: extra},\n          // Groups is the groups you're testing for.\n          group(group):: if std.type(group) == \"array\" then {group+: group} else {group+: [group]},\n          // User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups\n          user(user):: {user: user},\n          mixin:: {\n            // NonResourceAttributes describes information for a non-resource access request\n            nonResourceAttributes:: {\n              local __nonResourceAttributesMixin(nonResourceAttributes) = {nonResourceAttributes+: nonResourceAttributes},\n              mixinInstance(nonResourceAttributes):: __nonResourceAttributesMixin(nonResourceAttributes),\n              // Path is the URL path of the request\n              path(path):: __nonResourceAttributesMixin({path: path}),\n              // Verb is the standard HTTP verb\n              verb(verb):: __nonResourceAttributesMixin({verb: verb}),\n            },\n            nonResourceAttributesType:: hidden.authorization.v1beta1.nonResourceAttributes,\n            // ResourceAuthorizationAttributes describes information for a resource access request\n            resourceAttributes:: {\n              local __resourceAttributesMixin(resourceAttributes) = {resourceAttributes+: resourceAttributes},\n              mixinInstance(resourceAttributes):: __resourceAttributesMixin(resourceAttributes),\n              // Group is the API Group of the Resource.  \"*\" means all.\n              group(group):: __resourceAttributesMixin({group: group}),\n              // Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.\n              name(name):: __resourceAttributesMixin({name: name}),\n              // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\n              namespace(namespace):: __resourceAttributesMixin({namespace: namespace}),\n              // Resource is one of the existing resource types.  \"*\" means all.\n              resource(resource):: __resourceAttributesMixin({resource: resource}),\n              // Subresource is one of the existing resource types.  \"\" means none.\n              subresource(subresource):: __resourceAttributesMixin({subresource: subresource}),\n              // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n              verb(verb):: __resourceAttributesMixin({verb: verb}),\n              // Version is the API Version of the Resource.  \"*\" means all.\n              version(version):: __resourceAttributesMixin({version: version}),\n            },\n            resourceAttributesType:: hidden.authorization.v1beta1.resourceAttributes,\n          },\n        },\n        // SubjectAccessReviewStatus\n        subjectAccessReviewStatus:: {\n          new():: {},\n          // Allowed is required.  True if the action would be allowed, false otherwise.\n          allowed(allowed):: {allowed: allowed},\n          // EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.\n          evaluationError(evaluationError):: {evaluationError: evaluationError},\n          // Reason is optional.  It indicates why a request was allowed or denied.\n          reason(reason):: {reason: reason},\n          mixin:: {\n          },\n        },\n      },\n    },\n    autoscaling:: {\n      v1:: {\n        local apiVersion = {apiVersion: \"autoscaling/v1\"},\n        // CrossVersionObjectReference contains enough information to let you identify the referred resource.\n        crossVersionObjectReference:: {\n          new():: {},\n          // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // specification of a horizontal pod autoscaler.\n        horizontalPodAutoscalerSpec:: {\n          new():: {},\n          // upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.\n          maxReplicas(maxReplicas):: {maxReplicas: maxReplicas},\n          // lower limit for the number of pods that can be set by the autoscaler, default 1.\n          minReplicas(minReplicas):: {minReplicas: minReplicas},\n          // target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.\n          targetCpuUtilizationPercentage(targetCpuUtilizationPercentage):: {targetCPUUtilizationPercentage: targetCpuUtilizationPercentage},\n          mixin:: {\n            // reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.\n            scaleTargetRef:: {\n              local __scaleTargetRefMixin(scaleTargetRef) = {scaleTargetRef+: scaleTargetRef},\n              mixinInstance(scaleTargetRef):: __scaleTargetRefMixin(scaleTargetRef),\n              // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __scaleTargetRefMixin({name: name}),\n            },\n            scaleTargetRefType:: hidden.autoscaling.v1.crossVersionObjectReference,\n          },\n        },\n        // current status of a horizontal pod autoscaler\n        horizontalPodAutoscalerStatus:: {\n          new():: {},\n          // current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.\n          currentCpuUtilizationPercentage(currentCpuUtilizationPercentage):: {currentCPUUtilizationPercentage: currentCpuUtilizationPercentage},\n          // current number of replicas of pods managed by this autoscaler.\n          currentReplicas(currentReplicas):: {currentReplicas: currentReplicas},\n          // desired number of replicas of pods managed by this autoscaler.\n          desiredReplicas(desiredReplicas):: {desiredReplicas: desiredReplicas},\n          // most recent generation observed by this autoscaler.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          mixin:: {\n            // last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.\n            lastScaleTime:: {\n              local __lastScaleTimeMixin(lastScaleTime) = {lastScaleTime+: lastScaleTime},\n              mixinInstance(lastScaleTime):: __lastScaleTimeMixin(lastScaleTime),\n            },\n            lastScaleTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // ScaleSpec describes the attributes of a scale subresource.\n        scaleSpec:: {\n          new():: {},\n          // desired number of instances for the scaled object.\n          replicas(replicas):: {replicas: replicas},\n          mixin:: {\n          },\n        },\n        // ScaleStatus represents the current status of a scale subresource.\n        scaleStatus:: {\n          new():: {},\n          // actual number of observed instances of the scaled object.\n          replicas(replicas):: {replicas: replicas},\n          // label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors\n          selector(selector):: {selector: selector},\n          mixin:: {\n          },\n        },\n      },\n      v2alpha1:: {\n        local apiVersion = {apiVersion: \"autoscaling/v2alpha1\"},\n        // CrossVersionObjectReference contains enough information to let you identify the referred resource.\n        crossVersionObjectReference:: {\n          new():: {},\n          // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.\n        horizontalPodAutoscalerCondition:: {\n          new():: {},\n          // message is a human-readable explanation containing details about the transition\n          message(message):: {message: message},\n          // reason is the reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // status is the status of the condition (True, False, Unknown)\n          status(status):: {status: status},\n          // type describes the current condition\n          type(type):: {type: type},\n          mixin:: {\n            // lastTransitionTime is the last time the condition transitioned from one status to another\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.\n        horizontalPodAutoscalerSpec:: {\n          new():: {},\n          // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.\n          maxReplicas(maxReplicas):: {maxReplicas: maxReplicas},\n          // metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.\n          metrics(metrics):: if std.type(metrics) == \"array\" then {metrics+: metrics} else {metrics+: [metrics]},\n          metricsType:: hidden.autoscaling.v2alpha1.metricSpec,\n          // minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.\n          minReplicas(minReplicas):: {minReplicas: minReplicas},\n          mixin:: {\n            // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.\n            scaleTargetRef:: {\n              local __scaleTargetRefMixin(scaleTargetRef) = {scaleTargetRef+: scaleTargetRef},\n              mixinInstance(scaleTargetRef):: __scaleTargetRefMixin(scaleTargetRef),\n              // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __scaleTargetRefMixin({name: name}),\n            },\n            scaleTargetRefType:: hidden.autoscaling.v2alpha1.crossVersionObjectReference,\n          },\n        },\n        // HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.\n        horizontalPodAutoscalerStatus:: {\n          new():: {},\n          // conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.autoscaling.v2alpha1.horizontalPodAutoscalerCondition,\n          // currentMetrics is the last read state of the metrics used by this autoscaler.\n          currentMetrics(currentMetrics):: if std.type(currentMetrics) == \"array\" then {currentMetrics+: currentMetrics} else {currentMetrics+: [currentMetrics]},\n          currentMetricsType:: hidden.autoscaling.v2alpha1.metricStatus,\n          // currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.\n          currentReplicas(currentReplicas):: {currentReplicas: currentReplicas},\n          // desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.\n          desiredReplicas(desiredReplicas):: {desiredReplicas: desiredReplicas},\n          // observedGeneration is the most recent generation observed by this autoscaler.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          mixin:: {\n            // lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.\n            lastScaleTime:: {\n              local __lastScaleTimeMixin(lastScaleTime) = {lastScaleTime+: lastScaleTime},\n              mixinInstance(lastScaleTime):: __lastScaleTimeMixin(lastScaleTime),\n            },\n            lastScaleTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).\n        metricSpec:: {\n          new():: {},\n          // type is the type of metric source.  It should match one of the fields below.\n          type(type):: {type: type},\n          mixin:: {\n            // object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).\n            object:: {\n              local __objectMixin(object) = {object+: object},\n              mixinInstance(object):: __objectMixin(object),\n              // metricName is the name of the metric in question.\n              metricName(metricName):: __objectMixin({metricName: metricName}),\n              // target is the described Kubernetes object.\n              target:: {\n                local __targetMixin(target) = __objectMixin({target+: target}),\n                mixinInstance(target):: __targetMixin(target),\n                // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __targetMixin({name: name}),\n              },\n              targetType:: hidden.autoscaling.v2alpha1.crossVersionObjectReference,\n              // targetValue is the target value of the metric (as a quantity).\n              targetValue:: {\n                local __targetValueMixin(targetValue) = __objectMixin({targetValue+: targetValue}),\n                mixinInstance(targetValue):: __targetValueMixin(targetValue),\n              },\n              targetValueType:: hidden.core.resource.quantity,\n            },\n            objectType:: hidden.autoscaling.v2alpha1.objectMetricSource,\n            // pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.\n            pods:: {\n              local __podsMixin(pods) = {pods+: pods},\n              mixinInstance(pods):: __podsMixin(pods),\n              // metricName is the name of the metric in question\n              metricName(metricName):: __podsMixin({metricName: metricName}),\n              // targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)\n              targetAverageValue:: {\n                local __targetAverageValueMixin(targetAverageValue) = __podsMixin({targetAverageValue+: targetAverageValue}),\n                mixinInstance(targetAverageValue):: __targetAverageValueMixin(targetAverageValue),\n              },\n              targetAverageValueType:: hidden.core.resource.quantity,\n            },\n            podsType:: hidden.autoscaling.v2alpha1.podsMetricSource,\n            // resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n            resource:: {\n              local __resourceMixin(resource) = {resource+: resource},\n              mixinInstance(resource):: __resourceMixin(resource),\n              // name is the name of the resource in question.\n              name(name):: __resourceMixin({name: name}),\n              // targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n              targetAverageUtilization(targetAverageUtilization):: __resourceMixin({targetAverageUtilization: targetAverageUtilization}),\n              // targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.\n              targetAverageValue:: {\n                local __targetAverageValueMixin(targetAverageValue) = __resourceMixin({targetAverageValue+: targetAverageValue}),\n                mixinInstance(targetAverageValue):: __targetAverageValueMixin(targetAverageValue),\n              },\n              targetAverageValueType:: hidden.core.resource.quantity,\n            },\n            resourceType:: hidden.autoscaling.v2alpha1.resourceMetricSource,\n          },\n        },\n        // MetricStatus describes the last-read state of a single metric.\n        metricStatus:: {\n          new():: {},\n          // type is the type of metric source.  It will match one of the fields below.\n          type(type):: {type: type},\n          mixin:: {\n            // object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).\n            object:: {\n              local __objectMixin(object) = {object+: object},\n              mixinInstance(object):: __objectMixin(object),\n              // currentValue is the current value of the metric (as a quantity).\n              currentValue:: {\n                local __currentValueMixin(currentValue) = __objectMixin({currentValue+: currentValue}),\n                mixinInstance(currentValue):: __currentValueMixin(currentValue),\n              },\n              currentValueType:: hidden.core.resource.quantity,\n              // metricName is the name of the metric in question.\n              metricName(metricName):: __objectMixin({metricName: metricName}),\n              // target is the described Kubernetes object.\n              target:: {\n                local __targetMixin(target) = __objectMixin({target+: target}),\n                mixinInstance(target):: __targetMixin(target),\n                // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __targetMixin({name: name}),\n              },\n              targetType:: hidden.autoscaling.v2alpha1.crossVersionObjectReference,\n            },\n            objectType:: hidden.autoscaling.v2alpha1.objectMetricStatus,\n            // pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.\n            pods:: {\n              local __podsMixin(pods) = {pods+: pods},\n              mixinInstance(pods):: __podsMixin(pods),\n              // currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n              currentAverageValue:: {\n                local __currentAverageValueMixin(currentAverageValue) = __podsMixin({currentAverageValue+: currentAverageValue}),\n                mixinInstance(currentAverageValue):: __currentAverageValueMixin(currentAverageValue),\n              },\n              currentAverageValueType:: hidden.core.resource.quantity,\n              // metricName is the name of the metric in question\n              metricName(metricName):: __podsMixin({metricName: metricName}),\n            },\n            podsType:: hidden.autoscaling.v2alpha1.podsMetricStatus,\n            // resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n            resource:: {\n              local __resourceMixin(resource) = {resource+: resource},\n              mixinInstance(resource):: __resourceMixin(resource),\n              // currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.\n              currentAverageUtilization(currentAverageUtilization):: __resourceMixin({currentAverageUtilization: currentAverageUtilization}),\n              // currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.\n              currentAverageValue:: {\n                local __currentAverageValueMixin(currentAverageValue) = __resourceMixin({currentAverageValue+: currentAverageValue}),\n                mixinInstance(currentAverageValue):: __currentAverageValueMixin(currentAverageValue),\n              },\n              currentAverageValueType:: hidden.core.resource.quantity,\n              // name is the name of the resource in question.\n              name(name):: __resourceMixin({name: name}),\n            },\n            resourceType:: hidden.autoscaling.v2alpha1.resourceMetricStatus,\n          },\n        },\n        // ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).\n        objectMetricSource:: {\n          new():: {},\n          // metricName is the name of the metric in question.\n          metricName(metricName):: {metricName: metricName},\n          mixin:: {\n            // target is the described Kubernetes object.\n            target:: {\n              local __targetMixin(target) = {target+: target},\n              mixinInstance(target):: __targetMixin(target),\n              // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __targetMixin({name: name}),\n            },\n            targetType:: hidden.autoscaling.v2alpha1.crossVersionObjectReference,\n            // targetValue is the target value of the metric (as a quantity).\n            targetValue:: {\n              local __targetValueMixin(targetValue) = {targetValue+: targetValue},\n              mixinInstance(targetValue):: __targetValueMixin(targetValue),\n            },\n            targetValueType:: hidden.core.resource.quantity,\n          },\n        },\n        // ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).\n        objectMetricStatus:: {\n          new():: {},\n          // metricName is the name of the metric in question.\n          metricName(metricName):: {metricName: metricName},\n          mixin:: {\n            // currentValue is the current value of the metric (as a quantity).\n            currentValue:: {\n              local __currentValueMixin(currentValue) = {currentValue+: currentValue},\n              mixinInstance(currentValue):: __currentValueMixin(currentValue),\n            },\n            currentValueType:: hidden.core.resource.quantity,\n            // target is the described Kubernetes object.\n            target:: {\n              local __targetMixin(target) = {target+: target},\n              mixinInstance(target):: __targetMixin(target),\n              // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __targetMixin({name: name}),\n            },\n            targetType:: hidden.autoscaling.v2alpha1.crossVersionObjectReference,\n          },\n        },\n        // PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.\n        podsMetricSource:: {\n          new():: {},\n          // metricName is the name of the metric in question\n          metricName(metricName):: {metricName: metricName},\n          mixin:: {\n            // targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)\n            targetAverageValue:: {\n              local __targetAverageValueMixin(targetAverageValue) = {targetAverageValue+: targetAverageValue},\n              mixinInstance(targetAverageValue):: __targetAverageValueMixin(targetAverageValue),\n            },\n            targetAverageValueType:: hidden.core.resource.quantity,\n          },\n        },\n        // PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).\n        podsMetricStatus:: {\n          new():: {},\n          // metricName is the name of the metric in question\n          metricName(metricName):: {metricName: metricName},\n          mixin:: {\n            // currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)\n            currentAverageValue:: {\n              local __currentAverageValueMixin(currentAverageValue) = {currentAverageValue+: currentAverageValue},\n              mixinInstance(currentAverageValue):: __currentAverageValueMixin(currentAverageValue),\n            },\n            currentAverageValueType:: hidden.core.resource.quantity,\n          },\n        },\n        // ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.\n        resourceMetricSource:: {\n          new():: {},\n          // name is the name of the resource in question.\n          name(name):: {name: name},\n          // targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\n          targetAverageUtilization(targetAverageUtilization):: {targetAverageUtilization: targetAverageUtilization},\n          mixin:: {\n            // targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.\n            targetAverageValue:: {\n              local __targetAverageValueMixin(targetAverageValue) = {targetAverageValue+: targetAverageValue},\n              mixinInstance(targetAverageValue):: __targetAverageValueMixin(targetAverageValue),\n            },\n            targetAverageValueType:: hidden.core.resource.quantity,\n          },\n        },\n        // ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.\n        resourceMetricStatus:: {\n          new():: {},\n          // currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.\n          currentAverageUtilization(currentAverageUtilization):: {currentAverageUtilization: currentAverageUtilization},\n          // name is the name of the resource in question.\n          name(name):: {name: name},\n          mixin:: {\n            // currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.\n            currentAverageValue:: {\n              local __currentAverageValueMixin(currentAverageValue) = {currentAverageValue+: currentAverageValue},\n              mixinInstance(currentAverageValue):: __currentAverageValueMixin(currentAverageValue),\n            },\n            currentAverageValueType:: hidden.core.resource.quantity,\n          },\n        },\n      },\n    },\n    batch:: {\n      v1:: {\n        local apiVersion = {apiVersion: \"batch/v1\"},\n        // JobCondition describes current state of a job.\n        jobCondition:: {\n          new():: {},\n          // Human readable message indicating details about last transition.\n          message(message):: {message: message},\n          // (brief) reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Type of job condition, Complete or Failed.\n          type(type):: {type: type},\n          mixin:: {\n            // Last time the condition was checked.\n            lastProbeTime:: {\n              local __lastProbeTimeMixin(lastProbeTime) = {lastProbeTime+: lastProbeTime},\n              mixinInstance(lastProbeTime):: __lastProbeTimeMixin(lastProbeTime),\n            },\n            lastProbeTimeType:: hidden.meta.v1.time,\n            // Last time the condition transit from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // JobSpec describes how the job execution will look like.\n        jobSpec:: {\n          new():: {},\n          // Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer\n          activeDeadlineSeconds(activeDeadlineSeconds):: {activeDeadlineSeconds: activeDeadlineSeconds},\n          // Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n          completions(completions):: {completions: completions},\n          // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n          manualSelector(manualSelector):: {manualSelector: manualSelector},\n          // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n          parallelism(parallelism):: {parallelism: parallelism},\n          mixin:: {\n            // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n            template:: {\n              local __templateMixin(template) = {template+: template},\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n        },\n        // JobStatus represents the current state of a Job.\n        jobStatus:: {\n          new():: {},\n          // The number of actively running pods.\n          active(active):: {active: active},\n          // The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.batch.v1.jobCondition,\n          // The number of pods which reached phase Failed.\n          failed(failed):: {failed: failed},\n          // The number of pods which reached phase Succeeded.\n          succeeded(succeeded):: {succeeded: succeeded},\n          mixin:: {\n            // Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.\n            completionTime:: {\n              local __completionTimeMixin(completionTime) = {completionTime+: completionTime},\n              mixinInstance(completionTime):: __completionTimeMixin(completionTime),\n            },\n            completionTimeType:: hidden.meta.v1.time,\n            // Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.\n            startTime:: {\n              local __startTimeMixin(startTime) = {startTime+: startTime},\n              mixinInstance(startTime):: __startTimeMixin(startTime),\n            },\n            startTimeType:: hidden.meta.v1.time,\n          },\n        },\n      },\n      v2alpha1:: {\n        local apiVersion = {apiVersion: \"batch/v2alpha1\"},\n        // CronJobSpec describes how the job execution will look like and when it will actually run.\n        cronJobSpec:: {\n          new():: {},\n          // Specifies how to treat concurrent executions of a Job. Defaults to Allow.\n          concurrencyPolicy(concurrencyPolicy):: {concurrencyPolicy: concurrencyPolicy},\n          // The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.\n          failedJobsHistoryLimit(failedJobsHistoryLimit):: {failedJobsHistoryLimit: failedJobsHistoryLimit},\n          // The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.\n          schedule(schedule):: {schedule: schedule},\n          // Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.\n          startingDeadlineSeconds(startingDeadlineSeconds):: {startingDeadlineSeconds: startingDeadlineSeconds},\n          // The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.\n          successfulJobsHistoryLimit(successfulJobsHistoryLimit):: {successfulJobsHistoryLimit: successfulJobsHistoryLimit},\n          // This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.\n          suspend(suspend):: {suspend: suspend},\n          mixin:: {\n            // Specifies the job that will be created when executing a CronJob.\n            jobTemplate:: {\n              local __jobTemplateMixin(jobTemplate) = {jobTemplate+: jobTemplate},\n              mixinInstance(jobTemplate):: __jobTemplateMixin(jobTemplate),\n              // Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __jobTemplateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __jobTemplateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n                completions(completions):: __specMixin({completions: completions}),\n                // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n                manualSelector(manualSelector):: __specMixin({manualSelector: manualSelector}),\n                // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n                parallelism(parallelism):: __specMixin({parallelism: parallelism}),\n                // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n                selector:: {\n                  local __selectorMixin(selector) = __specMixin({selector+: selector}),\n                  mixinInstance(selector):: __selectorMixin(selector),\n                  // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n                  matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n                  matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n                  // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n                  matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n                },\n                selectorType:: hidden.meta.v1.labelSelector,\n                // Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n                template:: {\n                  local __templateMixin(template) = __specMixin({template+: template}),\n                  mixinInstance(template):: __templateMixin(template),\n                  // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n                  metadata:: {\n                    local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                    mixinInstance(metadata):: __metadataMixin(metadata),\n                    // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                    annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                    // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                    clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                    // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                    deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                    // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                    finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                    // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                    //\n                    // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                    //\n                    // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                    generateName(generateName):: __metadataMixin({generateName: generateName}),\n                    // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                    //\n                    // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                    initializers:: {\n                      local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                      mixinInstance(initializers):: __initializersMixin(initializers),\n                      // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                      pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                      pendingType:: hidden.meta.v1.initializer,\n                      // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                      result:: {\n                        local __resultMixin(result) = __initializersMixin({result+: result}),\n                        mixinInstance(result):: __resultMixin(result),\n                        // Suggested HTTP return code for this status, 0 if not set.\n                        code(code):: __resultMixin({code: code}),\n                        // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                        details:: {\n                          local __detailsMixin(details) = __resultMixin({details+: details}),\n                          mixinInstance(details):: __detailsMixin(details),\n                          // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                          causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                          causesType:: hidden.meta.v1.statusCause,\n                          // The group attribute of the resource associated with the status StatusReason.\n                          group(group):: __detailsMixin({group: group}),\n                          // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                          name(name):: __detailsMixin({name: name}),\n                          // If specified, the time in seconds before the operation should be retried.\n                          retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                          // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                          uid(uid):: __detailsMixin({uid: uid}),\n                        },\n                        detailsType:: hidden.meta.v1.statusDetails,\n                        // A human-readable description of the status of this operation.\n                        message(message):: __resultMixin({message: message}),\n                        // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                        reason(reason):: __resultMixin({reason: reason}),\n                      },\n                      resultType:: hidden.meta.v1.status,\n                    },\n                    initializersType:: hidden.meta.v1.initializers,\n                    // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                    labels(labels):: __metadataMixin({labels+: labels}),\n                    // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                    name(name):: __metadataMixin({name: name}),\n                    // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                    //\n                    // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                    namespace(namespace):: __metadataMixin({namespace: namespace}),\n                  },\n                  metadataType:: hidden.meta.v1.objectMeta,\n                  // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n                  spec:: {\n                    local __specMixin(spec) = __templateMixin({spec+: spec}),\n                    mixinInstance(spec):: __specMixin(spec),\n                    // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                    activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                    // If specified, the pod's scheduling constraints\n                    affinity:: {\n                      local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                      mixinInstance(affinity):: __affinityMixin(affinity),\n                      // Describes node affinity scheduling rules for the pod.\n                      nodeAffinity:: {\n                        local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                        mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                        // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                        preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                        preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                        // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                        requiredDuringSchedulingIgnoredDuringExecution:: {\n                          local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                          mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                          // Required. A list of node selector terms. The terms are ORed.\n                          nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                          nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                        },\n                        requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                      },\n                      nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                      // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                      podAffinity:: {\n                        local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                        mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                        // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                        preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                        preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                        // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                        requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                        requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                      },\n                      podAffinityType:: hidden.core.v1.podAffinity,\n                      // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                      podAntiAffinity:: {\n                        local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                        mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                        // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                        preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                        preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                        // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                        requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                        requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                      },\n                      podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                    },\n                    affinityType:: hidden.core.v1.affinity,\n                    // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                    automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                    // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                    containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                    containersType:: hidden.core.v1.container,\n                    // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                    dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                    // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                    hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                    hostAliasesType:: hidden.core.v1.hostAlias,\n                    // Use the host's ipc namespace. Optional: Default to false.\n                    hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                    // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                    hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                    // Use the host's pid namespace. Optional: Default to false.\n                    hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                    // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                    hostname(hostname):: __specMixin({hostname: hostname}),\n                    // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                    imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                    imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                    // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                    initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                    initContainersType:: hidden.core.v1.container,\n                    // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                    nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                    // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                    nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                    // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                    restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                    // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                    schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                    // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                    securityContext:: {\n                      local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                      mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                      // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                      //\n                      // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                      //\n                      // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                      fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                      // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                      runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                      // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                      runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                      // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                      seLinuxOptions:: {\n                        local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                        mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                        // Level is SELinux level label that applies to the container.\n                        level(level):: __seLinuxOptionsMixin({level: level}),\n                        // Role is a SELinux role label that applies to the container.\n                        role(role):: __seLinuxOptionsMixin({role: role}),\n                        // Type is a SELinux type label that applies to the container.\n                        type(type):: __seLinuxOptionsMixin({type: type}),\n                        // User is a SELinux user label that applies to the container.\n                        user(user):: __seLinuxOptionsMixin({user: user}),\n                      },\n                      seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                      // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                      supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                    },\n                    securityContextType:: hidden.core.v1.podSecurityContext,\n                    // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                    serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                    // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                    serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                    // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                    subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                    // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                    terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                    // If specified, the pod's tolerations.\n                    tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                    tolerationsType:: hidden.core.v1.toleration,\n                    // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                    volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                    volumesType:: hidden.core.v1.volume,\n                  },\n                  specType:: hidden.core.v1.podSpec,\n                },\n                templateType:: hidden.core.v1.podTemplateSpec,\n              },\n              specType:: hidden.batch.v1.jobSpec,\n            },\n            jobTemplateType:: hidden.batch.v2alpha1.jobTemplateSpec,\n          },\n        },\n        // CronJobStatus represents the current state of a cron job.\n        cronJobStatus:: {\n          new():: {},\n          // A list of pointers to currently running jobs.\n          active(active):: if std.type(active) == \"array\" then {active+: active} else {active+: [active]},\n          activeType:: hidden.core.v1.objectReference,\n          mixin:: {\n            // Information when was the last time the job was successfully scheduled.\n            lastScheduleTime:: {\n              local __lastScheduleTimeMixin(lastScheduleTime) = {lastScheduleTime+: lastScheduleTime},\n              mixinInstance(lastScheduleTime):: __lastScheduleTimeMixin(lastScheduleTime),\n            },\n            lastScheduleTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // JobTemplateSpec describes the data a Job should have when created from a template\n        jobTemplateSpec:: {\n          new():: {},\n          mixin:: {\n            // Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n            metadata:: {\n              local __metadataMixin(metadata) = {metadata+: metadata},\n              mixinInstance(metadata):: __metadataMixin(metadata),\n              // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n              annotations(annotations):: __metadataMixin({annotations+: annotations}),\n              // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n              clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n              // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n              deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n              // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n              finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n              // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n              //\n              // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n              //\n              // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n              generateName(generateName):: __metadataMixin({generateName: generateName}),\n              // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n              //\n              // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n              initializers:: {\n                local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                mixinInstance(initializers):: __initializersMixin(initializers),\n                // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                pendingType:: hidden.meta.v1.initializer,\n                // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                result:: {\n                  local __resultMixin(result) = __initializersMixin({result+: result}),\n                  mixinInstance(result):: __resultMixin(result),\n                  // Suggested HTTP return code for this status, 0 if not set.\n                  code(code):: __resultMixin({code: code}),\n                  // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                  details:: {\n                    local __detailsMixin(details) = __resultMixin({details+: details}),\n                    mixinInstance(details):: __detailsMixin(details),\n                    // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                    causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                    causesType:: hidden.meta.v1.statusCause,\n                    // The group attribute of the resource associated with the status StatusReason.\n                    group(group):: __detailsMixin({group: group}),\n                    // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                    name(name):: __detailsMixin({name: name}),\n                    // If specified, the time in seconds before the operation should be retried.\n                    retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                    // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                    uid(uid):: __detailsMixin({uid: uid}),\n                  },\n                  detailsType:: hidden.meta.v1.statusDetails,\n                  // A human-readable description of the status of this operation.\n                  message(message):: __resultMixin({message: message}),\n                  // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                  reason(reason):: __resultMixin({reason: reason}),\n                },\n                resultType:: hidden.meta.v1.status,\n              },\n              initializersType:: hidden.meta.v1.initializers,\n              // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n              labels(labels):: __metadataMixin({labels+: labels}),\n              // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __metadataMixin({name: name}),\n              // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n              //\n              // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n              namespace(namespace):: __metadataMixin({namespace: namespace}),\n            },\n            metadataType:: hidden.meta.v1.objectMeta,\n            // Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n            spec:: {\n              local __specMixin(spec) = {spec+: spec},\n              mixinInstance(spec):: __specMixin(spec),\n              // Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer\n              activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n              // Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n              completions(completions):: __specMixin({completions: completions}),\n              // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\n              manualSelector(manualSelector):: __specMixin({manualSelector: manualSelector}),\n              // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n              parallelism(parallelism):: __specMixin({parallelism: parallelism}),\n              // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n              selector:: {\n                local __selectorMixin(selector) = __specMixin({selector+: selector}),\n                mixinInstance(selector):: __selectorMixin(selector),\n                // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n                matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n                matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n                // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n                matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n              },\n              selectorType:: hidden.meta.v1.labelSelector,\n              // Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n              template:: {\n                local __templateMixin(template) = __specMixin({template+: template}),\n                mixinInstance(template):: __templateMixin(template),\n                // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n                metadata:: {\n                  local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                  mixinInstance(metadata):: __metadataMixin(metadata),\n                  // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                  annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                  // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                  clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                  // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                  deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                  // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                  finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                  // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                  //\n                  // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                  //\n                  // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                  generateName(generateName):: __metadataMixin({generateName: generateName}),\n                  // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                  //\n                  // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                  initializers:: {\n                    local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                    mixinInstance(initializers):: __initializersMixin(initializers),\n                    // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                    pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                    pendingType:: hidden.meta.v1.initializer,\n                    // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                    result:: {\n                      local __resultMixin(result) = __initializersMixin({result+: result}),\n                      mixinInstance(result):: __resultMixin(result),\n                      // Suggested HTTP return code for this status, 0 if not set.\n                      code(code):: __resultMixin({code: code}),\n                      // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                      details:: {\n                        local __detailsMixin(details) = __resultMixin({details+: details}),\n                        mixinInstance(details):: __detailsMixin(details),\n                        // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                        causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                        causesType:: hidden.meta.v1.statusCause,\n                        // The group attribute of the resource associated with the status StatusReason.\n                        group(group):: __detailsMixin({group: group}),\n                        // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                        name(name):: __detailsMixin({name: name}),\n                        // If specified, the time in seconds before the operation should be retried.\n                        retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                        // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                        uid(uid):: __detailsMixin({uid: uid}),\n                      },\n                      detailsType:: hidden.meta.v1.statusDetails,\n                      // A human-readable description of the status of this operation.\n                      message(message):: __resultMixin({message: message}),\n                      // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                      reason(reason):: __resultMixin({reason: reason}),\n                    },\n                    resultType:: hidden.meta.v1.status,\n                  },\n                  initializersType:: hidden.meta.v1.initializers,\n                  // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                  labels(labels):: __metadataMixin({labels+: labels}),\n                  // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                  name(name):: __metadataMixin({name: name}),\n                  // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                  //\n                  // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                  namespace(namespace):: __metadataMixin({namespace: namespace}),\n                },\n                metadataType:: hidden.meta.v1.objectMeta,\n                // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n                spec:: {\n                  local __specMixin(spec) = __templateMixin({spec+: spec}),\n                  mixinInstance(spec):: __specMixin(spec),\n                  // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                  activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                  // If specified, the pod's scheduling constraints\n                  affinity:: {\n                    local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                    mixinInstance(affinity):: __affinityMixin(affinity),\n                    // Describes node affinity scheduling rules for the pod.\n                    nodeAffinity:: {\n                      local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                      mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                      // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                      preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                      preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                      // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                      requiredDuringSchedulingIgnoredDuringExecution:: {\n                        local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                        mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                        // Required. A list of node selector terms. The terms are ORed.\n                        nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                        nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                      },\n                      requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                    },\n                    nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                    // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                    podAffinity:: {\n                      local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                      mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                      // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                      preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                      preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                      // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                      requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                      requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                    },\n                    podAffinityType:: hidden.core.v1.podAffinity,\n                    // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                    podAntiAffinity:: {\n                      local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                      mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                      // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                      preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                      preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                      // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                      requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                      requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                    },\n                    podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                  },\n                  affinityType:: hidden.core.v1.affinity,\n                  // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                  automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                  // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                  containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                  containersType:: hidden.core.v1.container,\n                  // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                  dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                  // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                  hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                  hostAliasesType:: hidden.core.v1.hostAlias,\n                  // Use the host's ipc namespace. Optional: Default to false.\n                  hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                  // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                  hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                  // Use the host's pid namespace. Optional: Default to false.\n                  hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                  // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                  hostname(hostname):: __specMixin({hostname: hostname}),\n                  // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                  imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                  imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                  // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                  initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                  initContainersType:: hidden.core.v1.container,\n                  // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                  nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                  // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                  nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                  // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                  restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                  // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                  schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                  // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                  securityContext:: {\n                    local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                    mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                    // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                    //\n                    // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                    //\n                    // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                    fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                    // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                    runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                    // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                    runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                    // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                    seLinuxOptions:: {\n                      local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                      mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                      // Level is SELinux level label that applies to the container.\n                      level(level):: __seLinuxOptionsMixin({level: level}),\n                      // Role is a SELinux role label that applies to the container.\n                      role(role):: __seLinuxOptionsMixin({role: role}),\n                      // Type is a SELinux type label that applies to the container.\n                      type(type):: __seLinuxOptionsMixin({type: type}),\n                      // User is a SELinux user label that applies to the container.\n                      user(user):: __seLinuxOptionsMixin({user: user}),\n                    },\n                    seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                    // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                    supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                  },\n                  securityContextType:: hidden.core.v1.podSecurityContext,\n                  // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                  serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                  // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                  serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                  // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                  subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                  // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                  terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                  // If specified, the pod's tolerations.\n                  tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                  tolerationsType:: hidden.core.v1.toleration,\n                  // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                  volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                  volumesType:: hidden.core.v1.volume,\n                },\n                specType:: hidden.core.v1.podSpec,\n              },\n              templateType:: hidden.core.v1.podTemplateSpec,\n            },\n            specType:: hidden.batch.v1.jobSpec,\n          },\n        },\n      },\n    },\n    certificates:: {\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"certificates/v1beta1\"},\n        //\n        certificateSigningRequestCondition:: {\n          new():: {},\n          // human readable message with details about the request state\n          message(message):: {message: message},\n          // brief reason for the request state\n          reason(reason):: {reason: reason},\n          // request approval state, currently Approved or Denied.\n          type(type):: {type: type},\n          mixin:: {\n            // timestamp for the last update to this condition\n            lastUpdateTime:: {\n              local __lastUpdateTimeMixin(lastUpdateTime) = {lastUpdateTime+: lastUpdateTime},\n              mixinInstance(lastUpdateTime):: __lastUpdateTimeMixin(lastUpdateTime),\n            },\n            lastUpdateTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.\n        certificateSigningRequestSpec:: {\n          new():: {},\n          // Extra information about the requesting user. See user.Info interface for details.\n          extra(extra):: {extra+: extra},\n          // Group information about the requesting user. See user.Info interface for details.\n          groups(groups):: if std.type(groups) == \"array\" then {groups+: groups} else {groups+: [groups]},\n          // Base64-encoded PKCS#10 CSR data\n          request(request):: {request: request},\n          // UID information about the requesting user. See user.Info interface for details.\n          uid(uid):: {uid: uid},\n          // allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3\n          //      https://tools.ietf.org/html/rfc5280#section-4.2.1.12\n          usages(usages):: if std.type(usages) == \"array\" then {usages+: usages} else {usages+: [usages]},\n          // Information about the requesting user. See user.Info interface for details.\n          username(username):: {username: username},\n          mixin:: {\n          },\n        },\n        //\n        certificateSigningRequestStatus:: {\n          new():: {},\n          // If request was approved, the controller will place the issued certificate here.\n          certificate(certificate):: {certificate: certificate},\n          // Conditions applied to the request, such as approval or denial.\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.certificates.v1beta1.certificateSigningRequestCondition,\n          mixin:: {\n          },\n        },\n      },\n    },\n    core:: {\n      intstr:: {\n        local apiVersion = {apiVersion: \"intstr\"},\n        //\n        intOrString:: {\n          new():: {},\n          mixin:: {\n          },\n        },\n      },\n      resource:: {\n        local apiVersion = {apiVersion: \"resource\"},\n        //\n        quantity:: {\n          new():: {},\n          mixin:: {\n          },\n        },\n      },\n      v1:: {\n        local apiVersion = {apiVersion: \"v1\"},\n        // Represents a Persistent Disk resource in AWS.\n        //\n        // An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.\n        awsElasticBlockStoreVolumeSource:: {\n          new():: {},\n          // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n          fsType(fsType):: {fsType: fsType},\n          // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n          partition(partition):: {partition: partition},\n          // Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n          readOnly(readOnly):: {readOnly: readOnly},\n          // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n          volumeId(volumeId):: {volumeID: volumeId},\n          mixin:: {\n          },\n        },\n        // Affinity is a group of affinity scheduling rules.\n        affinity:: {\n          new():: {},\n          mixin:: {\n            // Describes node affinity scheduling rules for the pod.\n            nodeAffinity:: {\n              local __nodeAffinityMixin(nodeAffinity) = {nodeAffinity+: nodeAffinity},\n              mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n              // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n              preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n              preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n              // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n              requiredDuringSchedulingIgnoredDuringExecution:: {\n                local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                // Required. A list of node selector terms. The terms are ORed.\n                nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n              },\n              requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n            },\n            nodeAffinityType:: hidden.core.v1.nodeAffinity,\n            // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n            podAffinity:: {\n              local __podAffinityMixin(podAffinity) = {podAffinity+: podAffinity},\n              mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n              // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n              preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n              preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n              // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n              requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n              requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n            },\n            podAffinityType:: hidden.core.v1.podAffinity,\n            // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n            podAntiAffinity:: {\n              local __podAntiAffinityMixin(podAntiAffinity) = {podAntiAffinity+: podAntiAffinity},\n              mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n              // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n              preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n              preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n              // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n              requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n              requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n            },\n            podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n          },\n        },\n        // AttachedVolume describes a volume attached to a node\n        attachedVolume:: {\n          new():: {},\n          // DevicePath represents the device path where the volume should be available\n          devicePath(devicePath):: {devicePath: devicePath},\n          // Name of the attached volume\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n        azureDiskVolumeSource:: {\n          new():: {},\n          // Host Caching mode: None, Read Only, Read Write.\n          cachingMode(cachingMode):: {cachingMode: cachingMode},\n          // The Name of the data disk in the blob storage\n          diskName(diskName):: {diskName: diskName},\n          // The URI the data disk in the blob storage\n          diskUri(diskUri):: {diskURI: diskUri},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          mixin:: {\n          },\n        },\n        // AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n        azureFileVolumeSource:: {\n          new():: {},\n          // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // the name of secret that contains Azure Storage Account Name and Key\n          secretName(secretName):: {secretName: secretName},\n          // Share Name\n          shareName(shareName):: {shareName: shareName},\n          mixin:: {\n          },\n        },\n        // Adds and removes POSIX capabilities from running containers.\n        capabilities:: {\n          new():: {},\n          // Added capabilities\n          add(add):: if std.type(add) == \"array\" then {add+: add} else {add+: [add]},\n          // Removed capabilities\n          drop(drop):: if std.type(drop) == \"array\" then {drop+: drop} else {drop+: [drop]},\n          mixin:: {\n          },\n        },\n        // Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.\n        cephFsVolumeSource:: {\n          new():: {},\n          // Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n          monitors(monitors):: if std.type(monitors) == \"array\" then {monitors+: monitors} else {monitors+: [monitors]},\n          // Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n          path(path):: {path: path},\n          // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n          readOnly(readOnly):: {readOnly: readOnly},\n          // Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n          secretFile(secretFile):: {secretFile: secretFile},\n          // Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n          user(user):: {user: user},\n          mixin:: {\n            // Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n            },\n            secretRefType:: hidden.core.v1.localObjectReference,\n          },\n        },\n        // Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.\n        cinderVolumeSource:: {\n          new():: {},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n          fsType(fsType):: {fsType: fsType},\n          // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n          readOnly(readOnly):: {readOnly: readOnly},\n          // volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n          volumeId(volumeId):: {volumeID: volumeId},\n          mixin:: {\n          },\n        },\n        // Information about the condition of a component.\n        componentCondition:: {\n          new():: {},\n          // Message about the condition for a component. For example, information about a health check.\n          message(message):: {message: message},\n          // Type of condition for a component. Valid value: \"Healthy\"\n          type(type):: {type: type},\n          mixin:: {\n          },\n        },\n        // ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n        //\n        // The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\n        configMapEnvSource:: {\n          new():: {},\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Specify whether the ConfigMap must be defined\n          optional(optional):: {optional: optional},\n          mixin:: {\n          },\n        },\n        // Selects a key from a ConfigMap.\n        configMapKeySelector:: {\n          new():: {},\n          // The key to select.\n          key(key):: {key: key},\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Specify whether the ConfigMap or it's key must be defined\n          optional(optional):: {optional: optional},\n          mixin:: {\n          },\n        },\n        // Adapts a ConfigMap into a projected volume.\n        //\n        // The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.\n        configMapProjection:: {\n          new():: {},\n          // If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n          items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n          itemsType:: hidden.core.v1.keyToPath,\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Specify whether the ConfigMap or it's keys must be defined\n          optional(optional):: {optional: optional},\n          mixin:: {\n          },\n        },\n        // Adapts a ConfigMap into a volume.\n        //\n        // The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.\n        configMapVolumeSource:: {\n          new():: {},\n          // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n          defaultMode(defaultMode):: {defaultMode: defaultMode},\n          // If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n          items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n          itemsType:: hidden.core.v1.keyToPath,\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Specify whether the ConfigMap or it's keys must be defined\n          optional(optional):: {optional: optional},\n          mixin:: {\n          },\n        },\n        // A single application container that you want to run within a pod.\n        container:: {\n          new(name, image):: {} + self.name(name) + self.image(image),\n          // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n          args(args):: if std.type(args) == \"array\" then {args+: args} else {args+: [args]},\n          // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n          command(command):: if std.type(command) == \"array\" then {command+: command} else {command+: [command]},\n          // List of environment variables to set in the container. Cannot be updated.\n          env(env):: if std.type(env) == \"array\" then {env+: env} else {env+: [env]},\n          // List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n          envFrom(envFrom):: if std.type(envFrom) == \"array\" then {envFrom+: envFrom} else {envFrom+: [envFrom]},\n          envFromType:: hidden.core.v1.envFromSource,\n          envType:: hidden.core.v1.envVar,\n          // Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images\n          image(image):: {image: image},\n          // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n          imagePullPolicy(imagePullPolicy):: {imagePullPolicy: imagePullPolicy},\n          // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\n          name(name):: {name: name},\n          // List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n          ports(ports):: if std.type(ports) == \"array\" then {ports+: ports} else {ports+: [ports]},\n          portsType:: hidden.core.v1.containerPort,\n          // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.\n          stdin(stdin):: {stdin: stdin},\n          // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false\n          stdinOnce(stdinOnce):: {stdinOnce: stdinOnce},\n          // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.\n          terminationMessagePath(terminationMessagePath):: {terminationMessagePath: terminationMessagePath},\n          // Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n          terminationMessagePolicy(terminationMessagePolicy):: {terminationMessagePolicy: terminationMessagePolicy},\n          // Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.\n          tty(tty):: {tty: tty},\n          // Pod volumes to mount into the container's filesystem. Cannot be updated.\n          volumeMounts(volumeMounts):: if std.type(volumeMounts) == \"array\" then {volumeMounts+: volumeMounts} else {volumeMounts+: [volumeMounts]},\n          volumeMountsType:: hidden.core.v1.volumeMount,\n          // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n          workingDir(workingDir):: {workingDir: workingDir},\n          mixin:: {\n            // Actions that the management system should take in response to container lifecycle events. Cannot be updated.\n            lifecycle:: {\n              local __lifecycleMixin(lifecycle) = {lifecycle+: lifecycle},\n              mixinInstance(lifecycle):: __lifecycleMixin(lifecycle),\n              // PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n              postStart:: {\n                local __postStartMixin(postStart) = __lifecycleMixin({postStart+: postStart}),\n                mixinInstance(postStart):: __postStartMixin(postStart),\n                // One and only one of the following should be specified. Exec specifies the action to take.\n                exec:: {\n                  local __execMixin(exec) = __postStartMixin({exec+: exec}),\n                  mixinInstance(exec):: __execMixin(exec),\n                  // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n                  command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n                },\n                execType:: hidden.core.v1.execAction,\n                // HTTPGet specifies the http request to perform.\n                httpGet:: {\n                  local __httpGetMixin(httpGet) = __postStartMixin({httpGet+: httpGet}),\n                  mixinInstance(httpGet):: __httpGetMixin(httpGet),\n                  // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n                  host(host):: __httpGetMixin({host: host}),\n                  // Custom headers to set in the request. HTTP allows repeated headers.\n                  httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n                  httpHeadersType:: hidden.core.v1.httpHeader,\n                  // Path to access on the HTTP server.\n                  path(path):: __httpGetMixin({path: path}),\n                  // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                  port(port):: __httpGetMixin({port: port}),\n                  // Scheme to use for connecting to the host. Defaults to HTTP.\n                  scheme(scheme):: __httpGetMixin({scheme: scheme}),\n                },\n                httpGetType:: hidden.core.v1.httpGetAction,\n                // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n                tcpSocket:: {\n                  local __tcpSocketMixin(tcpSocket) = __postStartMixin({tcpSocket+: tcpSocket}),\n                  mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n                  // Optional: Host name to connect to, defaults to the pod IP.\n                  host(host):: __tcpSocketMixin({host: host}),\n                  // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                  port(port):: __tcpSocketMixin({port: port}),\n                },\n                tcpSocketType:: hidden.core.v1.tcpSocketAction,\n              },\n              postStartType:: hidden.core.v1.handler,\n              // PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n              preStop:: {\n                local __preStopMixin(preStop) = __lifecycleMixin({preStop+: preStop}),\n                mixinInstance(preStop):: __preStopMixin(preStop),\n                // One and only one of the following should be specified. Exec specifies the action to take.\n                exec:: {\n                  local __execMixin(exec) = __preStopMixin({exec+: exec}),\n                  mixinInstance(exec):: __execMixin(exec),\n                  // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n                  command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n                },\n                execType:: hidden.core.v1.execAction,\n                // HTTPGet specifies the http request to perform.\n                httpGet:: {\n                  local __httpGetMixin(httpGet) = __preStopMixin({httpGet+: httpGet}),\n                  mixinInstance(httpGet):: __httpGetMixin(httpGet),\n                  // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n                  host(host):: __httpGetMixin({host: host}),\n                  // Custom headers to set in the request. HTTP allows repeated headers.\n                  httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n                  httpHeadersType:: hidden.core.v1.httpHeader,\n                  // Path to access on the HTTP server.\n                  path(path):: __httpGetMixin({path: path}),\n                  // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                  port(port):: __httpGetMixin({port: port}),\n                  // Scheme to use for connecting to the host. Defaults to HTTP.\n                  scheme(scheme):: __httpGetMixin({scheme: scheme}),\n                },\n                httpGetType:: hidden.core.v1.httpGetAction,\n                // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n                tcpSocket:: {\n                  local __tcpSocketMixin(tcpSocket) = __preStopMixin({tcpSocket+: tcpSocket}),\n                  mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n                  // Optional: Host name to connect to, defaults to the pod IP.\n                  host(host):: __tcpSocketMixin({host: host}),\n                  // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                  port(port):: __tcpSocketMixin({port: port}),\n                },\n                tcpSocketType:: hidden.core.v1.tcpSocketAction,\n              },\n              preStopType:: hidden.core.v1.handler,\n            },\n            lifecycleType:: hidden.core.v1.lifecycle,\n            // Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n            livenessProbe:: {\n              local __livenessProbeMixin(livenessProbe) = {livenessProbe+: livenessProbe},\n              mixinInstance(livenessProbe):: __livenessProbeMixin(livenessProbe),\n              // One and only one of the following should be specified. Exec specifies the action to take.\n              exec:: {\n                local __execMixin(exec) = __livenessProbeMixin({exec+: exec}),\n                mixinInstance(exec):: __execMixin(exec),\n                // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n                command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n              },\n              execType:: hidden.core.v1.execAction,\n              // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.\n              failureThreshold(failureThreshold):: __livenessProbeMixin({failureThreshold: failureThreshold}),\n              // HTTPGet specifies the http request to perform.\n              httpGet:: {\n                local __httpGetMixin(httpGet) = __livenessProbeMixin({httpGet+: httpGet}),\n                mixinInstance(httpGet):: __httpGetMixin(httpGet),\n                // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n                host(host):: __httpGetMixin({host: host}),\n                // Custom headers to set in the request. HTTP allows repeated headers.\n                httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n                httpHeadersType:: hidden.core.v1.httpHeader,\n                // Path to access on the HTTP server.\n                path(path):: __httpGetMixin({path: path}),\n                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __httpGetMixin({port: port}),\n                // Scheme to use for connecting to the host. Defaults to HTTP.\n                scheme(scheme):: __httpGetMixin({scheme: scheme}),\n              },\n              httpGetType:: hidden.core.v1.httpGetAction,\n              // Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n              initialDelaySeconds(initialDelaySeconds):: __livenessProbeMixin({initialDelaySeconds: initialDelaySeconds}),\n              // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.\n              periodSeconds(periodSeconds):: __livenessProbeMixin({periodSeconds: periodSeconds}),\n              // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.\n              successThreshold(successThreshold):: __livenessProbeMixin({successThreshold: successThreshold}),\n              // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n              tcpSocket:: {\n                local __tcpSocketMixin(tcpSocket) = __livenessProbeMixin({tcpSocket+: tcpSocket}),\n                mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n                // Optional: Host name to connect to, defaults to the pod IP.\n                host(host):: __tcpSocketMixin({host: host}),\n                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __tcpSocketMixin({port: port}),\n              },\n              tcpSocketType:: hidden.core.v1.tcpSocketAction,\n              // Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n              timeoutSeconds(timeoutSeconds):: __livenessProbeMixin({timeoutSeconds: timeoutSeconds}),\n            },\n            livenessProbeType:: hidden.core.v1.probe,\n            // Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n            readinessProbe:: {\n              local __readinessProbeMixin(readinessProbe) = {readinessProbe+: readinessProbe},\n              mixinInstance(readinessProbe):: __readinessProbeMixin(readinessProbe),\n              // One and only one of the following should be specified. Exec specifies the action to take.\n              exec:: {\n                local __execMixin(exec) = __readinessProbeMixin({exec+: exec}),\n                mixinInstance(exec):: __execMixin(exec),\n                // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n                command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n              },\n              execType:: hidden.core.v1.execAction,\n              // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.\n              failureThreshold(failureThreshold):: __readinessProbeMixin({failureThreshold: failureThreshold}),\n              // HTTPGet specifies the http request to perform.\n              httpGet:: {\n                local __httpGetMixin(httpGet) = __readinessProbeMixin({httpGet+: httpGet}),\n                mixinInstance(httpGet):: __httpGetMixin(httpGet),\n                // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n                host(host):: __httpGetMixin({host: host}),\n                // Custom headers to set in the request. HTTP allows repeated headers.\n                httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n                httpHeadersType:: hidden.core.v1.httpHeader,\n                // Path to access on the HTTP server.\n                path(path):: __httpGetMixin({path: path}),\n                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __httpGetMixin({port: port}),\n                // Scheme to use for connecting to the host. Defaults to HTTP.\n                scheme(scheme):: __httpGetMixin({scheme: scheme}),\n              },\n              httpGetType:: hidden.core.v1.httpGetAction,\n              // Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n              initialDelaySeconds(initialDelaySeconds):: __readinessProbeMixin({initialDelaySeconds: initialDelaySeconds}),\n              // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.\n              periodSeconds(periodSeconds):: __readinessProbeMixin({periodSeconds: periodSeconds}),\n              // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.\n              successThreshold(successThreshold):: __readinessProbeMixin({successThreshold: successThreshold}),\n              // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n              tcpSocket:: {\n                local __tcpSocketMixin(tcpSocket) = __readinessProbeMixin({tcpSocket+: tcpSocket}),\n                mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n                // Optional: Host name to connect to, defaults to the pod IP.\n                host(host):: __tcpSocketMixin({host: host}),\n                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __tcpSocketMixin({port: port}),\n              },\n              tcpSocketType:: hidden.core.v1.tcpSocketAction,\n              // Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n              timeoutSeconds(timeoutSeconds):: __readinessProbeMixin({timeoutSeconds: timeoutSeconds}),\n            },\n            readinessProbeType:: hidden.core.v1.probe,\n            // Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n            resources:: {\n              local __resourcesMixin(resources) = {resources+: resources},\n              mixinInstance(resources):: __resourcesMixin(resources),\n              // Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n              limits(limits):: __resourcesMixin({limits+: limits}),\n              // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n              requests(requests):: __resourcesMixin({requests+: requests}),\n            },\n            resourcesType:: hidden.core.v1.resourceRequirements,\n            // Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md\n            securityContext:: {\n              local __securityContextMixin(securityContext) = {securityContext+: securityContext},\n              mixinInstance(securityContext):: __securityContextMixin(securityContext),\n              // The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n              capabilities:: {\n                local __capabilitiesMixin(capabilities) = __securityContextMixin({capabilities+: capabilities}),\n                mixinInstance(capabilities):: __capabilitiesMixin(capabilities),\n                // Added capabilities\n                add(add):: if std.type(add) == \"array\" then __capabilitiesMixin({add+: add}) else __capabilitiesMixin({add+: [add]}),\n                // Removed capabilities\n                drop(drop):: if std.type(drop) == \"array\" then __capabilitiesMixin({drop+: drop}) else __capabilitiesMixin({drop+: [drop]}),\n              },\n              capabilitiesType:: hidden.core.v1.capabilities,\n              // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\n              privileged(privileged):: __securityContextMixin({privileged: privileged}),\n              // Whether this container has a read-only root filesystem. Default is false.\n              readOnlyRootFilesystem(readOnlyRootFilesystem):: __securityContextMixin({readOnlyRootFilesystem: readOnlyRootFilesystem}),\n              // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n              runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n              // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n              runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n              // The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n              seLinuxOptions:: {\n                local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                // Level is SELinux level label that applies to the container.\n                level(level):: __seLinuxOptionsMixin({level: level}),\n                // Role is a SELinux role label that applies to the container.\n                role(role):: __seLinuxOptionsMixin({role: role}),\n                // Type is a SELinux type label that applies to the container.\n                type(type):: __seLinuxOptionsMixin({type: type}),\n                // User is a SELinux user label that applies to the container.\n                user(user):: __seLinuxOptionsMixin({user: user}),\n              },\n              seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n            },\n            securityContextType:: hidden.core.v1.securityContext,\n          },\n        },\n        // Describe a container image\n        containerImage:: {\n          new():: {},\n          // Names by which this image is known. e.g. [\"gcr.io/google_containers/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]\n          names(names):: if std.type(names) == \"array\" then {names+: names} else {names+: [names]},\n          // The size of the image in bytes.\n          sizeBytes(sizeBytes):: {sizeBytes: sizeBytes},\n          mixin:: {\n          },\n        },\n        // ContainerPort represents a network port in a single container.\n        containerPort:: {\n          new(containerPort):: {} + self.containerPort(containerPort),\n          newNamed(name, containerPort):: {} + self.name(name) + self.containerPort(containerPort),\n          // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.\n          containerPort(containerPort):: {containerPort: containerPort},\n          // What host IP to bind the external port to.\n          hostIp(hostIp):: {hostIP: hostIp},\n          // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n          hostPort(hostPort):: {hostPort: hostPort},\n          // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.\n          name(name):: {name: name},\n          // Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".\n          protocol(protocol):: {protocol: protocol},\n          mixin:: {\n          },\n        },\n        // ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.\n        containerState:: {\n          new():: {},\n          mixin:: {\n            // Details about a running container\n            running:: {\n              local __runningMixin(running) = {running+: running},\n              mixinInstance(running):: __runningMixin(running),\n              // Time at which the container was last (re-)started\n              startedAt:: {\n                local __startedAtMixin(startedAt) = __runningMixin({startedAt+: startedAt}),\n                mixinInstance(startedAt):: __startedAtMixin(startedAt),\n              },\n              startedAtType:: hidden.meta.v1.time,\n            },\n            runningType:: hidden.core.v1.containerStateRunning,\n            // Details about a terminated container\n            terminated:: {\n              local __terminatedMixin(terminated) = {terminated+: terminated},\n              mixinInstance(terminated):: __terminatedMixin(terminated),\n              // Container's ID in the format 'docker://<container_id>'\n              containerId(containerId):: __terminatedMixin({containerID: containerId}),\n              // Exit status from the last termination of the container\n              exitCode(exitCode):: __terminatedMixin({exitCode: exitCode}),\n              // Time at which the container last terminated\n              finishedAt:: {\n                local __finishedAtMixin(finishedAt) = __terminatedMixin({finishedAt+: finishedAt}),\n                mixinInstance(finishedAt):: __finishedAtMixin(finishedAt),\n              },\n              finishedAtType:: hidden.meta.v1.time,\n              // Message regarding the last termination of the container\n              message(message):: __terminatedMixin({message: message}),\n              // (brief) reason from the last termination of the container\n              reason(reason):: __terminatedMixin({reason: reason}),\n              // Signal from the last termination of the container\n              signal(signal):: __terminatedMixin({signal: signal}),\n              // Time at which previous execution of the container started\n              startedAt:: {\n                local __startedAtMixin(startedAt) = __terminatedMixin({startedAt+: startedAt}),\n                mixinInstance(startedAt):: __startedAtMixin(startedAt),\n              },\n              startedAtType:: hidden.meta.v1.time,\n            },\n            terminatedType:: hidden.core.v1.containerStateTerminated,\n            // Details about a waiting container\n            waiting:: {\n              local __waitingMixin(waiting) = {waiting+: waiting},\n              mixinInstance(waiting):: __waitingMixin(waiting),\n              // Message regarding why the container is not yet running.\n              message(message):: __waitingMixin({message: message}),\n              // (brief) reason the container is not yet running.\n              reason(reason):: __waitingMixin({reason: reason}),\n            },\n            waitingType:: hidden.core.v1.containerStateWaiting,\n          },\n        },\n        // ContainerStateRunning is a running state of a container.\n        containerStateRunning:: {\n          new():: {},\n          mixin:: {\n            // Time at which the container was last (re-)started\n            startedAt:: {\n              local __startedAtMixin(startedAt) = {startedAt+: startedAt},\n              mixinInstance(startedAt):: __startedAtMixin(startedAt),\n            },\n            startedAtType:: hidden.meta.v1.time,\n          },\n        },\n        // ContainerStateTerminated is a terminated state of a container.\n        containerStateTerminated:: {\n          new():: {},\n          // Container's ID in the format 'docker://<container_id>'\n          containerId(containerId):: {containerID: containerId},\n          // Exit status from the last termination of the container\n          exitCode(exitCode):: {exitCode: exitCode},\n          // Message regarding the last termination of the container\n          message(message):: {message: message},\n          // (brief) reason from the last termination of the container\n          reason(reason):: {reason: reason},\n          // Signal from the last termination of the container\n          signal(signal):: {signal: signal},\n          mixin:: {\n            // Time at which the container last terminated\n            finishedAt:: {\n              local __finishedAtMixin(finishedAt) = {finishedAt+: finishedAt},\n              mixinInstance(finishedAt):: __finishedAtMixin(finishedAt),\n            },\n            finishedAtType:: hidden.meta.v1.time,\n            // Time at which previous execution of the container started\n            startedAt:: {\n              local __startedAtMixin(startedAt) = {startedAt+: startedAt},\n              mixinInstance(startedAt):: __startedAtMixin(startedAt),\n            },\n            startedAtType:: hidden.meta.v1.time,\n          },\n        },\n        // ContainerStateWaiting is a waiting state of a container.\n        containerStateWaiting:: {\n          new():: {},\n          // Message regarding why the container is not yet running.\n          message(message):: {message: message},\n          // (brief) reason the container is not yet running.\n          reason(reason):: {reason: reason},\n          mixin:: {\n          },\n        },\n        // ContainerStatus contains details for the current status of this container.\n        containerStatus:: {\n          new():: {},\n          // Container's ID in the format 'docker://<container_id>'.\n          containerId(containerId):: {containerID: containerId},\n          // The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images\n          image(image):: {image: image},\n          // ImageID of the container's image.\n          imageId(imageId):: {imageID: imageId},\n          // This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.\n          name(name):: {name: name},\n          // Specifies whether the container has passed its readiness probe.\n          ready(ready):: {ready: ready},\n          // The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.\n          restartCount(restartCount):: {restartCount: restartCount},\n          mixin:: {\n            // Details about the container's last termination condition.\n            lastState:: {\n              local __lastStateMixin(lastState) = {lastState+: lastState},\n              mixinInstance(lastState):: __lastStateMixin(lastState),\n              // Details about a running container\n              running:: {\n                local __runningMixin(running) = __lastStateMixin({running+: running}),\n                mixinInstance(running):: __runningMixin(running),\n                // Time at which the container was last (re-)started\n                startedAt:: {\n                  local __startedAtMixin(startedAt) = __runningMixin({startedAt+: startedAt}),\n                  mixinInstance(startedAt):: __startedAtMixin(startedAt),\n                },\n                startedAtType:: hidden.meta.v1.time,\n              },\n              runningType:: hidden.core.v1.containerStateRunning,\n              // Details about a terminated container\n              terminated:: {\n                local __terminatedMixin(terminated) = __lastStateMixin({terminated+: terminated}),\n                mixinInstance(terminated):: __terminatedMixin(terminated),\n                // Container's ID in the format 'docker://<container_id>'\n                containerId(containerId):: __terminatedMixin({containerID: containerId}),\n                // Exit status from the last termination of the container\n                exitCode(exitCode):: __terminatedMixin({exitCode: exitCode}),\n                // Time at which the container last terminated\n                finishedAt:: {\n                  local __finishedAtMixin(finishedAt) = __terminatedMixin({finishedAt+: finishedAt}),\n                  mixinInstance(finishedAt):: __finishedAtMixin(finishedAt),\n                },\n                finishedAtType:: hidden.meta.v1.time,\n                // Message regarding the last termination of the container\n                message(message):: __terminatedMixin({message: message}),\n                // (brief) reason from the last termination of the container\n                reason(reason):: __terminatedMixin({reason: reason}),\n                // Signal from the last termination of the container\n                signal(signal):: __terminatedMixin({signal: signal}),\n                // Time at which previous execution of the container started\n                startedAt:: {\n                  local __startedAtMixin(startedAt) = __terminatedMixin({startedAt+: startedAt}),\n                  mixinInstance(startedAt):: __startedAtMixin(startedAt),\n                },\n                startedAtType:: hidden.meta.v1.time,\n              },\n              terminatedType:: hidden.core.v1.containerStateTerminated,\n              // Details about a waiting container\n              waiting:: {\n                local __waitingMixin(waiting) = __lastStateMixin({waiting+: waiting}),\n                mixinInstance(waiting):: __waitingMixin(waiting),\n                // Message regarding why the container is not yet running.\n                message(message):: __waitingMixin({message: message}),\n                // (brief) reason the container is not yet running.\n                reason(reason):: __waitingMixin({reason: reason}),\n              },\n              waitingType:: hidden.core.v1.containerStateWaiting,\n            },\n            lastStateType:: hidden.core.v1.containerState,\n            // Details about the container's current condition.\n            state:: {\n              local __stateMixin(state) = {state+: state},\n              mixinInstance(state):: __stateMixin(state),\n              // Details about a running container\n              running:: {\n                local __runningMixin(running) = __stateMixin({running+: running}),\n                mixinInstance(running):: __runningMixin(running),\n                // Time at which the container was last (re-)started\n                startedAt:: {\n                  local __startedAtMixin(startedAt) = __runningMixin({startedAt+: startedAt}),\n                  mixinInstance(startedAt):: __startedAtMixin(startedAt),\n                },\n                startedAtType:: hidden.meta.v1.time,\n              },\n              runningType:: hidden.core.v1.containerStateRunning,\n              // Details about a terminated container\n              terminated:: {\n                local __terminatedMixin(terminated) = __stateMixin({terminated+: terminated}),\n                mixinInstance(terminated):: __terminatedMixin(terminated),\n                // Container's ID in the format 'docker://<container_id>'\n                containerId(containerId):: __terminatedMixin({containerID: containerId}),\n                // Exit status from the last termination of the container\n                exitCode(exitCode):: __terminatedMixin({exitCode: exitCode}),\n                // Time at which the container last terminated\n                finishedAt:: {\n                  local __finishedAtMixin(finishedAt) = __terminatedMixin({finishedAt+: finishedAt}),\n                  mixinInstance(finishedAt):: __finishedAtMixin(finishedAt),\n                },\n                finishedAtType:: hidden.meta.v1.time,\n                // Message regarding the last termination of the container\n                message(message):: __terminatedMixin({message: message}),\n                // (brief) reason from the last termination of the container\n                reason(reason):: __terminatedMixin({reason: reason}),\n                // Signal from the last termination of the container\n                signal(signal):: __terminatedMixin({signal: signal}),\n                // Time at which previous execution of the container started\n                startedAt:: {\n                  local __startedAtMixin(startedAt) = __terminatedMixin({startedAt+: startedAt}),\n                  mixinInstance(startedAt):: __startedAtMixin(startedAt),\n                },\n                startedAtType:: hidden.meta.v1.time,\n              },\n              terminatedType:: hidden.core.v1.containerStateTerminated,\n              // Details about a waiting container\n              waiting:: {\n                local __waitingMixin(waiting) = __stateMixin({waiting+: waiting}),\n                mixinInstance(waiting):: __waitingMixin(waiting),\n                // Message regarding why the container is not yet running.\n                message(message):: __waitingMixin({message: message}),\n                // (brief) reason the container is not yet running.\n                reason(reason):: __waitingMixin({reason: reason}),\n              },\n              waitingType:: hidden.core.v1.containerStateWaiting,\n            },\n            stateType:: hidden.core.v1.containerState,\n          },\n        },\n        // DaemonEndpoint contains information about a single Daemon endpoint.\n        daemonEndpoint:: {\n          new():: {},\n          // Port number of the given endpoint.\n          port(port):: {Port: port},\n          mixin:: {\n          },\n        },\n        // Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.\n        downwardApiProjection:: {\n          new():: {},\n          // Items is a list of DownwardAPIVolume file\n          items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n          itemsType:: hidden.core.v1.downwardApiVolumeFile,\n          mixin:: {\n          },\n        },\n        // DownwardAPIVolumeFile represents information to create the file containing the pod field\n        downwardApiVolumeFile:: {\n          new():: {},\n          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n          mode(mode):: {mode: mode},\n          // Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n          path(path):: {path: path},\n          mixin:: {\n            // Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n            fieldRef:: {\n              local __fieldRefMixin(fieldRef) = {fieldRef+: fieldRef},\n              mixinInstance(fieldRef):: __fieldRefMixin(fieldRef),\n              // Path of the field to select in the specified API version.\n              fieldPath(fieldPath):: __fieldRefMixin({fieldPath: fieldPath}),\n            },\n            fieldRefType:: hidden.core.v1.objectFieldSelector,\n            // Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n            resourceFieldRef:: {\n              local __resourceFieldRefMixin(resourceFieldRef) = {resourceFieldRef+: resourceFieldRef},\n              mixinInstance(resourceFieldRef):: __resourceFieldRefMixin(resourceFieldRef),\n              // Container name: required for volumes, optional for env vars\n              containerName(containerName):: __resourceFieldRefMixin({containerName: containerName}),\n              // Specifies the output format of the exposed resources, defaults to \"1\"\n              divisor:: {\n                local __divisorMixin(divisor) = __resourceFieldRefMixin({divisor+: divisor}),\n                mixinInstance(divisor):: __divisorMixin(divisor),\n              },\n              divisorType:: hidden.core.resource.quantity,\n              // Required: resource to select\n              resource(resource):: __resourceFieldRefMixin({resource: resource}),\n            },\n            resourceFieldRefType:: hidden.core.v1.resourceFieldSelector,\n          },\n        },\n        // DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.\n        downwardApiVolumeSource:: {\n          new():: {},\n          // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n          defaultMode(defaultMode):: {defaultMode: defaultMode},\n          // Items is a list of downward API volume file\n          items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n          itemsType:: hidden.core.v1.downwardApiVolumeFile,\n          mixin:: {\n          },\n        },\n        // Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.\n        emptyDirVolumeSource:: {\n          new():: {},\n          // What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n          medium(medium):: {medium: medium},\n          mixin:: {\n            // Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir\n            sizeLimit:: {\n              local __sizeLimitMixin(sizeLimit) = {sizeLimit+: sizeLimit},\n              mixinInstance(sizeLimit):: __sizeLimitMixin(sizeLimit),\n            },\n            sizeLimitType:: hidden.core.resource.quantity,\n          },\n        },\n        // EndpointAddress is a tuple that describes single IP address.\n        endpointAddress:: {\n          new():: {},\n          // The Hostname of this endpoint\n          hostname(hostname):: {hostname: hostname},\n          // The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.\n          ip(ip):: {ip: ip},\n          // Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.\n          nodeName(nodeName):: {nodeName: nodeName},\n          mixin:: {\n            // Reference to object providing the endpoint.\n            targetRef:: {\n              local __targetRefMixin(targetRef) = {targetRef+: targetRef},\n              mixinInstance(targetRef):: __targetRefMixin(targetRef),\n              // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n              fieldPath(fieldPath):: __targetRefMixin({fieldPath: fieldPath}),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __targetRefMixin({name: name}),\n              // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n              namespace(namespace):: __targetRefMixin({namespace: namespace}),\n              // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n              resourceVersion(resourceVersion):: __targetRefMixin({resourceVersion: resourceVersion}),\n              // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n              uid(uid):: __targetRefMixin({uid: uid}),\n            },\n            targetRefType:: hidden.core.v1.objectReference,\n          },\n        },\n        // EndpointPort is a tuple that describes a single port.\n        endpointPort:: {\n          new():: {},\n          // The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.\n          name(name):: {name: name},\n          // The port number of the endpoint.\n          port(port):: {port: port},\n          // The IP protocol for this port. Must be UDP or TCP. Default is TCP.\n          protocol(protocol):: {protocol: protocol},\n          mixin:: {\n          },\n        },\n        // EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n        //   {\n        //     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n        //     Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n        //   }\n        // The resulting set of endpoints can be viewed as:\n        //     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n        //     b: [ 10.10.1.1:309, 10.10.2.2:309 ]\n        endpointSubset:: {\n          new():: {},\n          // IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.\n          addresses(addresses):: if std.type(addresses) == \"array\" then {addresses+: addresses} else {addresses+: [addresses]},\n          addressesType:: hidden.core.v1.endpointAddress,\n          // IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.\n          notReadyAddresses(notReadyAddresses):: if std.type(notReadyAddresses) == \"array\" then {notReadyAddresses+: notReadyAddresses} else {notReadyAddresses+: [notReadyAddresses]},\n          notReadyAddressesType:: hidden.core.v1.endpointAddress,\n          // Port numbers available on the related IP addresses.\n          ports(ports):: if std.type(ports) == \"array\" then {ports+: ports} else {ports+: [ports]},\n          portsType:: hidden.core.v1.endpointPort,\n          mixin:: {\n          },\n        },\n        // EnvFromSource represents the source of a set of ConfigMaps\n        envFromSource:: {\n          new():: {},\n          // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n          prefix(prefix):: {prefix: prefix},\n          mixin:: {\n            // The ConfigMap to select from\n            configMapRef:: {\n              local __configMapRefMixin(configMapRef) = {configMapRef+: configMapRef},\n              mixinInstance(configMapRef):: __configMapRefMixin(configMapRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __configMapRefMixin({name: name}),\n              // Specify whether the ConfigMap must be defined\n              optional(optional):: __configMapRefMixin({optional: optional}),\n            },\n            configMapRefType:: hidden.core.v1.configMapEnvSource,\n            // The Secret to select from\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n              // Specify whether the Secret must be defined\n              optional(optional):: __secretRefMixin({optional: optional}),\n            },\n            secretRefType:: hidden.core.v1.secretEnvSource,\n          },\n        },\n        // EnvVar represents an environment variable present in a Container.\n        envVar:: {\n          new(name, value):: {} + self.name(name) + self.value(value),\n          fromSecretRef(name, secretRefName, secretRefKey):: {} + self.name(name) + self.mixin.valueFrom.secretKeyRef.name(secretRefName) + self.mixin.valueFrom.secretKeyRef.key(secretRefKey),\n          fromFieldPath(name, fieldPath):: {} + self.name(name) + self.mixin.valueFrom.fieldRef.fieldPath(fieldPath),\n          // Name of the environment variable. Must be a C_IDENTIFIER.\n          name(name):: {name: name},\n          // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n          value(value):: {value: value},\n          mixin:: {\n            // Source for the environment variable's value. Cannot be used if value is not empty.\n            valueFrom:: {\n              local __valueFromMixin(valueFrom) = {valueFrom+: valueFrom},\n              mixinInstance(valueFrom):: __valueFromMixin(valueFrom),\n              // Selects a key of a ConfigMap.\n              configMapKeyRef:: {\n                local __configMapKeyRefMixin(configMapKeyRef) = __valueFromMixin({configMapKeyRef+: configMapKeyRef}),\n                mixinInstance(configMapKeyRef):: __configMapKeyRefMixin(configMapKeyRef),\n                // The key to select.\n                key(key):: __configMapKeyRefMixin({key: key}),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __configMapKeyRefMixin({name: name}),\n                // Specify whether the ConfigMap or it's key must be defined\n                optional(optional):: __configMapKeyRefMixin({optional: optional}),\n              },\n              configMapKeyRefType:: hidden.core.v1.configMapKeySelector,\n              // Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.\n              fieldRef:: {\n                local __fieldRefMixin(fieldRef) = __valueFromMixin({fieldRef+: fieldRef}),\n                mixinInstance(fieldRef):: __fieldRefMixin(fieldRef),\n                // Path of the field to select in the specified API version.\n                fieldPath(fieldPath):: __fieldRefMixin({fieldPath: fieldPath}),\n              },\n              fieldRefType:: hidden.core.v1.objectFieldSelector,\n              // Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n              resourceFieldRef:: {\n                local __resourceFieldRefMixin(resourceFieldRef) = __valueFromMixin({resourceFieldRef+: resourceFieldRef}),\n                mixinInstance(resourceFieldRef):: __resourceFieldRefMixin(resourceFieldRef),\n                // Container name: required for volumes, optional for env vars\n                containerName(containerName):: __resourceFieldRefMixin({containerName: containerName}),\n                // Specifies the output format of the exposed resources, defaults to \"1\"\n                divisor:: {\n                  local __divisorMixin(divisor) = __resourceFieldRefMixin({divisor+: divisor}),\n                  mixinInstance(divisor):: __divisorMixin(divisor),\n                },\n                divisorType:: hidden.core.resource.quantity,\n                // Required: resource to select\n                resource(resource):: __resourceFieldRefMixin({resource: resource}),\n              },\n              resourceFieldRefType:: hidden.core.v1.resourceFieldSelector,\n              // Selects a key of a secret in the pod's namespace\n              secretKeyRef:: {\n                local __secretKeyRefMixin(secretKeyRef) = __valueFromMixin({secretKeyRef+: secretKeyRef}),\n                mixinInstance(secretKeyRef):: __secretKeyRefMixin(secretKeyRef),\n                // The key of the secret to select from.  Must be a valid secret key.\n                key(key):: __secretKeyRefMixin({key: key}),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretKeyRefMixin({name: name}),\n                // Specify whether the Secret or it's key must be defined\n                optional(optional):: __secretKeyRefMixin({optional: optional}),\n              },\n              secretKeyRefType:: hidden.core.v1.secretKeySelector,\n            },\n            valueFromType:: hidden.core.v1.envVarSource,\n          },\n        },\n        // EnvVarSource represents a source for the value of an EnvVar.\n        envVarSource:: {\n          new():: {},\n          mixin:: {\n            // Selects a key of a ConfigMap.\n            configMapKeyRef:: {\n              local __configMapKeyRefMixin(configMapKeyRef) = {configMapKeyRef+: configMapKeyRef},\n              mixinInstance(configMapKeyRef):: __configMapKeyRefMixin(configMapKeyRef),\n              // The key to select.\n              key(key):: __configMapKeyRefMixin({key: key}),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __configMapKeyRefMixin({name: name}),\n              // Specify whether the ConfigMap or it's key must be defined\n              optional(optional):: __configMapKeyRefMixin({optional: optional}),\n            },\n            configMapKeyRefType:: hidden.core.v1.configMapKeySelector,\n            // Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.\n            fieldRef:: {\n              local __fieldRefMixin(fieldRef) = {fieldRef+: fieldRef},\n              mixinInstance(fieldRef):: __fieldRefMixin(fieldRef),\n              // Path of the field to select in the specified API version.\n              fieldPath(fieldPath):: __fieldRefMixin({fieldPath: fieldPath}),\n            },\n            fieldRefType:: hidden.core.v1.objectFieldSelector,\n            // Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n            resourceFieldRef:: {\n              local __resourceFieldRefMixin(resourceFieldRef) = {resourceFieldRef+: resourceFieldRef},\n              mixinInstance(resourceFieldRef):: __resourceFieldRefMixin(resourceFieldRef),\n              // Container name: required for volumes, optional for env vars\n              containerName(containerName):: __resourceFieldRefMixin({containerName: containerName}),\n              // Specifies the output format of the exposed resources, defaults to \"1\"\n              divisor:: {\n                local __divisorMixin(divisor) = __resourceFieldRefMixin({divisor+: divisor}),\n                mixinInstance(divisor):: __divisorMixin(divisor),\n              },\n              divisorType:: hidden.core.resource.quantity,\n              // Required: resource to select\n              resource(resource):: __resourceFieldRefMixin({resource: resource}),\n            },\n            resourceFieldRefType:: hidden.core.v1.resourceFieldSelector,\n            // Selects a key of a secret in the pod's namespace\n            secretKeyRef:: {\n              local __secretKeyRefMixin(secretKeyRef) = {secretKeyRef+: secretKeyRef},\n              mixinInstance(secretKeyRef):: __secretKeyRefMixin(secretKeyRef),\n              // The key of the secret to select from.  Must be a valid secret key.\n              key(key):: __secretKeyRefMixin({key: key}),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretKeyRefMixin({name: name}),\n              // Specify whether the Secret or it's key must be defined\n              optional(optional):: __secretKeyRefMixin({optional: optional}),\n            },\n            secretKeyRefType:: hidden.core.v1.secretKeySelector,\n          },\n        },\n        // EventSource contains information for an event.\n        eventSource:: {\n          new():: {},\n          // Component from which the event is generated.\n          component(component):: {component: component},\n          // Node name on which the event is generated.\n          host(host):: {host: host},\n          mixin:: {\n          },\n        },\n        // ExecAction describes a \"run in container\" action.\n        execAction:: {\n          new():: {},\n          // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n          command(command):: if std.type(command) == \"array\" then {command+: command} else {command+: [command]},\n          mixin:: {\n          },\n        },\n        // Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.\n        fcVolumeSource:: {\n          new():: {},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // Required: FC target lun number\n          lun(lun):: {lun: lun},\n          // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // Required: FC target worldwide names (WWNs)\n          targetWwns(targetWwns):: if std.type(targetWwns) == \"array\" then {targetWWNs+: targetWwns} else {targetWWNs+: [targetWwns]},\n          mixin:: {\n          },\n        },\n        // FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n        flexVolumeSource:: {\n          new():: {},\n          // Driver is the name of the driver to use for this volume.\n          driver(driver):: {driver: driver},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n          fsType(fsType):: {fsType: fsType},\n          // Optional: Extra command options if any.\n          options(options):: {options+: options},\n          // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          mixin:: {\n            // Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n            },\n            secretRefType:: hidden.core.v1.localObjectReference,\n          },\n        },\n        // Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.\n        flockerVolumeSource:: {\n          new():: {},\n          // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated\n          datasetName(datasetName):: {datasetName: datasetName},\n          // UUID of the dataset. This is unique identifier of a Flocker dataset\n          datasetUuid(datasetUuid):: {datasetUUID: datasetUuid},\n          mixin:: {\n          },\n        },\n        // Represents a Persistent Disk resource in Google Compute Engine.\n        //\n        // A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.\n        gcePersistentDiskVolumeSource:: {\n          new():: {},\n          // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n          fsType(fsType):: {fsType: fsType},\n          // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n          partition(partition):: {partition: partition},\n          // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n          pdName(pdName):: {pdName: pdName},\n          // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n          readOnly(readOnly):: {readOnly: readOnly},\n          mixin:: {\n          },\n        },\n        // Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n        gitRepoVolumeSource:: {\n          new():: {},\n          // Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n          directory(directory):: {directory: directory},\n          // Repository URL\n          repository(repository):: {repository: repository},\n          // Commit hash for the specified revision.\n          revision(revision):: {revision: revision},\n          mixin:: {\n          },\n        },\n        // Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.\n        glusterfsVolumeSource:: {\n          new():: {},\n          // EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n          endpoints(endpoints):: {endpoints: endpoints},\n          // Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n          path(path):: {path: path},\n          // ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n          readOnly(readOnly):: {readOnly: readOnly},\n          mixin:: {\n          },\n        },\n        // HTTPGetAction describes an action based on HTTP Get requests.\n        httpGetAction:: {\n          new():: {},\n          // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n          host(host):: {host: host},\n          // Custom headers to set in the request. HTTP allows repeated headers.\n          httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then {httpHeaders+: httpHeaders} else {httpHeaders+: [httpHeaders]},\n          httpHeadersType:: hidden.core.v1.httpHeader,\n          // Path to access on the HTTP server.\n          path(path):: {path: path},\n          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n          port(port):: {port: port},\n          // Scheme to use for connecting to the host. Defaults to HTTP.\n          scheme(scheme):: {scheme: scheme},\n          mixin:: {\n          },\n        },\n        // HTTPHeader describes a custom header to be used in HTTP probes\n        httpHeader:: {\n          new():: {},\n          // The header field name\n          name(name):: {name: name},\n          // The header field value\n          value(value):: {value: value},\n          mixin:: {\n          },\n        },\n        // Handler defines a specific action that should be taken\n        handler:: {\n          new():: {},\n          mixin:: {\n            // One and only one of the following should be specified. Exec specifies the action to take.\n            exec:: {\n              local __execMixin(exec) = {exec+: exec},\n              mixinInstance(exec):: __execMixin(exec),\n              // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n              command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n            },\n            execType:: hidden.core.v1.execAction,\n            // HTTPGet specifies the http request to perform.\n            httpGet:: {\n              local __httpGetMixin(httpGet) = {httpGet+: httpGet},\n              mixinInstance(httpGet):: __httpGetMixin(httpGet),\n              // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n              host(host):: __httpGetMixin({host: host}),\n              // Custom headers to set in the request. HTTP allows repeated headers.\n              httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n              httpHeadersType:: hidden.core.v1.httpHeader,\n              // Path to access on the HTTP server.\n              path(path):: __httpGetMixin({path: path}),\n              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n              port(port):: __httpGetMixin({port: port}),\n              // Scheme to use for connecting to the host. Defaults to HTTP.\n              scheme(scheme):: __httpGetMixin({scheme: scheme}),\n            },\n            httpGetType:: hidden.core.v1.httpGetAction,\n            // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n            tcpSocket:: {\n              local __tcpSocketMixin(tcpSocket) = {tcpSocket+: tcpSocket},\n              mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n              // Optional: Host name to connect to, defaults to the pod IP.\n              host(host):: __tcpSocketMixin({host: host}),\n              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n              port(port):: __tcpSocketMixin({port: port}),\n            },\n            tcpSocketType:: hidden.core.v1.tcpSocketAction,\n          },\n        },\n        // HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.\n        hostAlias:: {\n          new():: {},\n          // Hostnames for the above IP address.\n          hostnames(hostnames):: if std.type(hostnames) == \"array\" then {hostnames+: hostnames} else {hostnames+: [hostnames]},\n          // IP address of the host file entry.\n          ip(ip):: {ip: ip},\n          mixin:: {\n          },\n        },\n        // Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.\n        hostPathVolumeSource:: {\n          new():: {},\n          // Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n          path(path):: {path: path},\n          mixin:: {\n          },\n        },\n        // Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.\n        iscsiVolumeSource:: {\n          new():: {},\n          // whether support iSCSI Discovery CHAP authentication\n          chapAuthDiscovery(chapAuthDiscovery):: {chapAuthDiscovery: chapAuthDiscovery},\n          // whether support iSCSI Session CHAP authentication\n          chapAuthSession(chapAuthSession):: {chapAuthSession: chapAuthSession},\n          // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n          fsType(fsType):: {fsType: fsType},\n          // Target iSCSI Qualified Name.\n          iqn(iqn):: {iqn: iqn},\n          // Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.\n          iscsiInterface(iscsiInterface):: {iscsiInterface: iscsiInterface},\n          // iSCSI target lun number.\n          lun(lun):: {lun: lun},\n          // iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n          portals(portals):: if std.type(portals) == \"array\" then {portals+: portals} else {portals+: [portals]},\n          // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n          targetPortal(targetPortal):: {targetPortal: targetPortal},\n          mixin:: {\n            // CHAP secret for iSCSI target and initiator authentication\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n            },\n            secretRefType:: hidden.core.v1.localObjectReference,\n          },\n        },\n        // Maps a string key to a path within a volume.\n        keyToPath:: {\n          new(key, path):: {} + self.key(key) + self.path(path),\n          // The key to project.\n          key(key):: {key: key},\n          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n          mode(mode):: {mode: mode},\n          // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n          path(path):: {path: path},\n          mixin:: {\n          },\n        },\n        // Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.\n        lifecycle:: {\n          new():: {},\n          mixin:: {\n            // PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n            postStart:: {\n              local __postStartMixin(postStart) = {postStart+: postStart},\n              mixinInstance(postStart):: __postStartMixin(postStart),\n              // One and only one of the following should be specified. Exec specifies the action to take.\n              exec:: {\n                local __execMixin(exec) = __postStartMixin({exec+: exec}),\n                mixinInstance(exec):: __execMixin(exec),\n                // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n                command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n              },\n              execType:: hidden.core.v1.execAction,\n              // HTTPGet specifies the http request to perform.\n              httpGet:: {\n                local __httpGetMixin(httpGet) = __postStartMixin({httpGet+: httpGet}),\n                mixinInstance(httpGet):: __httpGetMixin(httpGet),\n                // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n                host(host):: __httpGetMixin({host: host}),\n                // Custom headers to set in the request. HTTP allows repeated headers.\n                httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n                httpHeadersType:: hidden.core.v1.httpHeader,\n                // Path to access on the HTTP server.\n                path(path):: __httpGetMixin({path: path}),\n                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __httpGetMixin({port: port}),\n                // Scheme to use for connecting to the host. Defaults to HTTP.\n                scheme(scheme):: __httpGetMixin({scheme: scheme}),\n              },\n              httpGetType:: hidden.core.v1.httpGetAction,\n              // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n              tcpSocket:: {\n                local __tcpSocketMixin(tcpSocket) = __postStartMixin({tcpSocket+: tcpSocket}),\n                mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n                // Optional: Host name to connect to, defaults to the pod IP.\n                host(host):: __tcpSocketMixin({host: host}),\n                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __tcpSocketMixin({port: port}),\n              },\n              tcpSocketType:: hidden.core.v1.tcpSocketAction,\n            },\n            postStartType:: hidden.core.v1.handler,\n            // PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n            preStop:: {\n              local __preStopMixin(preStop) = {preStop+: preStop},\n              mixinInstance(preStop):: __preStopMixin(preStop),\n              // One and only one of the following should be specified. Exec specifies the action to take.\n              exec:: {\n                local __execMixin(exec) = __preStopMixin({exec+: exec}),\n                mixinInstance(exec):: __execMixin(exec),\n                // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n                command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n              },\n              execType:: hidden.core.v1.execAction,\n              // HTTPGet specifies the http request to perform.\n              httpGet:: {\n                local __httpGetMixin(httpGet) = __preStopMixin({httpGet+: httpGet}),\n                mixinInstance(httpGet):: __httpGetMixin(httpGet),\n                // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n                host(host):: __httpGetMixin({host: host}),\n                // Custom headers to set in the request. HTTP allows repeated headers.\n                httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n                httpHeadersType:: hidden.core.v1.httpHeader,\n                // Path to access on the HTTP server.\n                path(path):: __httpGetMixin({path: path}),\n                // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __httpGetMixin({port: port}),\n                // Scheme to use for connecting to the host. Defaults to HTTP.\n                scheme(scheme):: __httpGetMixin({scheme: scheme}),\n              },\n              httpGetType:: hidden.core.v1.httpGetAction,\n              // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n              tcpSocket:: {\n                local __tcpSocketMixin(tcpSocket) = __preStopMixin({tcpSocket+: tcpSocket}),\n                mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n                // Optional: Host name to connect to, defaults to the pod IP.\n                host(host):: __tcpSocketMixin({host: host}),\n                // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n                port(port):: __tcpSocketMixin({port: port}),\n              },\n              tcpSocketType:: hidden.core.v1.tcpSocketAction,\n            },\n            preStopType:: hidden.core.v1.handler,\n          },\n        },\n        // LimitRangeItem defines a min/max usage limit for any resource that matches on kind.\n        limitRangeItem:: {\n          new():: {},\n          // Default resource requirement limit value by resource name if resource limit is omitted.\n          default(default):: {default+: default},\n          // DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.\n          defaultRequest(defaultRequest):: {defaultRequest+: defaultRequest},\n          // Max usage constraints on this kind by resource name.\n          max(max):: {max+: max},\n          // MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.\n          maxLimitRequestRatio(maxLimitRequestRatio):: {maxLimitRequestRatio+: maxLimitRequestRatio},\n          // Min usage constraints on this kind by resource name.\n          min(min):: {min+: min},\n          // Type of resource that this limit applies to.\n          type(type):: {type: type},\n          mixin:: {\n          },\n        },\n        // LimitRangeSpec defines a min/max usage limit for resources that match on kind.\n        limitRangeSpec:: {\n          new():: {},\n          // Limits is the list of LimitRangeItem objects that are enforced.\n          limits(limits):: if std.type(limits) == \"array\" then {limits+: limits} else {limits+: [limits]},\n          limitsType:: hidden.core.v1.limitRangeItem,\n          mixin:: {\n          },\n        },\n        // LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.\n        loadBalancerIngress:: {\n          new():: {},\n          // Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)\n          hostname(hostname):: {hostname: hostname},\n          // IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)\n          ip(ip):: {ip: ip},\n          mixin:: {\n          },\n        },\n        // LoadBalancerStatus represents the status of a load-balancer.\n        loadBalancerStatus:: {\n          new():: {},\n          // Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.\n          ingress(ingress):: if std.type(ingress) == \"array\" then {ingress+: ingress} else {ingress+: [ingress]},\n          ingressType:: hidden.core.v1.loadBalancerIngress,\n          mixin:: {\n          },\n        },\n        // LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\n        localObjectReference:: {\n          new():: {},\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // Local represents directly-attached storage with node affinity\n        localVolumeSource:: {\n          new():: {},\n          // The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device\n          path(path):: {path: path},\n          mixin:: {\n          },\n        },\n        // Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.\n        nfsVolumeSource:: {\n          new():: {},\n          // Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n          path(path):: {path: path},\n          // ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n          readOnly(readOnly):: {readOnly: readOnly},\n          // Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n          server(server):: {server: server},\n          mixin:: {\n          },\n        },\n        // NamespaceSpec describes the attributes on a Namespace.\n        namespaceSpec:: {\n          new():: {},\n          // Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://git.k8s.io/community/contributors/design-proposals/namespaces.md#finalizers\n          finalizers(finalizers):: if std.type(finalizers) == \"array\" then {finalizers+: finalizers} else {finalizers+: [finalizers]},\n          mixin:: {\n          },\n        },\n        // NamespaceStatus is information about the current status of a Namespace.\n        namespaceStatus:: {\n          new():: {},\n          // Phase is the current lifecycle phase of the namespace. More info: https://git.k8s.io/community/contributors/design-proposals/namespaces.md#phases\n          phase(phase):: {phase: phase},\n          mixin:: {\n          },\n        },\n        // NodeAddress contains information for the node's address.\n        nodeAddress:: {\n          new():: {},\n          // The node address.\n          address(address):: {address: address},\n          // Node address type, one of Hostname, ExternalIP or InternalIP.\n          type(type):: {type: type},\n          mixin:: {\n          },\n        },\n        // Node affinity is a group of node affinity scheduling rules.\n        nodeAffinity:: {\n          new():: {},\n          // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n          preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then {preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution} else {preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]},\n          preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n          mixin:: {\n            // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n            requiredDuringSchedulingIgnoredDuringExecution:: {\n              local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = {requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution},\n              mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n              // Required. A list of node selector terms. The terms are ORed.\n              nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n              nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n            },\n            requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n          },\n        },\n        // NodeCondition contains condition information for a node.\n        nodeCondition:: {\n          new():: {},\n          // Human readable message indicating details about last transition.\n          message(message):: {message: message},\n          // (brief) reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Type of node condition.\n          type(type):: {type: type},\n          mixin:: {\n            // Last time we got an update on a given condition.\n            lastHeartbeatTime:: {\n              local __lastHeartbeatTimeMixin(lastHeartbeatTime) = {lastHeartbeatTime+: lastHeartbeatTime},\n              mixinInstance(lastHeartbeatTime):: __lastHeartbeatTimeMixin(lastHeartbeatTime),\n            },\n            lastHeartbeatTimeType:: hidden.meta.v1.time,\n            // Last time the condition transit from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // NodeDaemonEndpoints lists ports opened by daemons running on the Node.\n        nodeDaemonEndpoints:: {\n          new():: {},\n          mixin:: {\n            // Endpoint on which Kubelet is listening.\n            kubeletEndpoint:: {\n              local __kubeletEndpointMixin(kubeletEndpoint) = {kubeletEndpoint+: kubeletEndpoint},\n              mixinInstance(kubeletEndpoint):: __kubeletEndpointMixin(kubeletEndpoint),\n              // Port number of the given endpoint.\n              port(port):: __kubeletEndpointMixin({Port: port}),\n            },\n            kubeletEndpointType:: hidden.core.v1.daemonEndpoint,\n          },\n        },\n        // A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.\n        nodeSelector:: {\n          new():: {},\n          // Required. A list of node selector terms. The terms are ORed.\n          nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then {nodeSelectorTerms+: nodeSelectorTerms} else {nodeSelectorTerms+: [nodeSelectorTerms]},\n          nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n          mixin:: {\n          },\n        },\n        // A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\n        nodeSelectorRequirement:: {\n          new():: {},\n          // The label key that the selector applies to.\n          key(key):: {key: key},\n          // Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n          operator(operator):: {operator: operator},\n          // An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n          values(values):: if std.type(values) == \"array\" then {values+: values} else {values+: [values]},\n          mixin:: {\n          },\n        },\n        // A null or empty node selector term matches no objects.\n        nodeSelectorTerm:: {\n          new():: {},\n          // Required. A list of node selector requirements. The requirements are ANDed.\n          matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then {matchExpressions+: matchExpressions} else {matchExpressions+: [matchExpressions]},\n          matchExpressionsType:: hidden.core.v1.nodeSelectorRequirement,\n          mixin:: {\n          },\n        },\n        // NodeSpec describes the attributes that a node is created with.\n        nodeSpec:: {\n          new():: {},\n          // External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.\n          externalId(externalId):: {externalID: externalId},\n          // PodCIDR represents the pod IP range assigned to the node.\n          podCidr(podCidr):: {podCIDR: podCidr},\n          // ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>\n          providerId(providerId):: {providerID: providerId},\n          // If specified, the node's taints.\n          taints(taints):: if std.type(taints) == \"array\" then {taints+: taints} else {taints+: [taints]},\n          taintsType:: hidden.core.v1.taint,\n          // Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration\n          unschedulable(unschedulable):: {unschedulable: unschedulable},\n          mixin:: {\n          },\n        },\n        // NodeStatus is information about the current status of a node.\n        nodeStatus:: {\n          new():: {},\n          // List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses\n          addresses(addresses):: if std.type(addresses) == \"array\" then {addresses+: addresses} else {addresses+: [addresses]},\n          addressesType:: hidden.core.v1.nodeAddress,\n          // Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.\n          allocatable(allocatable):: {allocatable+: allocatable},\n          // Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n          capacity(capacity):: {capacity+: capacity},\n          // Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.core.v1.nodeCondition,\n          // List of container images on this node\n          images(images):: if std.type(images) == \"array\" then {images+: images} else {images+: [images]},\n          imagesType:: hidden.core.v1.containerImage,\n          // NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.\n          phase(phase):: {phase: phase},\n          // List of volumes that are attached to the node.\n          volumesAttached(volumesAttached):: if std.type(volumesAttached) == \"array\" then {volumesAttached+: volumesAttached} else {volumesAttached+: [volumesAttached]},\n          volumesAttachedType:: hidden.core.v1.attachedVolume,\n          // List of attachable volumes in use (mounted) by the node.\n          volumesInUse(volumesInUse):: if std.type(volumesInUse) == \"array\" then {volumesInUse+: volumesInUse} else {volumesInUse+: [volumesInUse]},\n          mixin:: {\n            // Endpoints of daemons running on the Node.\n            daemonEndpoints:: {\n              local __daemonEndpointsMixin(daemonEndpoints) = {daemonEndpoints+: daemonEndpoints},\n              mixinInstance(daemonEndpoints):: __daemonEndpointsMixin(daemonEndpoints),\n              // Endpoint on which Kubelet is listening.\n              kubeletEndpoint:: {\n                local __kubeletEndpointMixin(kubeletEndpoint) = __daemonEndpointsMixin({kubeletEndpoint+: kubeletEndpoint}),\n                mixinInstance(kubeletEndpoint):: __kubeletEndpointMixin(kubeletEndpoint),\n                // Port number of the given endpoint.\n                port(port):: __kubeletEndpointMixin({Port: port}),\n              },\n              kubeletEndpointType:: hidden.core.v1.daemonEndpoint,\n            },\n            daemonEndpointsType:: hidden.core.v1.nodeDaemonEndpoints,\n            // Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info\n            nodeInfo:: {\n              local __nodeInfoMixin(nodeInfo) = {nodeInfo+: nodeInfo},\n              mixinInstance(nodeInfo):: __nodeInfoMixin(nodeInfo),\n              // The Architecture reported by the node\n              architecture(architecture):: __nodeInfoMixin({architecture: architecture}),\n              // Boot ID reported by the node.\n              bootId(bootId):: __nodeInfoMixin({bootID: bootId}),\n              // ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).\n              containerRuntimeVersion(containerRuntimeVersion):: __nodeInfoMixin({containerRuntimeVersion: containerRuntimeVersion}),\n              // Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).\n              kernelVersion(kernelVersion):: __nodeInfoMixin({kernelVersion: kernelVersion}),\n              // KubeProxy Version reported by the node.\n              kubeProxyVersion(kubeProxyVersion):: __nodeInfoMixin({kubeProxyVersion: kubeProxyVersion}),\n              // Kubelet Version reported by the node.\n              kubeletVersion(kubeletVersion):: __nodeInfoMixin({kubeletVersion: kubeletVersion}),\n              // MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html\n              machineId(machineId):: __nodeInfoMixin({machineID: machineId}),\n              // The Operating System reported by the node\n              operatingSystem(operatingSystem):: __nodeInfoMixin({operatingSystem: operatingSystem}),\n              // OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).\n              osImage(osImage):: __nodeInfoMixin({osImage: osImage}),\n              // SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html\n              systemUuid(systemUuid):: __nodeInfoMixin({systemUUID: systemUuid}),\n            },\n            nodeInfoType:: hidden.core.v1.nodeSystemInfo,\n          },\n        },\n        // NodeSystemInfo is a set of ids/uuids to uniquely identify the node.\n        nodeSystemInfo:: {\n          new():: {},\n          // The Architecture reported by the node\n          architecture(architecture):: {architecture: architecture},\n          // Boot ID reported by the node.\n          bootId(bootId):: {bootID: bootId},\n          // ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).\n          containerRuntimeVersion(containerRuntimeVersion):: {containerRuntimeVersion: containerRuntimeVersion},\n          // Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).\n          kernelVersion(kernelVersion):: {kernelVersion: kernelVersion},\n          // KubeProxy Version reported by the node.\n          kubeProxyVersion(kubeProxyVersion):: {kubeProxyVersion: kubeProxyVersion},\n          // Kubelet Version reported by the node.\n          kubeletVersion(kubeletVersion):: {kubeletVersion: kubeletVersion},\n          // MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html\n          machineId(machineId):: {machineID: machineId},\n          // The Operating System reported by the node\n          operatingSystem(operatingSystem):: {operatingSystem: operatingSystem},\n          // OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).\n          osImage(osImage):: {osImage: osImage},\n          // SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html\n          systemUuid(systemUuid):: {systemUUID: systemUuid},\n          mixin:: {\n          },\n        },\n        // ObjectFieldSelector selects an APIVersioned field of an object.\n        objectFieldSelector:: {\n          new():: {},\n          // Path of the field to select in the specified API version.\n          fieldPath(fieldPath):: {fieldPath: fieldPath},\n          mixin:: {\n          },\n        },\n        // ObjectReference contains enough information to let you inspect or modify the referred object.\n        objectReference:: {\n          new():: {},\n          // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n          fieldPath(fieldPath):: {fieldPath: fieldPath},\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n          namespace(namespace):: {namespace: namespace},\n          // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n          resourceVersion(resourceVersion):: {resourceVersion: resourceVersion},\n          // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n          uid(uid):: {uid: uid},\n          mixin:: {\n          },\n        },\n        // PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes\n        persistentVolumeClaimSpec:: {\n          new():: {},\n          // AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n          accessModes(accessModes):: if std.type(accessModes) == \"array\" then {accessModes+: accessModes} else {accessModes+: [accessModes]},\n          // Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n          storageClassName(storageClassName):: {storageClassName: storageClassName},\n          // VolumeName is the binding reference to the PersistentVolume backing this claim.\n          volumeName(volumeName):: {volumeName: volumeName},\n          mixin:: {\n            // Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n            resources:: {\n              local __resourcesMixin(resources) = {resources+: resources},\n              mixinInstance(resources):: __resourcesMixin(resources),\n              // Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n              limits(limits):: __resourcesMixin({limits+: limits}),\n              // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n              requests(requests):: __resourcesMixin({requests+: requests}),\n            },\n            resourcesType:: hidden.core.v1.resourceRequirements,\n            // A label query over volumes to consider for binding.\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n        // PersistentVolumeClaimStatus is the current status of a persistent volume claim.\n        persistentVolumeClaimStatus:: {\n          new():: {},\n          // AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n          accessModes(accessModes):: if std.type(accessModes) == \"array\" then {accessModes+: accessModes} else {accessModes+: [accessModes]},\n          // Represents the actual resources of the underlying volume.\n          capacity(capacity):: {capacity+: capacity},\n          // Phase represents the current phase of PersistentVolumeClaim.\n          phase(phase):: {phase: phase},\n          mixin:: {\n          },\n        },\n        // PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).\n        persistentVolumeClaimVolumeSource:: {\n          new():: {},\n          // ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n          claimName(claimName):: {claimName: claimName},\n          // Will force the ReadOnly setting in VolumeMounts. Default false.\n          readOnly(readOnly):: {readOnly: readOnly},\n          mixin:: {\n          },\n        },\n        // PersistentVolumeSpec is the specification of a persistent volume.\n        persistentVolumeSpec:: {\n          new():: {},\n          // AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes\n          accessModes(accessModes):: if std.type(accessModes) == \"array\" then {accessModes+: accessModes} else {accessModes+: [accessModes]},\n          // A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n          capacity(capacity):: {capacity+: capacity},\n          // What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\n          persistentVolumeReclaimPolicy(persistentVolumeReclaimPolicy):: {persistentVolumeReclaimPolicy: persistentVolumeReclaimPolicy},\n          // Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.\n          storageClassName(storageClassName):: {storageClassName: storageClassName},\n          mixin:: {\n            // AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n            awsElasticBlockStore:: {\n              local __awsElasticBlockStoreMixin(awsElasticBlockStore) = {awsElasticBlockStore+: awsElasticBlockStore},\n              mixinInstance(awsElasticBlockStore):: __awsElasticBlockStoreMixin(awsElasticBlockStore),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              fsType(fsType):: __awsElasticBlockStoreMixin({fsType: fsType}),\n              // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n              partition(partition):: __awsElasticBlockStoreMixin({partition: partition}),\n              // Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              readOnly(readOnly):: __awsElasticBlockStoreMixin({readOnly: readOnly}),\n              // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              volumeId(volumeId):: __awsElasticBlockStoreMixin({volumeID: volumeId}),\n            },\n            awsElasticBlockStoreType:: hidden.core.v1.awsElasticBlockStoreVolumeSource,\n            // AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n            azureDisk:: {\n              local __azureDiskMixin(azureDisk) = {azureDisk+: azureDisk},\n              mixinInstance(azureDisk):: __azureDiskMixin(azureDisk),\n              // Host Caching mode: None, Read Only, Read Write.\n              cachingMode(cachingMode):: __azureDiskMixin({cachingMode: cachingMode}),\n              // The Name of the data disk in the blob storage\n              diskName(diskName):: __azureDiskMixin({diskName: diskName}),\n              // The URI the data disk in the blob storage\n              diskUri(diskUri):: __azureDiskMixin({diskURI: diskUri}),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __azureDiskMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __azureDiskMixin({readOnly: readOnly}),\n            },\n            azureDiskType:: hidden.core.v1.azureDiskVolumeSource,\n            // AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n            azureFile:: {\n              local __azureFileMixin(azureFile) = {azureFile+: azureFile},\n              mixinInstance(azureFile):: __azureFileMixin(azureFile),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __azureFileMixin({readOnly: readOnly}),\n              // the name of secret that contains Azure Storage Account Name and Key\n              secretName(secretName):: __azureFileMixin({secretName: secretName}),\n              // Share Name\n              shareName(shareName):: __azureFileMixin({shareName: shareName}),\n            },\n            azureFileType:: hidden.core.v1.azureFileVolumeSource,\n            // CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n            cephfs:: {\n              local __cephfsMixin(cephfs) = {cephfs+: cephfs},\n              mixinInstance(cephfs):: __cephfsMixin(cephfs),\n              // Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              monitors(monitors):: if std.type(monitors) == \"array\" then __cephfsMixin({monitors+: monitors}) else __cephfsMixin({monitors+: [monitors]}),\n              // Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n              path(path):: __cephfsMixin({path: path}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              readOnly(readOnly):: __cephfsMixin({readOnly: readOnly}),\n              // Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              secretFile(secretFile):: __cephfsMixin({secretFile: secretFile}),\n              // Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __cephfsMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              user(user):: __cephfsMixin({user: user}),\n            },\n            cephfsType:: hidden.core.v1.cephFsVolumeSource,\n            // Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n            cinder:: {\n              local __cinderMixin(cinder) = {cinder+: cinder},\n              mixinInstance(cinder):: __cinderMixin(cinder),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              fsType(fsType):: __cinderMixin({fsType: fsType}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              readOnly(readOnly):: __cinderMixin({readOnly: readOnly}),\n              // volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              volumeId(volumeId):: __cinderMixin({volumeID: volumeId}),\n            },\n            cinderType:: hidden.core.v1.cinderVolumeSource,\n            // ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding\n            claimRef:: {\n              local __claimRefMixin(claimRef) = {claimRef+: claimRef},\n              mixinInstance(claimRef):: __claimRefMixin(claimRef),\n              // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n              fieldPath(fieldPath):: __claimRefMixin({fieldPath: fieldPath}),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __claimRefMixin({name: name}),\n              // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n              namespace(namespace):: __claimRefMixin({namespace: namespace}),\n              // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n              resourceVersion(resourceVersion):: __claimRefMixin({resourceVersion: resourceVersion}),\n              // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n              uid(uid):: __claimRefMixin({uid: uid}),\n            },\n            claimRefType:: hidden.core.v1.objectReference,\n            // FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n            fc:: {\n              local __fcMixin(fc) = {fc+: fc},\n              mixinInstance(fc):: __fcMixin(fc),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __fcMixin({fsType: fsType}),\n              // Required: FC target lun number\n              lun(lun):: __fcMixin({lun: lun}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __fcMixin({readOnly: readOnly}),\n              // Required: FC target worldwide names (WWNs)\n              targetWwns(targetWwns):: if std.type(targetWwns) == \"array\" then __fcMixin({targetWWNs+: targetWwns}) else __fcMixin({targetWWNs+: [targetWwns]}),\n            },\n            fcType:: hidden.core.v1.fcVolumeSource,\n            // FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n            flexVolume:: {\n              local __flexVolumeMixin(flexVolume) = {flexVolume+: flexVolume},\n              mixinInstance(flexVolume):: __flexVolumeMixin(flexVolume),\n              // Driver is the name of the driver to use for this volume.\n              driver(driver):: __flexVolumeMixin({driver: driver}),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n              fsType(fsType):: __flexVolumeMixin({fsType: fsType}),\n              // Optional: Extra command options if any.\n              options(options):: __flexVolumeMixin({options+: options}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __flexVolumeMixin({readOnly: readOnly}),\n              // Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __flexVolumeMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n            },\n            flexVolumeType:: hidden.core.v1.flexVolumeSource,\n            // Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n            flocker:: {\n              local __flockerMixin(flocker) = {flocker+: flocker},\n              mixinInstance(flocker):: __flockerMixin(flocker),\n              // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated\n              datasetName(datasetName):: __flockerMixin({datasetName: datasetName}),\n              // UUID of the dataset. This is unique identifier of a Flocker dataset\n              datasetUuid(datasetUuid):: __flockerMixin({datasetUUID: datasetUuid}),\n            },\n            flockerType:: hidden.core.v1.flockerVolumeSource,\n            // GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n            gcePersistentDisk:: {\n              local __gcePersistentDiskMixin(gcePersistentDisk) = {gcePersistentDisk+: gcePersistentDisk},\n              mixinInstance(gcePersistentDisk):: __gcePersistentDiskMixin(gcePersistentDisk),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              fsType(fsType):: __gcePersistentDiskMixin({fsType: fsType}),\n              // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              partition(partition):: __gcePersistentDiskMixin({partition: partition}),\n              // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              pdName(pdName):: __gcePersistentDiskMixin({pdName: pdName}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              readOnly(readOnly):: __gcePersistentDiskMixin({readOnly: readOnly}),\n            },\n            gcePersistentDiskType:: hidden.core.v1.gcePersistentDiskVolumeSource,\n            // Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md\n            glusterfs:: {\n              local __glusterfsMixin(glusterfs) = {glusterfs+: glusterfs},\n              mixinInstance(glusterfs):: __glusterfsMixin(glusterfs),\n              // EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              endpoints(endpoints):: __glusterfsMixin({endpoints: endpoints}),\n              // Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              path(path):: __glusterfsMixin({path: path}),\n              // ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              readOnly(readOnly):: __glusterfsMixin({readOnly: readOnly}),\n            },\n            glusterfsType:: hidden.core.v1.glusterfsVolumeSource,\n            // HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n            hostPath:: {\n              local __hostPathMixin(hostPath) = {hostPath+: hostPath},\n              mixinInstance(hostPath):: __hostPathMixin(hostPath),\n              // Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n              path(path):: __hostPathMixin({path: path}),\n            },\n            hostPathType:: hidden.core.v1.hostPathVolumeSource,\n            // ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\n            iscsi:: {\n              local __iscsiMixin(iscsi) = {iscsi+: iscsi},\n              mixinInstance(iscsi):: __iscsiMixin(iscsi),\n              // whether support iSCSI Discovery CHAP authentication\n              chapAuthDiscovery(chapAuthDiscovery):: __iscsiMixin({chapAuthDiscovery: chapAuthDiscovery}),\n              // whether support iSCSI Session CHAP authentication\n              chapAuthSession(chapAuthSession):: __iscsiMixin({chapAuthSession: chapAuthSession}),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n              fsType(fsType):: __iscsiMixin({fsType: fsType}),\n              // Target iSCSI Qualified Name.\n              iqn(iqn):: __iscsiMixin({iqn: iqn}),\n              // Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.\n              iscsiInterface(iscsiInterface):: __iscsiMixin({iscsiInterface: iscsiInterface}),\n              // iSCSI target lun number.\n              lun(lun):: __iscsiMixin({lun: lun}),\n              // iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n              portals(portals):: if std.type(portals) == \"array\" then __iscsiMixin({portals+: portals}) else __iscsiMixin({portals+: [portals]}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\n              readOnly(readOnly):: __iscsiMixin({readOnly: readOnly}),\n              // CHAP secret for iSCSI target and initiator authentication\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __iscsiMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n              targetPortal(targetPortal):: __iscsiMixin({targetPortal: targetPortal}),\n            },\n            iscsiType:: hidden.core.v1.iscsiVolumeSource,\n            // Local represents directly-attached storage with node affinity\n            localStorage:: {\n              local __localStorageMixin(localStorage) = {\"local\"+: localStorage},\n              mixinInstance(localStorage):: __localStorageMixin(localStorage),\n              // The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device\n              path(path):: __localStorageMixin({path: path}),\n            },\n            localStorageType:: hidden.core.v1.localVolumeSource,\n            // NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n            nfs:: {\n              local __nfsMixin(nfs) = {nfs+: nfs},\n              mixinInstance(nfs):: __nfsMixin(nfs),\n              // Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              path(path):: __nfsMixin({path: path}),\n              // ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              readOnly(readOnly):: __nfsMixin({readOnly: readOnly}),\n              // Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              server(server):: __nfsMixin({server: server}),\n            },\n            nfsType:: hidden.core.v1.nfsVolumeSource,\n            // PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\n            photonPersistentDisk:: {\n              local __photonPersistentDiskMixin(photonPersistentDisk) = {photonPersistentDisk+: photonPersistentDisk},\n              mixinInstance(photonPersistentDisk):: __photonPersistentDiskMixin(photonPersistentDisk),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __photonPersistentDiskMixin({fsType: fsType}),\n              // ID that identifies Photon Controller persistent disk\n              pdId(pdId):: __photonPersistentDiskMixin({pdID: pdId}),\n            },\n            photonPersistentDiskType:: hidden.core.v1.photonPersistentDiskVolumeSource,\n            // PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\n            portworxVolume:: {\n              local __portworxVolumeMixin(portworxVolume) = {portworxVolume+: portworxVolume},\n              mixinInstance(portworxVolume):: __portworxVolumeMixin(portworxVolume),\n              // FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __portworxVolumeMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __portworxVolumeMixin({readOnly: readOnly}),\n              // VolumeID uniquely identifies a Portworx volume\n              volumeId(volumeId):: __portworxVolumeMixin({volumeID: volumeId}),\n            },\n            portworxVolumeType:: hidden.core.v1.portworxVolumeSource,\n            // Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n            quobyte:: {\n              local __quobyteMixin(quobyte) = {quobyte+: quobyte},\n              mixinInstance(quobyte):: __quobyteMixin(quobyte),\n              // Group to map volume access to Default is no group\n              group(group):: __quobyteMixin({group: group}),\n              // ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n              readOnly(readOnly):: __quobyteMixin({readOnly: readOnly}),\n              // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n              registry(registry):: __quobyteMixin({registry: registry}),\n              // User to map volume access to Defaults to serivceaccount user\n              user(user):: __quobyteMixin({user: user}),\n              // Volume is a string that references an already created Quobyte volume by name.\n              volume(volume):: __quobyteMixin({volume: volume}),\n            },\n            quobyteType:: hidden.core.v1.quobyteVolumeSource,\n            // RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md\n            rbd:: {\n              local __rbdMixin(rbd) = {rbd+: rbd},\n              mixinInstance(rbd):: __rbdMixin(rbd),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n              fsType(fsType):: __rbdMixin({fsType: fsType}),\n              // The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              image(image):: __rbdMixin({image: image}),\n              // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              keyring(keyring):: __rbdMixin({keyring: keyring}),\n              // A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              monitors(monitors):: if std.type(monitors) == \"array\" then __rbdMixin({monitors+: monitors}) else __rbdMixin({monitors+: [monitors]}),\n              // The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              pool(pool):: __rbdMixin({pool: pool}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              readOnly(readOnly):: __rbdMixin({readOnly: readOnly}),\n              // SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __rbdMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              user(user):: __rbdMixin({user: user}),\n            },\n            rbdType:: hidden.core.v1.rbdVolumeSource,\n            // ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n            scaleIo:: {\n              local __scaleIoMixin(scaleIo) = {scaleIO+: scaleIo},\n              mixinInstance(scaleIo):: __scaleIoMixin(scaleIo),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __scaleIoMixin({fsType: fsType}),\n              // The host address of the ScaleIO API Gateway.\n              gateway(gateway):: __scaleIoMixin({gateway: gateway}),\n              // The name of the Protection Domain for the configured storage (defaults to \"default\").\n              protectionDomain(protectionDomain):: __scaleIoMixin({protectionDomain: protectionDomain}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __scaleIoMixin({readOnly: readOnly}),\n              // SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __scaleIoMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // Flag to enable/disable SSL communication with Gateway, default false\n              sslEnabled(sslEnabled):: __scaleIoMixin({sslEnabled: sslEnabled}),\n              // Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\").\n              storageMode(storageMode):: __scaleIoMixin({storageMode: storageMode}),\n              // The Storage Pool associated with the protection domain (defaults to \"default\").\n              storagePool(storagePool):: __scaleIoMixin({storagePool: storagePool}),\n              // The name of the storage system as configured in ScaleIO.\n              system(system):: __scaleIoMixin({system: system}),\n              // The name of a volume already created in the ScaleIO system that is associated with this volume source.\n              volumeName(volumeName):: __scaleIoMixin({volumeName: volumeName}),\n            },\n            scaleIoType:: hidden.core.v1.scaleIoVolumeSource,\n            // StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md\n            storageos:: {\n              local __storageosMixin(storageos) = {storageos+: storageos},\n              mixinInstance(storageos):: __storageosMixin(storageos),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __storageosMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __storageosMixin({readOnly: readOnly}),\n              // SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __storageosMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n                fieldPath(fieldPath):: __secretRefMixin({fieldPath: fieldPath}),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n                // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n                namespace(namespace):: __secretRefMixin({namespace: namespace}),\n                // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n                resourceVersion(resourceVersion):: __secretRefMixin({resourceVersion: resourceVersion}),\n                // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n                uid(uid):: __secretRefMixin({uid: uid}),\n              },\n              secretRefType:: hidden.core.v1.objectReference,\n              // VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\n              volumeName(volumeName):: __storageosMixin({volumeName: volumeName}),\n              // VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n              volumeNamespace(volumeNamespace):: __storageosMixin({volumeNamespace: volumeNamespace}),\n            },\n            storageosType:: hidden.core.v1.storageOSPersistentVolumeSource,\n            // VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n            vsphereVolume:: {\n              local __vsphereVolumeMixin(vsphereVolume) = {vsphereVolume+: vsphereVolume},\n              mixinInstance(vsphereVolume):: __vsphereVolumeMixin(vsphereVolume),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __vsphereVolumeMixin({fsType: fsType}),\n              // Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n              storagePolicyID(storagePolicyID):: __vsphereVolumeMixin({storagePolicyID: storagePolicyID}),\n              // Storage Policy Based Management (SPBM) profile name.\n              storagePolicyName(storagePolicyName):: __vsphereVolumeMixin({storagePolicyName: storagePolicyName}),\n              // Path that identifies vSphere volume vmdk\n              volumePath(volumePath):: __vsphereVolumeMixin({volumePath: volumePath}),\n            },\n            vsphereVolumeType:: hidden.core.v1.vsphereVirtualDiskVolumeSource,\n          },\n        },\n        // PersistentVolumeStatus is the current status of a persistent volume.\n        persistentVolumeStatus:: {\n          new():: {},\n          // A human-readable message indicating details about why the volume is in this state.\n          message(message):: {message: message},\n          // Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase\n          phase(phase):: {phase: phase},\n          // Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.\n          reason(reason):: {reason: reason},\n          mixin:: {\n          },\n        },\n        // Represents a Photon Controller persistent disk resource.\n        photonPersistentDiskVolumeSource:: {\n          new():: {},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // ID that identifies Photon Controller persistent disk\n          pdId(pdId):: {pdID: pdId},\n          mixin:: {\n          },\n        },\n        // Pod affinity is a group of inter pod affinity scheduling rules.\n        podAffinity:: {\n          new():: {},\n          // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n          preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then {preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution} else {preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]},\n          preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n          // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n          requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then {requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution} else {requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]},\n          requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n          mixin:: {\n          },\n        },\n        // Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running\n        podAffinityTerm:: {\n          new():: {},\n          // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"\n          namespaces(namespaces):: if std.type(namespaces) == \"array\" then {namespaces+: namespaces} else {namespaces+: [namespaces]},\n          // This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed.\n          topologyKey(topologyKey):: {topologyKey: topologyKey},\n          mixin:: {\n            // A label query over a set of resources, in this case pods.\n            labelSelector:: {\n              local __labelSelectorMixin(labelSelector) = {labelSelector+: labelSelector},\n              mixinInstance(labelSelector):: __labelSelectorMixin(labelSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __labelSelectorMixin({matchExpressions+: matchExpressions}) else __labelSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __labelSelectorMixin({matchLabels+: matchLabels}),\n            },\n            labelSelectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n        // Pod anti affinity is a group of inter pod anti affinity scheduling rules.\n        podAntiAffinity:: {\n          new():: {},\n          // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n          preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then {preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution} else {preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]},\n          preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n          // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n          requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then {requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution} else {requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]},\n          requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n          mixin:: {\n          },\n        },\n        // PodCondition contains details for the current condition of this pod.\n        podCondition:: {\n          new():: {},\n          // Human-readable message indicating details about last transition.\n          message(message):: {message: message},\n          // Unique, one-word, CamelCase reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Type is the type of the condition. Currently only Ready. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\n          type(type):: {type: type},\n          mixin:: {\n            // Last time we probed the condition.\n            lastProbeTime:: {\n              local __lastProbeTimeMixin(lastProbeTime) = {lastProbeTime+: lastProbeTime},\n              mixinInstance(lastProbeTime):: __lastProbeTimeMixin(lastProbeTime),\n            },\n            lastProbeTimeType:: hidden.meta.v1.time,\n            // Last time the condition transitioned from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.\n        podSecurityContext:: {\n          new():: {},\n          // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n          //\n          // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n          //\n          // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n          fsGroup(fsGroup):: {fsGroup: fsGroup},\n          // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n          runAsNonRoot(runAsNonRoot):: {runAsNonRoot: runAsNonRoot},\n          // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n          runAsUser(runAsUser):: {runAsUser: runAsUser},\n          // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n          supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then {supplementalGroups+: supplementalGroups} else {supplementalGroups+: [supplementalGroups]},\n          mixin:: {\n            // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n            seLinuxOptions:: {\n              local __seLinuxOptionsMixin(seLinuxOptions) = {seLinuxOptions+: seLinuxOptions},\n              mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n              // Level is SELinux level label that applies to the container.\n              level(level):: __seLinuxOptionsMixin({level: level}),\n              // Role is a SELinux role label that applies to the container.\n              role(role):: __seLinuxOptionsMixin({role: role}),\n              // Type is a SELinux type label that applies to the container.\n              type(type):: __seLinuxOptionsMixin({type: type}),\n              // User is a SELinux user label that applies to the container.\n              user(user):: __seLinuxOptionsMixin({user: user}),\n            },\n            seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n          },\n        },\n        // PodSpec is a description of a pod.\n        podSpec:: {\n          new():: {},\n          // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n          activeDeadlineSeconds(activeDeadlineSeconds):: {activeDeadlineSeconds: activeDeadlineSeconds},\n          // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n          automountServiceAccountToken(automountServiceAccountToken):: {automountServiceAccountToken: automountServiceAccountToken},\n          // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n          containers(containers):: if std.type(containers) == \"array\" then {containers+: containers} else {containers+: [containers]},\n          containersType:: hidden.core.v1.container,\n          // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n          dnsPolicy(dnsPolicy):: {dnsPolicy: dnsPolicy},\n          // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n          hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then {hostAliases+: hostAliases} else {hostAliases+: [hostAliases]},\n          hostAliasesType:: hidden.core.v1.hostAlias,\n          // Use the host's ipc namespace. Optional: Default to false.\n          hostIpc(hostIpc):: {hostIPC: hostIpc},\n          // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n          hostNetwork(hostNetwork):: {hostNetwork: hostNetwork},\n          // Use the host's pid namespace. Optional: Default to false.\n          hostPid(hostPid):: {hostPID: hostPid},\n          // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n          hostname(hostname):: {hostname: hostname},\n          // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n          imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then {imagePullSecrets+: imagePullSecrets} else {imagePullSecrets+: [imagePullSecrets]},\n          imagePullSecretsType:: hidden.core.v1.localObjectReference,\n          // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n          initContainers(initContainers):: if std.type(initContainers) == \"array\" then {initContainers+: initContainers} else {initContainers+: [initContainers]},\n          initContainersType:: hidden.core.v1.container,\n          // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n          nodeName(nodeName):: {nodeName: nodeName},\n          // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n          nodeSelector(nodeSelector):: {nodeSelector+: nodeSelector},\n          // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n          restartPolicy(restartPolicy):: {restartPolicy: restartPolicy},\n          // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n          schedulerName(schedulerName):: {schedulerName: schedulerName},\n          // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n          serviceAccount(serviceAccount):: {serviceAccount: serviceAccount},\n          // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n          serviceAccountName(serviceAccountName):: {serviceAccountName: serviceAccountName},\n          // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n          subdomain(subdomain):: {subdomain: subdomain},\n          // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n          terminationGracePeriodSeconds(terminationGracePeriodSeconds):: {terminationGracePeriodSeconds: terminationGracePeriodSeconds},\n          // If specified, the pod's tolerations.\n          tolerations(tolerations):: if std.type(tolerations) == \"array\" then {tolerations+: tolerations} else {tolerations+: [tolerations]},\n          tolerationsType:: hidden.core.v1.toleration,\n          // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n          volumes(volumes):: if std.type(volumes) == \"array\" then {volumes+: volumes} else {volumes+: [volumes]},\n          volumesType:: hidden.core.v1.volume,\n          mixin:: {\n            // If specified, the pod's scheduling constraints\n            affinity:: {\n              local __affinityMixin(affinity) = {affinity+: affinity},\n              mixinInstance(affinity):: __affinityMixin(affinity),\n              // Describes node affinity scheduling rules for the pod.\n              nodeAffinity:: {\n                local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                requiredDuringSchedulingIgnoredDuringExecution:: {\n                  local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                  mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                  // Required. A list of node selector terms. The terms are ORed.\n                  nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                  nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                },\n                requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n              },\n              nodeAffinityType:: hidden.core.v1.nodeAffinity,\n              // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n              podAffinity:: {\n                local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n              },\n              podAffinityType:: hidden.core.v1.podAffinity,\n              // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n              podAntiAffinity:: {\n                local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n              },\n              podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n            },\n            affinityType:: hidden.core.v1.affinity,\n            // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n            securityContext:: {\n              local __securityContextMixin(securityContext) = {securityContext+: securityContext},\n              mixinInstance(securityContext):: __securityContextMixin(securityContext),\n              // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n              //\n              // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n              //\n              // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n              fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n              // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n              runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n              // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n              runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n              // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n              seLinuxOptions:: {\n                local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                // Level is SELinux level label that applies to the container.\n                level(level):: __seLinuxOptionsMixin({level: level}),\n                // Role is a SELinux role label that applies to the container.\n                role(role):: __seLinuxOptionsMixin({role: role}),\n                // Type is a SELinux type label that applies to the container.\n                type(type):: __seLinuxOptionsMixin({type: type}),\n                // User is a SELinux user label that applies to the container.\n                user(user):: __seLinuxOptionsMixin({user: user}),\n              },\n              seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n              // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n              supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n            },\n            securityContextType:: hidden.core.v1.podSecurityContext,\n          },\n        },\n        // PodStatus represents information about the status of a pod. Status may trail the actual state of a system.\n        podStatus:: {\n          new():: {},\n          // Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.core.v1.podCondition,\n          // The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\n          containerStatuses(containerStatuses):: if std.type(containerStatuses) == \"array\" then {containerStatuses+: containerStatuses} else {containerStatuses+: [containerStatuses]},\n          containerStatusesType:: hidden.core.v1.containerStatus,\n          // IP address of the host to which the pod is assigned. Empty if not yet scheduled.\n          hostIp(hostIp):: {hostIP: hostIp},\n          // The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\n          initContainerStatuses(initContainerStatuses):: if std.type(initContainerStatuses) == \"array\" then {initContainerStatuses+: initContainerStatuses} else {initContainerStatuses+: [initContainerStatuses]},\n          initContainerStatusesType:: hidden.core.v1.containerStatus,\n          // A human readable message indicating details about why the pod is in this condition.\n          message(message):: {message: message},\n          // Current condition of the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n          phase(phase):: {phase: phase},\n          // IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.\n          podIp(podIp):: {podIP: podIp},\n          // The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://github.com/kubernetes/kubernetes/blob/master/docs/design/resource-qos.md\n          qosClass(qosClass):: {qosClass: qosClass},\n          // A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'\n          reason(reason):: {reason: reason},\n          mixin:: {\n            // RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.\n            startTime:: {\n              local __startTimeMixin(startTime) = {startTime+: startTime},\n              mixinInstance(startTime):: __startTimeMixin(startTime),\n            },\n            startTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // PodTemplateSpec describes the data a pod should have when created from a template\n        podTemplateSpec:: {\n          new():: {},\n          mixin:: {\n            // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n            metadata:: {\n              local __metadataMixin(metadata) = {metadata+: metadata},\n              mixinInstance(metadata):: __metadataMixin(metadata),\n              // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n              annotations(annotations):: __metadataMixin({annotations+: annotations}),\n              // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n              clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n              // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n              deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n              // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n              finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n              // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n              //\n              // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n              //\n              // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n              generateName(generateName):: __metadataMixin({generateName: generateName}),\n              // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n              //\n              // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n              initializers:: {\n                local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                mixinInstance(initializers):: __initializersMixin(initializers),\n                // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                pendingType:: hidden.meta.v1.initializer,\n                // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                result:: {\n                  local __resultMixin(result) = __initializersMixin({result+: result}),\n                  mixinInstance(result):: __resultMixin(result),\n                  // Suggested HTTP return code for this status, 0 if not set.\n                  code(code):: __resultMixin({code: code}),\n                  // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                  details:: {\n                    local __detailsMixin(details) = __resultMixin({details+: details}),\n                    mixinInstance(details):: __detailsMixin(details),\n                    // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                    causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                    causesType:: hidden.meta.v1.statusCause,\n                    // The group attribute of the resource associated with the status StatusReason.\n                    group(group):: __detailsMixin({group: group}),\n                    // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                    name(name):: __detailsMixin({name: name}),\n                    // If specified, the time in seconds before the operation should be retried.\n                    retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                    // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                    uid(uid):: __detailsMixin({uid: uid}),\n                  },\n                  detailsType:: hidden.meta.v1.statusDetails,\n                  // A human-readable description of the status of this operation.\n                  message(message):: __resultMixin({message: message}),\n                  // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                  reason(reason):: __resultMixin({reason: reason}),\n                },\n                resultType:: hidden.meta.v1.status,\n              },\n              initializersType:: hidden.meta.v1.initializers,\n              // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n              labels(labels):: __metadataMixin({labels+: labels}),\n              // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n              name(name):: __metadataMixin({name: name}),\n              // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n              //\n              // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n              namespace(namespace):: __metadataMixin({namespace: namespace}),\n            },\n            metadataType:: hidden.meta.v1.objectMeta,\n            // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n            spec:: {\n              local __specMixin(spec) = {spec+: spec},\n              mixinInstance(spec):: __specMixin(spec),\n              // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n              activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n              // If specified, the pod's scheduling constraints\n              affinity:: {\n                local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                mixinInstance(affinity):: __affinityMixin(affinity),\n                // Describes node affinity scheduling rules for the pod.\n                nodeAffinity:: {\n                  local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                  mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                  // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                  preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                  preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                  // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                  requiredDuringSchedulingIgnoredDuringExecution:: {\n                    local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                    mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                    // Required. A list of node selector terms. The terms are ORed.\n                    nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                    nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                  },\n                  requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                },\n                nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                podAffinity:: {\n                  local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                  mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                  // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                  preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                  preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                  // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                  requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                  requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                },\n                podAffinityType:: hidden.core.v1.podAffinity,\n                // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                podAntiAffinity:: {\n                  local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                  mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                  // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                  preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                  preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                  // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                  requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                  requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                },\n                podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n              },\n              affinityType:: hidden.core.v1.affinity,\n              // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n              automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n              // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n              containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n              containersType:: hidden.core.v1.container,\n              // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n              dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n              // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n              hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n              hostAliasesType:: hidden.core.v1.hostAlias,\n              // Use the host's ipc namespace. Optional: Default to false.\n              hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n              // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n              hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n              // Use the host's pid namespace. Optional: Default to false.\n              hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n              // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n              hostname(hostname):: __specMixin({hostname: hostname}),\n              // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n              imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n              imagePullSecretsType:: hidden.core.v1.localObjectReference,\n              // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n              initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n              initContainersType:: hidden.core.v1.container,\n              // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n              nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n              // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n              nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n              // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n              restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n              // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n              schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n              // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n              securityContext:: {\n                local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                //\n                // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                //\n                // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                seLinuxOptions:: {\n                  local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                  mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                  // Level is SELinux level label that applies to the container.\n                  level(level):: __seLinuxOptionsMixin({level: level}),\n                  // Role is a SELinux role label that applies to the container.\n                  role(role):: __seLinuxOptionsMixin({role: role}),\n                  // Type is a SELinux type label that applies to the container.\n                  type(type):: __seLinuxOptionsMixin({type: type}),\n                  // User is a SELinux user label that applies to the container.\n                  user(user):: __seLinuxOptionsMixin({user: user}),\n                },\n                seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n              },\n              securityContextType:: hidden.core.v1.podSecurityContext,\n              // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n              serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n              // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n              serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n              // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n              subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n              // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n              terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n              // If specified, the pod's tolerations.\n              tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n              tolerationsType:: hidden.core.v1.toleration,\n              // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n              volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n              volumesType:: hidden.core.v1.volume,\n            },\n            specType:: hidden.core.v1.podSpec,\n          },\n        },\n        // PortworxVolumeSource represents a Portworx volume resource.\n        portworxVolumeSource:: {\n          new():: {},\n          // FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // VolumeID uniquely identifies a Portworx volume\n          volumeId(volumeId):: {volumeID: volumeId},\n          mixin:: {\n          },\n        },\n        // An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\n        preferredSchedulingTerm:: {\n          new():: {},\n          // Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\n          weight(weight):: {weight: weight},\n          mixin:: {\n            // A node selector term, associated with the corresponding weight.\n            preference:: {\n              local __preferenceMixin(preference) = {preference+: preference},\n              mixinInstance(preference):: __preferenceMixin(preference),\n              // Required. A list of node selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __preferenceMixin({matchExpressions+: matchExpressions}) else __preferenceMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.core.v1.nodeSelectorRequirement,\n            },\n            preferenceType:: hidden.core.v1.nodeSelectorTerm,\n          },\n        },\n        // Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.\n        probe:: {\n          new():: {},\n          // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.\n          failureThreshold(failureThreshold):: {failureThreshold: failureThreshold},\n          // Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n          initialDelaySeconds(initialDelaySeconds):: {initialDelaySeconds: initialDelaySeconds},\n          // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.\n          periodSeconds(periodSeconds):: {periodSeconds: periodSeconds},\n          // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.\n          successThreshold(successThreshold):: {successThreshold: successThreshold},\n          // Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n          timeoutSeconds(timeoutSeconds):: {timeoutSeconds: timeoutSeconds},\n          mixin:: {\n            // One and only one of the following should be specified. Exec specifies the action to take.\n            exec:: {\n              local __execMixin(exec) = {exec+: exec},\n              mixinInstance(exec):: __execMixin(exec),\n              // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n              command(command):: if std.type(command) == \"array\" then __execMixin({command+: command}) else __execMixin({command+: [command]}),\n            },\n            execType:: hidden.core.v1.execAction,\n            // HTTPGet specifies the http request to perform.\n            httpGet:: {\n              local __httpGetMixin(httpGet) = {httpGet+: httpGet},\n              mixinInstance(httpGet):: __httpGetMixin(httpGet),\n              // Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n              host(host):: __httpGetMixin({host: host}),\n              // Custom headers to set in the request. HTTP allows repeated headers.\n              httpHeaders(httpHeaders):: if std.type(httpHeaders) == \"array\" then __httpGetMixin({httpHeaders+: httpHeaders}) else __httpGetMixin({httpHeaders+: [httpHeaders]}),\n              httpHeadersType:: hidden.core.v1.httpHeader,\n              // Path to access on the HTTP server.\n              path(path):: __httpGetMixin({path: path}),\n              // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n              port(port):: __httpGetMixin({port: port}),\n              // Scheme to use for connecting to the host. Defaults to HTTP.\n              scheme(scheme):: __httpGetMixin({scheme: scheme}),\n            },\n            httpGetType:: hidden.core.v1.httpGetAction,\n            // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n            tcpSocket:: {\n              local __tcpSocketMixin(tcpSocket) = {tcpSocket+: tcpSocket},\n              mixinInstance(tcpSocket):: __tcpSocketMixin(tcpSocket),\n              // Optional: Host name to connect to, defaults to the pod IP.\n              host(host):: __tcpSocketMixin({host: host}),\n              // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n              port(port):: __tcpSocketMixin({port: port}),\n            },\n            tcpSocketType:: hidden.core.v1.tcpSocketAction,\n          },\n        },\n        // Represents a projected volume source\n        projectedVolumeSource:: {\n          new():: {},\n          // Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n          defaultMode(defaultMode):: {defaultMode: defaultMode},\n          // list of volume projections\n          sources(sources):: if std.type(sources) == \"array\" then {sources+: sources} else {sources+: [sources]},\n          sourcesType:: hidden.core.v1.volumeProjection,\n          mixin:: {\n          },\n        },\n        // Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.\n        quobyteVolumeSource:: {\n          new():: {},\n          // Group to map volume access to Default is no group\n          group(group):: {group: group},\n          // ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n          registry(registry):: {registry: registry},\n          // User to map volume access to Defaults to serivceaccount user\n          user(user):: {user: user},\n          // Volume is a string that references an already created Quobyte volume by name.\n          volume(volume):: {volume: volume},\n          mixin:: {\n          },\n        },\n        // Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.\n        rbdVolumeSource:: {\n          new():: {},\n          // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n          fsType(fsType):: {fsType: fsType},\n          // The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n          image(image):: {image: image},\n          // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n          keyring(keyring):: {keyring: keyring},\n          // A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n          monitors(monitors):: if std.type(monitors) == \"array\" then {monitors+: monitors} else {monitors+: [monitors]},\n          // The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n          pool(pool):: {pool: pool},\n          // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n          readOnly(readOnly):: {readOnly: readOnly},\n          // The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n          user(user):: {user: user},\n          mixin:: {\n            // SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n            },\n            secretRefType:: hidden.core.v1.localObjectReference,\n          },\n        },\n        // ReplicationControllerCondition describes the state of a replication controller at a certain point.\n        replicationControllerCondition:: {\n          new():: {},\n          // A human readable message indicating details about the transition.\n          message(message):: {message: message},\n          // The reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Type of replication controller condition.\n          type(type):: {type: type},\n          mixin:: {\n            // The last time the condition transitioned from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // ReplicationControllerSpec is the specification of a replication controller.\n        replicationControllerSpec:: {\n          new():: {},\n          // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n          minReadySeconds(minReadySeconds):: {minReadySeconds: minReadySeconds},\n          // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller\n          replicas(replicas):: {replicas: replicas},\n          // Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n          selector(selector):: {selector+: selector},\n          mixin:: {\n            // Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n            template:: {\n              local __templateMixin(template) = {template+: template},\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n        },\n        // ReplicationControllerStatus represents the current status of a replication controller.\n        replicationControllerStatus:: {\n          new():: {},\n          // The number of available replicas (ready for at least minReadySeconds) for this replication controller.\n          availableReplicas(availableReplicas):: {availableReplicas: availableReplicas},\n          // Represents the latest available observations of a replication controller's current state.\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.core.v1.replicationControllerCondition,\n          // The number of pods that have labels matching the labels of the pod template of the replication controller.\n          fullyLabeledReplicas(fullyLabeledReplicas):: {fullyLabeledReplicas: fullyLabeledReplicas},\n          // ObservedGeneration reflects the generation of the most recently observed replication controller.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          // The number of ready replicas for this replication controller.\n          readyReplicas(readyReplicas):: {readyReplicas: readyReplicas},\n          // Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller\n          replicas(replicas):: {replicas: replicas},\n          mixin:: {\n          },\n        },\n        // ResourceFieldSelector represents container resources (cpu, memory) and their output format\n        resourceFieldSelector:: {\n          new():: {},\n          // Container name: required for volumes, optional for env vars\n          containerName(containerName):: {containerName: containerName},\n          // Required: resource to select\n          resource(resource):: {resource: resource},\n          mixin:: {\n            // Specifies the output format of the exposed resources, defaults to \"1\"\n            divisor:: {\n              local __divisorMixin(divisor) = {divisor+: divisor},\n              mixinInstance(divisor):: __divisorMixin(divisor),\n            },\n            divisorType:: hidden.core.resource.quantity,\n          },\n        },\n        // ResourceQuotaSpec defines the desired hard limits to enforce for Quota.\n        resourceQuotaSpec:: {\n          new():: {},\n          // Hard is the set of desired hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md\n          hard(hard):: {hard+: hard},\n          // A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.\n          scopes(scopes):: if std.type(scopes) == \"array\" then {scopes+: scopes} else {scopes+: [scopes]},\n          mixin:: {\n          },\n        },\n        // ResourceQuotaStatus defines the enforced hard limits and observed use.\n        resourceQuotaStatus:: {\n          new():: {},\n          // Hard is the set of enforced hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md\n          hard(hard):: {hard+: hard},\n          // Used is the current observed total usage of the resource in the namespace.\n          used(used):: {used+: used},\n          mixin:: {\n          },\n        },\n        // ResourceRequirements describes the compute resource requirements.\n        resourceRequirements:: {\n          new():: {},\n          // Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n          limits(limits):: {limits+: limits},\n          // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n          requests(requests):: {requests+: requests},\n          mixin:: {\n          },\n        },\n        // SELinuxOptions are the labels to be applied to the container\n        seLinuxOptions:: {\n          new():: {},\n          // Level is SELinux level label that applies to the container.\n          level(level):: {level: level},\n          // Role is a SELinux role label that applies to the container.\n          role(role):: {role: role},\n          // Type is a SELinux type label that applies to the container.\n          type(type):: {type: type},\n          // User is a SELinux user label that applies to the container.\n          user(user):: {user: user},\n          mixin:: {\n          },\n        },\n        // ScaleIOVolumeSource represents a persistent ScaleIO volume\n        scaleIoVolumeSource:: {\n          new():: {},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // The host address of the ScaleIO API Gateway.\n          gateway(gateway):: {gateway: gateway},\n          // The name of the Protection Domain for the configured storage (defaults to \"default\").\n          protectionDomain(protectionDomain):: {protectionDomain: protectionDomain},\n          // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // Flag to enable/disable SSL communication with Gateway, default false\n          sslEnabled(sslEnabled):: {sslEnabled: sslEnabled},\n          // Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\").\n          storageMode(storageMode):: {storageMode: storageMode},\n          // The Storage Pool associated with the protection domain (defaults to \"default\").\n          storagePool(storagePool):: {storagePool: storagePool},\n          // The name of the storage system as configured in ScaleIO.\n          system(system):: {system: system},\n          // The name of a volume already created in the ScaleIO system that is associated with this volume source.\n          volumeName(volumeName):: {volumeName: volumeName},\n          mixin:: {\n            // SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n            },\n            secretRefType:: hidden.core.v1.localObjectReference,\n          },\n        },\n        // SecretEnvSource selects a Secret to populate the environment variables with.\n        //\n        // The contents of the target Secret's Data field will represent the key-value pairs as environment variables.\n        secretEnvSource:: {\n          new():: {},\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Specify whether the Secret must be defined\n          optional(optional):: {optional: optional},\n          mixin:: {\n          },\n        },\n        // SecretKeySelector selects a key of a Secret.\n        secretKeySelector:: {\n          new():: {},\n          // The key of the secret to select from.  Must be a valid secret key.\n          key(key):: {key: key},\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Specify whether the Secret or it's key must be defined\n          optional(optional):: {optional: optional},\n          mixin:: {\n          },\n        },\n        // Adapts a secret into a projected volume.\n        //\n        // The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.\n        secretProjection:: {\n          new():: {},\n          // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n          items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n          itemsType:: hidden.core.v1.keyToPath,\n          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          // Specify whether the Secret or its key must be defined\n          optional(optional):: {optional: optional},\n          mixin:: {\n          },\n        },\n        // Adapts a Secret into a volume.\n        //\n        // The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.\n        secretVolumeSource:: {\n          new():: {},\n          // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n          defaultMode(defaultMode):: {defaultMode: defaultMode},\n          // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n          items(items):: if std.type(items) == \"array\" then {items+: items} else {items+: [items]},\n          itemsType:: hidden.core.v1.keyToPath,\n          // Specify whether the Secret or it's keys must be defined\n          optional(optional):: {optional: optional},\n          // Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n          secretName(secretName):: {secretName: secretName},\n          mixin:: {\n          },\n        },\n        // SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.\n        securityContext:: {\n          new():: {},\n          // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\n          privileged(privileged):: {privileged: privileged},\n          // Whether this container has a read-only root filesystem. Default is false.\n          readOnlyRootFilesystem(readOnlyRootFilesystem):: {readOnlyRootFilesystem: readOnlyRootFilesystem},\n          // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n          runAsNonRoot(runAsNonRoot):: {runAsNonRoot: runAsNonRoot},\n          // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n          runAsUser(runAsUser):: {runAsUser: runAsUser},\n          mixin:: {\n            // The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n            capabilities:: {\n              local __capabilitiesMixin(capabilities) = {capabilities+: capabilities},\n              mixinInstance(capabilities):: __capabilitiesMixin(capabilities),\n              // Added capabilities\n              add(add):: if std.type(add) == \"array\" then __capabilitiesMixin({add+: add}) else __capabilitiesMixin({add+: [add]}),\n              // Removed capabilities\n              drop(drop):: if std.type(drop) == \"array\" then __capabilitiesMixin({drop+: drop}) else __capabilitiesMixin({drop+: [drop]}),\n            },\n            capabilitiesType:: hidden.core.v1.capabilities,\n            // The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n            seLinuxOptions:: {\n              local __seLinuxOptionsMixin(seLinuxOptions) = {seLinuxOptions+: seLinuxOptions},\n              mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n              // Level is SELinux level label that applies to the container.\n              level(level):: __seLinuxOptionsMixin({level: level}),\n              // Role is a SELinux role label that applies to the container.\n              role(role):: __seLinuxOptionsMixin({role: role}),\n              // Type is a SELinux type label that applies to the container.\n              type(type):: __seLinuxOptionsMixin({type: type}),\n              // User is a SELinux user label that applies to the container.\n              user(user):: __seLinuxOptionsMixin({user: user}),\n            },\n            seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n          },\n        },\n        // ServicePort contains information on service's port.\n        servicePort:: {\n          new(port, targetPort):: {} + self.port(port) + self.targetPort(targetPort),\n          newNamed(name, port, targetPort):: {} + self.name(name) + self.port(port) + self.targetPort(targetPort),\n          // The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.\n          name(name):: {name: name},\n          // The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n          nodePort(nodePort):: {nodePort: nodePort},\n          // The port that will be exposed by this service.\n          port(port):: {port: port},\n          // The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP.\n          protocol(protocol):: {protocol: protocol},\n          // Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\n          targetPort(targetPort):: {targetPort: targetPort},\n          mixin:: {\n          },\n        },\n        // ServiceSpec describes the attributes that a user creates on a service.\n        serviceSpec:: {\n          new():: {},\n          // clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n          clusterIp(clusterIp):: {clusterIP: clusterIp},\n          // externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.\n          externalIps(externalIps):: if std.type(externalIps) == \"array\" then {externalIPs+: externalIps} else {externalIPs+: [externalIps]},\n          // externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName.\n          externalName(externalName):: {externalName: externalName},\n          // externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.\n          externalTrafficPolicy(externalTrafficPolicy):: {externalTrafficPolicy: externalTrafficPolicy},\n          // healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.\n          healthCheckNodePort(healthCheckNodePort):: {healthCheckNodePort: healthCheckNodePort},\n          // Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.\n          loadBalancerIp(loadBalancerIp):: {loadBalancerIP: loadBalancerIp},\n          // If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/\n          loadBalancerSourceRanges(loadBalancerSourceRanges):: if std.type(loadBalancerSourceRanges) == \"array\" then {loadBalancerSourceRanges+: loadBalancerSourceRanges} else {loadBalancerSourceRanges+: [loadBalancerSourceRanges]},\n          // The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n          ports(ports):: if std.type(ports) == \"array\" then {ports+: ports} else {ports+: [ports]},\n          portsType:: hidden.core.v1.servicePort,\n          // Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/\n          selector(selector):: {selector+: selector},\n          // Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n          sessionAffinity(sessionAffinity):: {sessionAffinity: sessionAffinity},\n          // type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types\n          type(type):: {type: type},\n          mixin:: {\n          },\n        },\n        // ServiceStatus represents the current status of a service.\n        serviceStatus:: {\n          new():: {},\n          mixin:: {\n            // LoadBalancer contains the current status of the load-balancer, if one is present.\n            loadBalancer:: {\n              local __loadBalancerMixin(loadBalancer) = {loadBalancer+: loadBalancer},\n              mixinInstance(loadBalancer):: __loadBalancerMixin(loadBalancer),\n              // Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.\n              ingress(ingress):: if std.type(ingress) == \"array\" then __loadBalancerMixin({ingress+: ingress}) else __loadBalancerMixin({ingress+: [ingress]}),\n              ingressType:: hidden.core.v1.loadBalancerIngress,\n            },\n            loadBalancerType:: hidden.core.v1.loadBalancerStatus,\n          },\n        },\n        // Represents a StorageOS persistent volume resource.\n        storageOSPersistentVolumeSource:: {\n          new():: {},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\n          volumeName(volumeName):: {volumeName: volumeName},\n          // VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n          volumeNamespace(volumeNamespace):: {volumeNamespace: volumeNamespace},\n          mixin:: {\n            // SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\n              fieldPath(fieldPath):: __secretRefMixin({fieldPath: fieldPath}),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n              // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n              namespace(namespace):: __secretRefMixin({namespace: namespace}),\n              // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n              resourceVersion(resourceVersion):: __secretRefMixin({resourceVersion: resourceVersion}),\n              // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n              uid(uid):: __secretRefMixin({uid: uid}),\n            },\n            secretRefType:: hidden.core.v1.objectReference,\n          },\n        },\n        // Represents a StorageOS persistent volume resource.\n        storageOSVolumeSource:: {\n          new():: {},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\n          volumeName(volumeName):: {volumeName: volumeName},\n          // VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n          volumeNamespace(volumeNamespace):: {volumeNamespace: volumeNamespace},\n          mixin:: {\n            // SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\n            secretRef:: {\n              local __secretRefMixin(secretRef) = {secretRef+: secretRef},\n              mixinInstance(secretRef):: __secretRefMixin(secretRef),\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretRefMixin({name: name}),\n            },\n            secretRefType:: hidden.core.v1.localObjectReference,\n          },\n        },\n        // TCPSocketAction describes an action based on opening a socket\n        tcpSocketAction:: {\n          new():: {},\n          // Optional: Host name to connect to, defaults to the pod IP.\n          host(host):: {host: host},\n          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n          port(port):: {port: port},\n          mixin:: {\n          },\n        },\n        // The node this Taint is attached to has the effect \"effect\" on any pod that that does not tolerate the Taint.\n        taint:: {\n          new():: {},\n          // Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\n          effect(effect):: {effect: effect},\n          // Required. The taint key to be applied to a node.\n          key(key):: {key: key},\n          // Required. The taint value corresponding to the taint key.\n          value(value):: {value: value},\n          mixin:: {\n            // TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\n            timeAdded:: {\n              local __timeAddedMixin(timeAdded) = {timeAdded+: timeAdded},\n              mixinInstance(timeAdded):: __timeAddedMixin(timeAdded),\n            },\n            timeAddedType:: hidden.meta.v1.time,\n          },\n        },\n        // The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.\n        toleration:: {\n          new():: {},\n          // Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n          effect(effect):: {effect: effect},\n          // Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n          key(key):: {key: key},\n          // Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n          operator(operator):: {operator: operator},\n          // TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n          tolerationSeconds(tolerationSeconds):: {tolerationSeconds: tolerationSeconds},\n          // Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n          value(value):: {value: value},\n          mixin:: {\n          },\n        },\n        // Volume represents a named volume in a pod that may be accessed by any container in the pod.\n        volume:: {\n          fromConfigMap(name, configMapName, configMapItems):: {} + self.name(name) + self.mixin.configMap.name(configMapName) + self.mixin.configMap.items(configMapItems),\n          fromEmptyDir(name, emptyDir={}):: {} + self.name(name) + self.mixin.emptyDir.mixinInstance(emptyDir),\n          fromPersistentVolumeClaim(name, claimName):: {} + self.name(name) + self.mixin.persistentVolumeClaim.claimName(claimName),\n          fromHostPath(name, hostPath):: {} + self.name(name) + self.mixin.hostPath.path(hostPath),\n          // Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n          name(name):: {name: name},\n          mixin:: {\n            // AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n            awsElasticBlockStore:: {\n              local __awsElasticBlockStoreMixin(awsElasticBlockStore) = {awsElasticBlockStore+: awsElasticBlockStore},\n              mixinInstance(awsElasticBlockStore):: __awsElasticBlockStoreMixin(awsElasticBlockStore),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              fsType(fsType):: __awsElasticBlockStoreMixin({fsType: fsType}),\n              // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n              partition(partition):: __awsElasticBlockStoreMixin({partition: partition}),\n              // Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              readOnly(readOnly):: __awsElasticBlockStoreMixin({readOnly: readOnly}),\n              // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n              volumeId(volumeId):: __awsElasticBlockStoreMixin({volumeID: volumeId}),\n            },\n            awsElasticBlockStoreType:: hidden.core.v1.awsElasticBlockStoreVolumeSource,\n            // AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n            azureDisk:: {\n              local __azureDiskMixin(azureDisk) = {azureDisk+: azureDisk},\n              mixinInstance(azureDisk):: __azureDiskMixin(azureDisk),\n              // Host Caching mode: None, Read Only, Read Write.\n              cachingMode(cachingMode):: __azureDiskMixin({cachingMode: cachingMode}),\n              // The Name of the data disk in the blob storage\n              diskName(diskName):: __azureDiskMixin({diskName: diskName}),\n              // The URI the data disk in the blob storage\n              diskUri(diskUri):: __azureDiskMixin({diskURI: diskUri}),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __azureDiskMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __azureDiskMixin({readOnly: readOnly}),\n            },\n            azureDiskType:: hidden.core.v1.azureDiskVolumeSource,\n            // AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n            azureFile:: {\n              local __azureFileMixin(azureFile) = {azureFile+: azureFile},\n              mixinInstance(azureFile):: __azureFileMixin(azureFile),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __azureFileMixin({readOnly: readOnly}),\n              // the name of secret that contains Azure Storage Account Name and Key\n              secretName(secretName):: __azureFileMixin({secretName: secretName}),\n              // Share Name\n              shareName(shareName):: __azureFileMixin({shareName: shareName}),\n            },\n            azureFileType:: hidden.core.v1.azureFileVolumeSource,\n            // CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n            cephfs:: {\n              local __cephfsMixin(cephfs) = {cephfs+: cephfs},\n              mixinInstance(cephfs):: __cephfsMixin(cephfs),\n              // Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              monitors(monitors):: if std.type(monitors) == \"array\" then __cephfsMixin({monitors+: monitors}) else __cephfsMixin({monitors+: [monitors]}),\n              // Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n              path(path):: __cephfsMixin({path: path}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              readOnly(readOnly):: __cephfsMixin({readOnly: readOnly}),\n              // Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              secretFile(secretFile):: __cephfsMixin({secretFile: secretFile}),\n              // Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __cephfsMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n              user(user):: __cephfsMixin({user: user}),\n            },\n            cephfsType:: hidden.core.v1.cephFsVolumeSource,\n            // Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n            cinder:: {\n              local __cinderMixin(cinder) = {cinder+: cinder},\n              mixinInstance(cinder):: __cinderMixin(cinder),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              fsType(fsType):: __cinderMixin({fsType: fsType}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              readOnly(readOnly):: __cinderMixin({readOnly: readOnly}),\n              // volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n              volumeId(volumeId):: __cinderMixin({volumeID: volumeId}),\n            },\n            cinderType:: hidden.core.v1.cinderVolumeSource,\n            // ConfigMap represents a configMap that should populate this volume\n            configMap:: {\n              local __configMapMixin(configMap) = {configMap+: configMap},\n              mixinInstance(configMap):: __configMapMixin(configMap),\n              // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n              defaultMode(defaultMode):: __configMapMixin({defaultMode: defaultMode}),\n              // If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n              items(items):: if std.type(items) == \"array\" then __configMapMixin({items+: items}) else __configMapMixin({items+: [items]}),\n              itemsType:: hidden.core.v1.keyToPath,\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __configMapMixin({name: name}),\n              // Specify whether the ConfigMap or it's keys must be defined\n              optional(optional):: __configMapMixin({optional: optional}),\n            },\n            configMapType:: hidden.core.v1.configMapVolumeSource,\n            // DownwardAPI represents downward API about the pod that should populate this volume\n            downwardApi:: {\n              local __downwardApiMixin(downwardApi) = {downwardAPI+: downwardApi},\n              mixinInstance(downwardApi):: __downwardApiMixin(downwardApi),\n              // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n              defaultMode(defaultMode):: __downwardApiMixin({defaultMode: defaultMode}),\n              // Items is a list of downward API volume file\n              items(items):: if std.type(items) == \"array\" then __downwardApiMixin({items+: items}) else __downwardApiMixin({items+: [items]}),\n              itemsType:: hidden.core.v1.downwardApiVolumeFile,\n            },\n            downwardApiType:: hidden.core.v1.downwardApiVolumeSource,\n            // EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n            emptyDir:: {\n              local __emptyDirMixin(emptyDir) = {emptyDir+: emptyDir},\n              mixinInstance(emptyDir):: __emptyDirMixin(emptyDir),\n              // What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n              medium(medium):: __emptyDirMixin({medium: medium}),\n              // Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir\n              sizeLimit:: {\n                local __sizeLimitMixin(sizeLimit) = __emptyDirMixin({sizeLimit+: sizeLimit}),\n                mixinInstance(sizeLimit):: __sizeLimitMixin(sizeLimit),\n              },\n              sizeLimitType:: hidden.core.resource.quantity,\n            },\n            emptyDirType:: hidden.core.v1.emptyDirVolumeSource,\n            // FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n            fc:: {\n              local __fcMixin(fc) = {fc+: fc},\n              mixinInstance(fc):: __fcMixin(fc),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __fcMixin({fsType: fsType}),\n              // Required: FC target lun number\n              lun(lun):: __fcMixin({lun: lun}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __fcMixin({readOnly: readOnly}),\n              // Required: FC target worldwide names (WWNs)\n              targetWwns(targetWwns):: if std.type(targetWwns) == \"array\" then __fcMixin({targetWWNs+: targetWwns}) else __fcMixin({targetWWNs+: [targetWwns]}),\n            },\n            fcType:: hidden.core.v1.fcVolumeSource,\n            // FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\n            flexVolume:: {\n              local __flexVolumeMixin(flexVolume) = {flexVolume+: flexVolume},\n              mixinInstance(flexVolume):: __flexVolumeMixin(flexVolume),\n              // Driver is the name of the driver to use for this volume.\n              driver(driver):: __flexVolumeMixin({driver: driver}),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n              fsType(fsType):: __flexVolumeMixin({fsType: fsType}),\n              // Optional: Extra command options if any.\n              options(options):: __flexVolumeMixin({options+: options}),\n              // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __flexVolumeMixin({readOnly: readOnly}),\n              // Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __flexVolumeMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n            },\n            flexVolumeType:: hidden.core.v1.flexVolumeSource,\n            // Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n            flocker:: {\n              local __flockerMixin(flocker) = {flocker+: flocker},\n              mixinInstance(flocker):: __flockerMixin(flocker),\n              // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated\n              datasetName(datasetName):: __flockerMixin({datasetName: datasetName}),\n              // UUID of the dataset. This is unique identifier of a Flocker dataset\n              datasetUuid(datasetUuid):: __flockerMixin({datasetUUID: datasetUuid}),\n            },\n            flockerType:: hidden.core.v1.flockerVolumeSource,\n            // GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n            gcePersistentDisk:: {\n              local __gcePersistentDiskMixin(gcePersistentDisk) = {gcePersistentDisk+: gcePersistentDisk},\n              mixinInstance(gcePersistentDisk):: __gcePersistentDiskMixin(gcePersistentDisk),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              fsType(fsType):: __gcePersistentDiskMixin({fsType: fsType}),\n              // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              partition(partition):: __gcePersistentDiskMixin({partition: partition}),\n              // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              pdName(pdName):: __gcePersistentDiskMixin({pdName: pdName}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n              readOnly(readOnly):: __gcePersistentDiskMixin({readOnly: readOnly}),\n            },\n            gcePersistentDiskType:: hidden.core.v1.gcePersistentDiskVolumeSource,\n            // GitRepo represents a git repository at a particular revision.\n            gitRepo:: {\n              local __gitRepoMixin(gitRepo) = {gitRepo+: gitRepo},\n              mixinInstance(gitRepo):: __gitRepoMixin(gitRepo),\n              // Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n              directory(directory):: __gitRepoMixin({directory: directory}),\n              // Repository URL\n              repository(repository):: __gitRepoMixin({repository: repository}),\n              // Commit hash for the specified revision.\n              revision(revision):: __gitRepoMixin({revision: revision}),\n            },\n            gitRepoType:: hidden.core.v1.gitRepoVolumeSource,\n            // Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md\n            glusterfs:: {\n              local __glusterfsMixin(glusterfs) = {glusterfs+: glusterfs},\n              mixinInstance(glusterfs):: __glusterfsMixin(glusterfs),\n              // EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              endpoints(endpoints):: __glusterfsMixin({endpoints: endpoints}),\n              // Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              path(path):: __glusterfsMixin({path: path}),\n              // ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n              readOnly(readOnly):: __glusterfsMixin({readOnly: readOnly}),\n            },\n            glusterfsType:: hidden.core.v1.glusterfsVolumeSource,\n            // HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n            hostPath:: {\n              local __hostPathMixin(hostPath) = {hostPath+: hostPath},\n              mixinInstance(hostPath):: __hostPathMixin(hostPath),\n              // Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n              path(path):: __hostPathMixin({path: path}),\n            },\n            hostPathType:: hidden.core.v1.hostPathVolumeSource,\n            // ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md\n            iscsi:: {\n              local __iscsiMixin(iscsi) = {iscsi+: iscsi},\n              mixinInstance(iscsi):: __iscsiMixin(iscsi),\n              // whether support iSCSI Discovery CHAP authentication\n              chapAuthDiscovery(chapAuthDiscovery):: __iscsiMixin({chapAuthDiscovery: chapAuthDiscovery}),\n              // whether support iSCSI Session CHAP authentication\n              chapAuthSession(chapAuthSession):: __iscsiMixin({chapAuthSession: chapAuthSession}),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n              fsType(fsType):: __iscsiMixin({fsType: fsType}),\n              // Target iSCSI Qualified Name.\n              iqn(iqn):: __iscsiMixin({iqn: iqn}),\n              // Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.\n              iscsiInterface(iscsiInterface):: __iscsiMixin({iscsiInterface: iscsiInterface}),\n              // iSCSI target lun number.\n              lun(lun):: __iscsiMixin({lun: lun}),\n              // iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n              portals(portals):: if std.type(portals) == \"array\" then __iscsiMixin({portals+: portals}) else __iscsiMixin({portals+: [portals]}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\n              readOnly(readOnly):: __iscsiMixin({readOnly: readOnly}),\n              // CHAP secret for iSCSI target and initiator authentication\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __iscsiMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n              targetPortal(targetPortal):: __iscsiMixin({targetPortal: targetPortal}),\n            },\n            iscsiType:: hidden.core.v1.iscsiVolumeSource,\n            // NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n            nfs:: {\n              local __nfsMixin(nfs) = {nfs+: nfs},\n              mixinInstance(nfs):: __nfsMixin(nfs),\n              // Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              path(path):: __nfsMixin({path: path}),\n              // ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              readOnly(readOnly):: __nfsMixin({readOnly: readOnly}),\n              // Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n              server(server):: __nfsMixin({server: server}),\n            },\n            nfsType:: hidden.core.v1.nfsVolumeSource,\n            // PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n            persistentVolumeClaim:: {\n              local __persistentVolumeClaimMixin(persistentVolumeClaim) = {persistentVolumeClaim+: persistentVolumeClaim},\n              mixinInstance(persistentVolumeClaim):: __persistentVolumeClaimMixin(persistentVolumeClaim),\n              // ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n              claimName(claimName):: __persistentVolumeClaimMixin({claimName: claimName}),\n              // Will force the ReadOnly setting in VolumeMounts. Default false.\n              readOnly(readOnly):: __persistentVolumeClaimMixin({readOnly: readOnly}),\n            },\n            persistentVolumeClaimType:: hidden.core.v1.persistentVolumeClaimVolumeSource,\n            // PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\n            photonPersistentDisk:: {\n              local __photonPersistentDiskMixin(photonPersistentDisk) = {photonPersistentDisk+: photonPersistentDisk},\n              mixinInstance(photonPersistentDisk):: __photonPersistentDiskMixin(photonPersistentDisk),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __photonPersistentDiskMixin({fsType: fsType}),\n              // ID that identifies Photon Controller persistent disk\n              pdId(pdId):: __photonPersistentDiskMixin({pdID: pdId}),\n            },\n            photonPersistentDiskType:: hidden.core.v1.photonPersistentDiskVolumeSource,\n            // PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\n            portworxVolume:: {\n              local __portworxVolumeMixin(portworxVolume) = {portworxVolume+: portworxVolume},\n              mixinInstance(portworxVolume):: __portworxVolumeMixin(portworxVolume),\n              // FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __portworxVolumeMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __portworxVolumeMixin({readOnly: readOnly}),\n              // VolumeID uniquely identifies a Portworx volume\n              volumeId(volumeId):: __portworxVolumeMixin({volumeID: volumeId}),\n            },\n            portworxVolumeType:: hidden.core.v1.portworxVolumeSource,\n            // Items for all in one resources secrets, configmaps, and downward API\n            projected:: {\n              local __projectedMixin(projected) = {projected+: projected},\n              mixinInstance(projected):: __projectedMixin(projected),\n              // Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n              defaultMode(defaultMode):: __projectedMixin({defaultMode: defaultMode}),\n              // list of volume projections\n              sources(sources):: if std.type(sources) == \"array\" then __projectedMixin({sources+: sources}) else __projectedMixin({sources+: [sources]}),\n              sourcesType:: hidden.core.v1.volumeProjection,\n            },\n            projectedType:: hidden.core.v1.projectedVolumeSource,\n            // Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n            quobyte:: {\n              local __quobyteMixin(quobyte) = {quobyte+: quobyte},\n              mixinInstance(quobyte):: __quobyteMixin(quobyte),\n              // Group to map volume access to Default is no group\n              group(group):: __quobyteMixin({group: group}),\n              // ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n              readOnly(readOnly):: __quobyteMixin({readOnly: readOnly}),\n              // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n              registry(registry):: __quobyteMixin({registry: registry}),\n              // User to map volume access to Defaults to serivceaccount user\n              user(user):: __quobyteMixin({user: user}),\n              // Volume is a string that references an already created Quobyte volume by name.\n              volume(volume):: __quobyteMixin({volume: volume}),\n            },\n            quobyteType:: hidden.core.v1.quobyteVolumeSource,\n            // RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md\n            rbd:: {\n              local __rbdMixin(rbd) = {rbd+: rbd},\n              mixinInstance(rbd):: __rbdMixin(rbd),\n              // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n              fsType(fsType):: __rbdMixin({fsType: fsType}),\n              // The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              image(image):: __rbdMixin({image: image}),\n              // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              keyring(keyring):: __rbdMixin({keyring: keyring}),\n              // A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              monitors(monitors):: if std.type(monitors) == \"array\" then __rbdMixin({monitors+: monitors}) else __rbdMixin({monitors+: [monitors]}),\n              // The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              pool(pool):: __rbdMixin({pool: pool}),\n              // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              readOnly(readOnly):: __rbdMixin({readOnly: readOnly}),\n              // SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __rbdMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n              user(user):: __rbdMixin({user: user}),\n            },\n            rbdType:: hidden.core.v1.rbdVolumeSource,\n            // ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n            scaleIo:: {\n              local __scaleIoMixin(scaleIo) = {scaleIO+: scaleIo},\n              mixinInstance(scaleIo):: __scaleIoMixin(scaleIo),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __scaleIoMixin({fsType: fsType}),\n              // The host address of the ScaleIO API Gateway.\n              gateway(gateway):: __scaleIoMixin({gateway: gateway}),\n              // The name of the Protection Domain for the configured storage (defaults to \"default\").\n              protectionDomain(protectionDomain):: __scaleIoMixin({protectionDomain: protectionDomain}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __scaleIoMixin({readOnly: readOnly}),\n              // SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __scaleIoMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // Flag to enable/disable SSL communication with Gateway, default false\n              sslEnabled(sslEnabled):: __scaleIoMixin({sslEnabled: sslEnabled}),\n              // Indicates whether the storage for a volume should be thick or thin (defaults to \"thin\").\n              storageMode(storageMode):: __scaleIoMixin({storageMode: storageMode}),\n              // The Storage Pool associated with the protection domain (defaults to \"default\").\n              storagePool(storagePool):: __scaleIoMixin({storagePool: storagePool}),\n              // The name of the storage system as configured in ScaleIO.\n              system(system):: __scaleIoMixin({system: system}),\n              // The name of a volume already created in the ScaleIO system that is associated with this volume source.\n              volumeName(volumeName):: __scaleIoMixin({volumeName: volumeName}),\n            },\n            scaleIoType:: hidden.core.v1.scaleIoVolumeSource,\n            // Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n            secret:: {\n              local __secretMixin(secret) = {secret+: secret},\n              mixinInstance(secret):: __secretMixin(secret),\n              // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n              defaultMode(defaultMode):: __secretMixin({defaultMode: defaultMode}),\n              // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n              items(items):: if std.type(items) == \"array\" then __secretMixin({items+: items}) else __secretMixin({items+: [items]}),\n              itemsType:: hidden.core.v1.keyToPath,\n              // Specify whether the Secret or it's keys must be defined\n              optional(optional):: __secretMixin({optional: optional}),\n              // Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n              secretName(secretName):: __secretMixin({secretName: secretName}),\n            },\n            secretType:: hidden.core.v1.secretVolumeSource,\n            // StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n            storageos:: {\n              local __storageosMixin(storageos) = {storageos+: storageos},\n              mixinInstance(storageos):: __storageosMixin(storageos),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __storageosMixin({fsType: fsType}),\n              // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n              readOnly(readOnly):: __storageosMixin({readOnly: readOnly}),\n              // SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\n              secretRef:: {\n                local __secretRefMixin(secretRef) = __storageosMixin({secretRef+: secretRef}),\n                mixinInstance(secretRef):: __secretRefMixin(secretRef),\n                // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n                name(name):: __secretRefMixin({name: name}),\n              },\n              secretRefType:: hidden.core.v1.localObjectReference,\n              // VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\n              volumeName(volumeName):: __storageosMixin({volumeName: volumeName}),\n              // VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n              volumeNamespace(volumeNamespace):: __storageosMixin({volumeNamespace: volumeNamespace}),\n            },\n            storageosType:: hidden.core.v1.storageOSVolumeSource,\n            // VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n            vsphereVolume:: {\n              local __vsphereVolumeMixin(vsphereVolume) = {vsphereVolume+: vsphereVolume},\n              mixinInstance(vsphereVolume):: __vsphereVolumeMixin(vsphereVolume),\n              // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n              fsType(fsType):: __vsphereVolumeMixin({fsType: fsType}),\n              // Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n              storagePolicyID(storagePolicyID):: __vsphereVolumeMixin({storagePolicyID: storagePolicyID}),\n              // Storage Policy Based Management (SPBM) profile name.\n              storagePolicyName(storagePolicyName):: __vsphereVolumeMixin({storagePolicyName: storagePolicyName}),\n              // Path that identifies vSphere volume vmdk\n              volumePath(volumePath):: __vsphereVolumeMixin({volumePath: volumePath}),\n            },\n            vsphereVolumeType:: hidden.core.v1.vsphereVirtualDiskVolumeSource,\n          },\n        },\n        // VolumeMount describes a mounting of a Volume within a container.\n        volumeMount:: {\n          new(name, mountPath, readOnly=false):: {} + self.name(name) + self.mountPath(mountPath) + self.readOnly(readOnly),\n          // Path within the container at which the volume should be mounted.  Must not contain ':'.\n          mountPath(mountPath):: {mountPath: mountPath},\n          // This must match the Name of a Volume.\n          name(name):: {name: name},\n          // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n          readOnly(readOnly):: {readOnly: readOnly},\n          // Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n          subPath(subPath):: {subPath: subPath},\n          mixin:: {\n          },\n        },\n        // Projection that may be projected along with other supported volume types\n        volumeProjection:: {\n          new():: {},\n          mixin:: {\n            // information about the configMap data to project\n            configMap:: {\n              local __configMapMixin(configMap) = {configMap+: configMap},\n              mixinInstance(configMap):: __configMapMixin(configMap),\n              // If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n              items(items):: if std.type(items) == \"array\" then __configMapMixin({items+: items}) else __configMapMixin({items+: [items]}),\n              itemsType:: hidden.core.v1.keyToPath,\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __configMapMixin({name: name}),\n              // Specify whether the ConfigMap or it's keys must be defined\n              optional(optional):: __configMapMixin({optional: optional}),\n            },\n            configMapType:: hidden.core.v1.configMapProjection,\n            // information about the downwardAPI data to project\n            downwardApi:: {\n              local __downwardApiMixin(downwardApi) = {downwardAPI+: downwardApi},\n              mixinInstance(downwardApi):: __downwardApiMixin(downwardApi),\n              // Items is a list of DownwardAPIVolume file\n              items(items):: if std.type(items) == \"array\" then __downwardApiMixin({items+: items}) else __downwardApiMixin({items+: [items]}),\n              itemsType:: hidden.core.v1.downwardApiVolumeFile,\n            },\n            downwardApiType:: hidden.core.v1.downwardApiProjection,\n            // information about the secret data to project\n            secret:: {\n              local __secretMixin(secret) = {secret+: secret},\n              mixinInstance(secret):: __secretMixin(secret),\n              // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n              items(items):: if std.type(items) == \"array\" then __secretMixin({items+: items}) else __secretMixin({items+: [items]}),\n              itemsType:: hidden.core.v1.keyToPath,\n              // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n              name(name):: __secretMixin({name: name}),\n              // Specify whether the Secret or its key must be defined\n              optional(optional):: __secretMixin({optional: optional}),\n            },\n            secretType:: hidden.core.v1.secretProjection,\n          },\n        },\n        // Represents a vSphere volume resource.\n        vsphereVirtualDiskVolumeSource:: {\n          new():: {},\n          // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n          fsType(fsType):: {fsType: fsType},\n          // Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n          storagePolicyID(storagePolicyID):: {storagePolicyID: storagePolicyID},\n          // Storage Policy Based Management (SPBM) profile name.\n          storagePolicyName(storagePolicyName):: {storagePolicyName: storagePolicyName},\n          // Path that identifies vSphere volume vmdk\n          volumePath(volumePath):: {volumePath: volumePath},\n          mixin:: {\n          },\n        },\n        // The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\n        weightedPodAffinityTerm:: {\n          new():: {},\n          // weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\n          weight(weight):: {weight: weight},\n          mixin:: {\n            // Required. A pod affinity term, associated with the corresponding weight.\n            podAffinityTerm:: {\n              local __podAffinityTermMixin(podAffinityTerm) = {podAffinityTerm+: podAffinityTerm},\n              mixinInstance(podAffinityTerm):: __podAffinityTermMixin(podAffinityTerm),\n              // A label query over a set of resources, in this case pods.\n              labelSelector:: {\n                local __labelSelectorMixin(labelSelector) = __podAffinityTermMixin({labelSelector+: labelSelector}),\n                mixinInstance(labelSelector):: __labelSelectorMixin(labelSelector),\n                // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n                matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __labelSelectorMixin({matchExpressions+: matchExpressions}) else __labelSelectorMixin({matchExpressions+: [matchExpressions]}),\n                matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n                // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n                matchLabels(matchLabels):: __labelSelectorMixin({matchLabels+: matchLabels}),\n              },\n              labelSelectorType:: hidden.meta.v1.labelSelector,\n              // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"\n              namespaces(namespaces):: if std.type(namespaces) == \"array\" then __podAffinityTermMixin({namespaces+: namespaces}) else __podAffinityTermMixin({namespaces+: [namespaces]}),\n              // This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed.\n              topologyKey(topologyKey):: __podAffinityTermMixin({topologyKey: topologyKey}),\n            },\n            podAffinityTermType:: hidden.core.v1.podAffinityTerm,\n          },\n        },\n      },\n    },\n    extensions:: {\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"extensions/v1beta1\"},\n        // An APIVersion represents a single concrete version of an object model.\n        apiVersion:: {\n          new():: {},\n          // Name of this version (e.g. 'v1').\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // DaemonSetSpec is the specification of a daemon set.\n        daemonSetSpec:: {\n          new():: {},\n          // The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).\n          minReadySeconds(minReadySeconds):: {minReadySeconds: minReadySeconds},\n          // The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.\n          revisionHistoryLimit(revisionHistoryLimit):: {revisionHistoryLimit: revisionHistoryLimit},\n          mixin:: {\n            // A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n            template:: {\n              local __templateMixin(template) = {template+: template},\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n            // An update strategy to replace existing DaemonSet pods with new pods.\n            updateStrategy:: {\n              local __updateStrategyMixin(updateStrategy) = {updateStrategy+: updateStrategy},\n              mixinInstance(updateStrategy):: __updateStrategyMixin(updateStrategy),\n              // Rolling update config params. Present only if type = \"RollingUpdate\".\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __updateStrategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.\n                maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n              },\n              rollingUpdateType:: hidden.extensions.v1beta1.rollingUpdateDaemonSet,\n              // Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is OnDelete.\n              type(type):: __updateStrategyMixin({type: type}),\n            },\n            updateStrategyType:: hidden.extensions.v1beta1.daemonSetUpdateStrategy,\n          },\n        },\n        // DaemonSetStatus represents the current status of a daemon set.\n        daemonSetStatus:: {\n          new():: {},\n          // Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.\n          collisionCount(collisionCount):: {collisionCount: collisionCount},\n          // The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\n          currentNumberScheduled(currentNumberScheduled):: {currentNumberScheduled: currentNumberScheduled},\n          // The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\n          desiredNumberScheduled(desiredNumberScheduled):: {desiredNumberScheduled: desiredNumberScheduled},\n          // The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)\n          numberAvailable(numberAvailable):: {numberAvailable: numberAvailable},\n          // The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\n          numberMisscheduled(numberMisscheduled):: {numberMisscheduled: numberMisscheduled},\n          // The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.\n          numberReady(numberReady):: {numberReady: numberReady},\n          // The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)\n          numberUnavailable(numberUnavailable):: {numberUnavailable: numberUnavailable},\n          // The most recent generation observed by the daemon set controller.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          // The total number of nodes that are running updated daemon pod\n          updatedNumberScheduled(updatedNumberScheduled):: {updatedNumberScheduled: updatedNumberScheduled},\n          mixin:: {\n          },\n        },\n        //\n        daemonSetUpdateStrategy:: {\n          new():: {},\n          // Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is OnDelete.\n          type(type):: {type: type},\n          mixin:: {\n            // Rolling update config params. Present only if type = \"RollingUpdate\".\n            rollingUpdate:: {\n              local __rollingUpdateMixin(rollingUpdate) = {rollingUpdate+: rollingUpdate},\n              mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n              // The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.\n              maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n            },\n            rollingUpdateType:: hidden.extensions.v1beta1.rollingUpdateDaemonSet,\n          },\n        },\n        // DeploymentCondition describes the state of a deployment at a certain point.\n        deploymentCondition:: {\n          new():: {},\n          // A human readable message indicating details about the transition.\n          message(message):: {message: message},\n          // The reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Type of deployment condition.\n          type(type):: {type: type},\n          mixin:: {\n            // Last time the condition transitioned from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n            // The last time this condition was updated.\n            lastUpdateTime:: {\n              local __lastUpdateTimeMixin(lastUpdateTime) = {lastUpdateTime+: lastUpdateTime},\n              mixinInstance(lastUpdateTime):: __lastUpdateTimeMixin(lastUpdateTime),\n            },\n            lastUpdateTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // DeploymentSpec is the specification of the desired behavior of the Deployment.\n        deploymentSpec:: {\n          new():: {},\n          // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n          minReadySeconds(minReadySeconds):: {minReadySeconds: minReadySeconds},\n          // Indicates that the deployment is paused and will not be processed by the deployment controller.\n          paused(paused):: {paused: paused},\n          // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.\n          progressDeadlineSeconds(progressDeadlineSeconds):: {progressDeadlineSeconds: progressDeadlineSeconds},\n          // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n          replicas(replicas):: {replicas: replicas},\n          // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.\n          revisionHistoryLimit(revisionHistoryLimit):: {revisionHistoryLimit: revisionHistoryLimit},\n          mixin:: {\n            // The config this deployment is rolling back to. Will be cleared after rollback is done.\n            rollbackTo:: {\n              local __rollbackToMixin(rollbackTo) = {rollbackTo+: rollbackTo},\n              mixinInstance(rollbackTo):: __rollbackToMixin(rollbackTo),\n              // The revision to rollback to. If set to 0, rollback to the last revision.\n              revision(revision):: __rollbackToMixin({revision: revision}),\n            },\n            rollbackToType:: hidden.extensions.v1beta1.rollbackConfig,\n            // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // The deployment strategy to use to replace existing pods with new ones.\n            strategy:: {\n              local __strategyMixin(strategy) = {strategy+: strategy},\n              mixinInstance(strategy):: __strategyMixin(strategy),\n              // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n              rollingUpdate:: {\n                local __rollingUpdateMixin(rollingUpdate) = __strategyMixin({rollingUpdate+: rollingUpdate}),\n                mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n                // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n                maxSurge(maxSurge):: __rollingUpdateMixin({maxSurge: maxSurge}),\n                // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n                maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n              },\n              rollingUpdateType:: hidden.extensions.v1beta1.rollingUpdateDeployment,\n              // Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n              type(type):: __strategyMixin({type: type}),\n            },\n            strategyType:: hidden.extensions.v1beta1.deploymentStrategy,\n            // Template describes the pods that will be created.\n            template:: {\n              local __templateMixin(template) = {template+: template},\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n        },\n        // DeploymentStatus is the most recently observed status of the Deployment.\n        deploymentStatus:: {\n          new():: {},\n          // Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n          availableReplicas(availableReplicas):: {availableReplicas: availableReplicas},\n          // Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.\n          collisionCount(collisionCount):: {collisionCount: collisionCount},\n          // Represents the latest available observations of a deployment's current state.\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.extensions.v1beta1.deploymentCondition,\n          // The generation observed by the deployment controller.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          // Total number of ready pods targeted by this deployment.\n          readyReplicas(readyReplicas):: {readyReplicas: readyReplicas},\n          // Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n          replicas(replicas):: {replicas: replicas},\n          // Total number of unavailable pods targeted by this deployment.\n          unavailableReplicas(unavailableReplicas):: {unavailableReplicas: unavailableReplicas},\n          // Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n          updatedReplicas(updatedReplicas):: {updatedReplicas: updatedReplicas},\n          mixin:: {\n          },\n        },\n        // DeploymentStrategy describes how to replace existing pods with new ones.\n        deploymentStrategy:: {\n          new():: {},\n          // Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n          type(type):: {type: type},\n          mixin:: {\n            // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n            rollingUpdate:: {\n              local __rollingUpdateMixin(rollingUpdate) = {rollingUpdate+: rollingUpdate},\n              mixinInstance(rollingUpdate):: __rollingUpdateMixin(rollingUpdate),\n              // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n              maxSurge(maxSurge):: __rollingUpdateMixin({maxSurge: maxSurge}),\n              // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n              maxUnavailable(maxUnavailable):: __rollingUpdateMixin({maxUnavailable: maxUnavailable}),\n            },\n            rollingUpdateType:: hidden.extensions.v1beta1.rollingUpdateDeployment,\n          },\n        },\n        // FSGroupStrategyOptions defines the strategy type and options used to create the strategy.\n        fsGroupStrategyOptions:: {\n          new():: {},\n          // Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.\n          ranges(ranges):: if std.type(ranges) == \"array\" then {ranges+: ranges} else {ranges+: [ranges]},\n          rangesType:: hidden.extensions.v1beta1.idRange,\n          // Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.\n          rule(rule):: {rule: rule},\n          mixin:: {\n          },\n        },\n        // HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.\n        httpIngressPath:: {\n          new():: {},\n          // Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.\n          path(path):: {path: path},\n          mixin:: {\n            // Backend defines the referenced service endpoint to which the traffic will be forwarded to.\n            backend:: {\n              local __backendMixin(backend) = {backend+: backend},\n              mixinInstance(backend):: __backendMixin(backend),\n              // Specifies the name of the referenced service.\n              serviceName(serviceName):: __backendMixin({serviceName: serviceName}),\n              // Specifies the port of the referenced service.\n              servicePort(servicePort):: __backendMixin({servicePort: servicePort}),\n            },\n            backendType:: hidden.extensions.v1beta1.ingressBackend,\n          },\n        },\n        // HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.\n        httpIngressRuleValue:: {\n          new():: {},\n          // A collection of paths that map requests to backends.\n          paths(paths):: if std.type(paths) == \"array\" then {paths+: paths} else {paths+: [paths]},\n          pathsType:: hidden.extensions.v1beta1.httpIngressPath,\n          mixin:: {\n          },\n        },\n        // Host Port Range defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.\n        hostPortRange:: {\n          new():: {},\n          // max is the end of the range, inclusive.\n          max(max):: {max: max},\n          // min is the start of the range, inclusive.\n          min(min):: {min: min},\n          mixin:: {\n          },\n        },\n        // ID Range provides a min/max of an allowed range of IDs.\n        idRange:: {\n          new():: {},\n          // Max is the end of the range, inclusive.\n          max(max):: {max: max},\n          // Min is the start of the range, inclusive.\n          min(min):: {min: min},\n          mixin:: {\n          },\n        },\n        // IngressBackend describes all endpoints for a given service and port.\n        ingressBackend:: {\n          new():: {},\n          // Specifies the name of the referenced service.\n          serviceName(serviceName):: {serviceName: serviceName},\n          // Specifies the port of the referenced service.\n          servicePort(servicePort):: {servicePort: servicePort},\n          mixin:: {\n          },\n        },\n        // IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.\n        ingressRule:: {\n          new():: {},\n          // Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n          // \t  IP in the Spec of the parent Ingress.\n          // 2. The `:` delimiter is not respected because ports are not allowed.\n          // \t  Currently the port of an Ingress is implicitly :80 for http and\n          // \t  :443 for https.\n          // Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n          host(host):: {host: host},\n          mixin:: {\n            //\n            http:: {\n              local __httpMixin(http) = {http+: http},\n              mixinInstance(http):: __httpMixin(http),\n              // A collection of paths that map requests to backends.\n              paths(paths):: if std.type(paths) == \"array\" then __httpMixin({paths+: paths}) else __httpMixin({paths+: [paths]}),\n              pathsType:: hidden.extensions.v1beta1.httpIngressPath,\n            },\n            httpType:: hidden.extensions.v1beta1.httpIngressRuleValue,\n          },\n        },\n        // IngressSpec describes the Ingress the user wishes to exist.\n        ingressSpec:: {\n          new():: {},\n          // A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.\n          rules(rules):: if std.type(rules) == \"array\" then {rules+: rules} else {rules+: [rules]},\n          rulesType:: hidden.extensions.v1beta1.ingressRule,\n          // TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.\n          tls(tls):: if std.type(tls) == \"array\" then {tls+: tls} else {tls+: [tls]},\n          tlsType:: hidden.extensions.v1beta1.ingressTls,\n          mixin:: {\n            // A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.\n            backend:: {\n              local __backendMixin(backend) = {backend+: backend},\n              mixinInstance(backend):: __backendMixin(backend),\n              // Specifies the name of the referenced service.\n              serviceName(serviceName):: __backendMixin({serviceName: serviceName}),\n              // Specifies the port of the referenced service.\n              servicePort(servicePort):: __backendMixin({servicePort: servicePort}),\n            },\n            backendType:: hidden.extensions.v1beta1.ingressBackend,\n          },\n        },\n        // IngressStatus describe the current state of the Ingress.\n        ingressStatus:: {\n          new():: {},\n          mixin:: {\n            // LoadBalancer contains the current status of the load-balancer.\n            loadBalancer:: {\n              local __loadBalancerMixin(loadBalancer) = {loadBalancer+: loadBalancer},\n              mixinInstance(loadBalancer):: __loadBalancerMixin(loadBalancer),\n              // Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.\n              ingress(ingress):: if std.type(ingress) == \"array\" then __loadBalancerMixin({ingress+: ingress}) else __loadBalancerMixin({ingress+: [ingress]}),\n              ingressType:: hidden.core.v1.loadBalancerIngress,\n            },\n            loadBalancerType:: hidden.core.v1.loadBalancerStatus,\n          },\n        },\n        // IngressTLS describes the transport layer security associated with an Ingress.\n        ingressTls:: {\n          new():: {},\n          // Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.\n          hosts(hosts):: if std.type(hosts) == \"array\" then {hosts+: hosts} else {hosts+: [hosts]},\n          // SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.\n          secretName(secretName):: {secretName: secretName},\n          mixin:: {\n          },\n        },\n        // This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.\n        networkPolicyIngressRule:: {\n          new():: {},\n          // List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.\n          from(from):: if std.type(from) == \"array\" then {from+: from} else {from+: [from]},\n          fromType:: hidden.extensions.v1beta1.networkPolicyPeer,\n          // List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\n          ports(ports):: if std.type(ports) == \"array\" then {ports+: ports} else {ports+: [ports]},\n          portsType:: hidden.extensions.v1beta1.networkPolicyPort,\n          mixin:: {\n          },\n        },\n        //\n        networkPolicyPeer:: {\n          new():: {},\n          mixin:: {\n            // Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.\n            namespaceSelector:: {\n              local __namespaceSelectorMixin(namespaceSelector) = {namespaceSelector+: namespaceSelector},\n              mixinInstance(namespaceSelector):: __namespaceSelectorMixin(namespaceSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __namespaceSelectorMixin({matchExpressions+: matchExpressions}) else __namespaceSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __namespaceSelectorMixin({matchLabels+: matchLabels}),\n            },\n            namespaceSelectorType:: hidden.meta.v1.labelSelector,\n            // This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.\n            podSelector:: {\n              local __podSelectorMixin(podSelector) = {podSelector+: podSelector},\n              mixinInstance(podSelector):: __podSelectorMixin(podSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __podSelectorMixin({matchExpressions+: matchExpressions}) else __podSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __podSelectorMixin({matchLabels+: matchLabels}),\n            },\n            podSelectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n        //\n        networkPolicyPort:: {\n          new():: {},\n          // If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.\n          port(port):: {port: port},\n          // Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.\n          protocol(protocol):: {protocol: protocol},\n          mixin:: {\n          },\n        },\n        //\n        networkPolicySpec:: {\n          new():: {},\n          // List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).\n          ingress(ingress):: if std.type(ingress) == \"array\" then {ingress+: ingress} else {ingress+: [ingress]},\n          ingressType:: hidden.extensions.v1beta1.networkPolicyIngressRule,\n          mixin:: {\n            // Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\n            podSelector:: {\n              local __podSelectorMixin(podSelector) = {podSelector+: podSelector},\n              mixinInstance(podSelector):: __podSelectorMixin(podSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __podSelectorMixin({matchExpressions+: matchExpressions}) else __podSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __podSelectorMixin({matchLabels+: matchLabels}),\n            },\n            podSelectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n        // Pod Security Policy Spec defines the policy enforced.\n        podSecurityPolicySpec:: {\n          new():: {},\n          // AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.\n          allowedCapabilities(allowedCapabilities):: if std.type(allowedCapabilities) == \"array\" then {allowedCapabilities+: allowedCapabilities} else {allowedCapabilities+: [allowedCapabilities]},\n          // DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.\n          defaultAddCapabilities(defaultAddCapabilities):: if std.type(defaultAddCapabilities) == \"array\" then {defaultAddCapabilities+: defaultAddCapabilities} else {defaultAddCapabilities+: [defaultAddCapabilities]},\n          // hostIPC determines if the policy allows the use of HostIPC in the pod spec.\n          hostIpc(hostIpc):: {hostIPC: hostIpc},\n          // hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.\n          hostNetwork(hostNetwork):: {hostNetwork: hostNetwork},\n          // hostPID determines if the policy allows the use of HostPID in the pod spec.\n          hostPid(hostPid):: {hostPID: hostPid},\n          // hostPorts determines which host port ranges are allowed to be exposed.\n          hostPorts(hostPorts):: if std.type(hostPorts) == \"array\" then {hostPorts+: hostPorts} else {hostPorts+: [hostPorts]},\n          hostPortsType:: hidden.extensions.v1beta1.hostPortRange,\n          // privileged determines if a pod can request to be run as privileged.\n          privileged(privileged):: {privileged: privileged},\n          // ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.\n          readOnlyRootFilesystem(readOnlyRootFilesystem):: {readOnlyRootFilesystem: readOnlyRootFilesystem},\n          // RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.\n          requiredDropCapabilities(requiredDropCapabilities):: if std.type(requiredDropCapabilities) == \"array\" then {requiredDropCapabilities+: requiredDropCapabilities} else {requiredDropCapabilities+: [requiredDropCapabilities]},\n          // volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.\n          volumes(volumes):: if std.type(volumes) == \"array\" then {volumes+: volumes} else {volumes+: [volumes]},\n          mixin:: {\n            // FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.\n            fsGroup:: {\n              local __fsGroupMixin(fsGroup) = {fsGroup+: fsGroup},\n              mixinInstance(fsGroup):: __fsGroupMixin(fsGroup),\n              // Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.\n              ranges(ranges):: if std.type(ranges) == \"array\" then __fsGroupMixin({ranges+: ranges}) else __fsGroupMixin({ranges+: [ranges]}),\n              rangesType:: hidden.extensions.v1beta1.idRange,\n              // Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.\n              rule(rule):: __fsGroupMixin({rule: rule}),\n            },\n            fsGroupType:: hidden.extensions.v1beta1.fsGroupStrategyOptions,\n            // runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.\n            runAsUser:: {\n              local __runAsUserMixin(runAsUser) = {runAsUser+: runAsUser},\n              mixinInstance(runAsUser):: __runAsUserMixin(runAsUser),\n              // Ranges are the allowed ranges of uids that may be used.\n              ranges(ranges):: if std.type(ranges) == \"array\" then __runAsUserMixin({ranges+: ranges}) else __runAsUserMixin({ranges+: [ranges]}),\n              rangesType:: hidden.extensions.v1beta1.idRange,\n              // Rule is the strategy that will dictate the allowable RunAsUser values that may be set.\n              rule(rule):: __runAsUserMixin({rule: rule}),\n            },\n            runAsUserType:: hidden.extensions.v1beta1.runAsUserStrategyOptions,\n            // seLinux is the strategy that will dictate the allowable labels that may be set.\n            seLinux:: {\n              local __seLinuxMixin(seLinux) = {seLinux+: seLinux},\n              mixinInstance(seLinux):: __seLinuxMixin(seLinux),\n              // type is the strategy that will dictate the allowable labels that may be set.\n              rule(rule):: __seLinuxMixin({rule: rule}),\n              // seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md\n              seLinuxOptions:: {\n                local __seLinuxOptionsMixin(seLinuxOptions) = __seLinuxMixin({seLinuxOptions+: seLinuxOptions}),\n                mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                // Level is SELinux level label that applies to the container.\n                level(level):: __seLinuxOptionsMixin({level: level}),\n                // Role is a SELinux role label that applies to the container.\n                role(role):: __seLinuxOptionsMixin({role: role}),\n                // Type is a SELinux type label that applies to the container.\n                type(type):: __seLinuxOptionsMixin({type: type}),\n                // User is a SELinux user label that applies to the container.\n                user(user):: __seLinuxOptionsMixin({user: user}),\n              },\n              seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n            },\n            seLinuxType:: hidden.extensions.v1beta1.seLinuxStrategyOptions,\n            // SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.\n            supplementalGroups:: {\n              local __supplementalGroupsMixin(supplementalGroups) = {supplementalGroups+: supplementalGroups},\n              mixinInstance(supplementalGroups):: __supplementalGroupsMixin(supplementalGroups),\n              // Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.\n              ranges(ranges):: if std.type(ranges) == \"array\" then __supplementalGroupsMixin({ranges+: ranges}) else __supplementalGroupsMixin({ranges+: [ranges]}),\n              rangesType:: hidden.extensions.v1beta1.idRange,\n              // Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.\n              rule(rule):: __supplementalGroupsMixin({rule: rule}),\n            },\n            supplementalGroupsType:: hidden.extensions.v1beta1.supplementalGroupsStrategyOptions,\n          },\n        },\n        // ReplicaSetCondition describes the state of a replica set at a certain point.\n        replicaSetCondition:: {\n          new():: {},\n          // A human readable message indicating details about the transition.\n          message(message):: {message: message},\n          // The reason for the condition's last transition.\n          reason(reason):: {reason: reason},\n          // Type of replica set condition.\n          type(type):: {type: type},\n          mixin:: {\n            // The last time the condition transitioned from one status to another.\n            lastTransitionTime:: {\n              local __lastTransitionTimeMixin(lastTransitionTime) = {lastTransitionTime+: lastTransitionTime},\n              mixinInstance(lastTransitionTime):: __lastTransitionTimeMixin(lastTransitionTime),\n            },\n            lastTransitionTimeType:: hidden.meta.v1.time,\n          },\n        },\n        // ReplicaSetSpec is the specification of a ReplicaSet.\n        replicaSetSpec:: {\n          new():: {},\n          // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n          minReadySeconds(minReadySeconds):: {minReadySeconds: minReadySeconds},\n          // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller\n          replicas(replicas):: {replicas: replicas},\n          mixin:: {\n            // Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n            // Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n            template:: {\n              local __templateMixin(template) = {template+: template},\n              mixinInstance(template):: __templateMixin(template),\n              // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n              metadata:: {\n                local __metadataMixin(metadata) = __templateMixin({metadata+: metadata}),\n                mixinInstance(metadata):: __metadataMixin(metadata),\n                // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n                annotations(annotations):: __metadataMixin({annotations+: annotations}),\n                // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n                clusterName(clusterName):: __metadataMixin({clusterName: clusterName}),\n                // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n                deletionGracePeriodSeconds(deletionGracePeriodSeconds):: __metadataMixin({deletionGracePeriodSeconds: deletionGracePeriodSeconds}),\n                // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n                finalizers(finalizers):: if std.type(finalizers) == \"array\" then __metadataMixin({finalizers+: finalizers}) else __metadataMixin({finalizers+: [finalizers]}),\n                // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n                //\n                // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n                //\n                // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n                generateName(generateName):: __metadataMixin({generateName: generateName}),\n                // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n                //\n                // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n                initializers:: {\n                  local __initializersMixin(initializers) = __metadataMixin({initializers+: initializers}),\n                  mixinInstance(initializers):: __initializersMixin(initializers),\n                  // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n                  pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n                  pendingType:: hidden.meta.v1.initializer,\n                  // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n                  result:: {\n                    local __resultMixin(result) = __initializersMixin({result+: result}),\n                    mixinInstance(result):: __resultMixin(result),\n                    // Suggested HTTP return code for this status, 0 if not set.\n                    code(code):: __resultMixin({code: code}),\n                    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                    details:: {\n                      local __detailsMixin(details) = __resultMixin({details+: details}),\n                      mixinInstance(details):: __detailsMixin(details),\n                      // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                      causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                      causesType:: hidden.meta.v1.statusCause,\n                      // The group attribute of the resource associated with the status StatusReason.\n                      group(group):: __detailsMixin({group: group}),\n                      // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                      name(name):: __detailsMixin({name: name}),\n                      // If specified, the time in seconds before the operation should be retried.\n                      retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                      // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                      uid(uid):: __detailsMixin({uid: uid}),\n                    },\n                    detailsType:: hidden.meta.v1.statusDetails,\n                    // A human-readable description of the status of this operation.\n                    message(message):: __resultMixin({message: message}),\n                    // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                    reason(reason):: __resultMixin({reason: reason}),\n                  },\n                  resultType:: hidden.meta.v1.status,\n                },\n                initializersType:: hidden.meta.v1.initializers,\n                // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n                labels(labels):: __metadataMixin({labels+: labels}),\n                // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n                name(name):: __metadataMixin({name: name}),\n                // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n                //\n                // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n                namespace(namespace):: __metadataMixin({namespace: namespace}),\n              },\n              metadataType:: hidden.meta.v1.objectMeta,\n              // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n              spec:: {\n                local __specMixin(spec) = __templateMixin({spec+: spec}),\n                mixinInstance(spec):: __specMixin(spec),\n                // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n                activeDeadlineSeconds(activeDeadlineSeconds):: __specMixin({activeDeadlineSeconds: activeDeadlineSeconds}),\n                // If specified, the pod's scheduling constraints\n                affinity:: {\n                  local __affinityMixin(affinity) = __specMixin({affinity+: affinity}),\n                  mixinInstance(affinity):: __affinityMixin(affinity),\n                  // Describes node affinity scheduling rules for the pod.\n                  nodeAffinity:: {\n                    local __nodeAffinityMixin(nodeAffinity) = __affinityMixin({nodeAffinity+: nodeAffinity}),\n                    mixinInstance(nodeAffinity):: __nodeAffinityMixin(nodeAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __nodeAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.preferredSchedulingTerm,\n                    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n                    requiredDuringSchedulingIgnoredDuringExecution:: {\n                      local __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution) = __nodeAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}),\n                      mixinInstance(requiredDuringSchedulingIgnoredDuringExecution):: __requiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution),\n                      // Required. A list of node selector terms. The terms are ORed.\n                      nodeSelectorTerms(nodeSelectorTerms):: if std.type(nodeSelectorTerms) == \"array\" then __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: nodeSelectorTerms}) else __requiredDuringSchedulingIgnoredDuringExecutionMixin({nodeSelectorTerms+: [nodeSelectorTerms]}),\n                      nodeSelectorTermsType:: hidden.core.v1.nodeSelectorTerm,\n                    },\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.nodeSelector,\n                  },\n                  nodeAffinityType:: hidden.core.v1.nodeAffinity,\n                  // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n                  podAffinity:: {\n                    local __podAffinityMixin(podAffinity) = __affinityMixin({podAffinity+: podAffinity}),\n                    mixinInstance(podAffinity):: __podAffinityMixin(podAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAffinityType:: hidden.core.v1.podAffinity,\n                  // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n                  podAntiAffinity:: {\n                    local __podAntiAffinityMixin(podAntiAffinity) = __affinityMixin({podAntiAffinity+: podAntiAffinity}),\n                    mixinInstance(podAntiAffinity):: __podAntiAffinityMixin(podAntiAffinity),\n                    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n                    preferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution):: if std.type(preferredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: preferredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({preferredDuringSchedulingIgnoredDuringExecution+: [preferredDuringSchedulingIgnoredDuringExecution]}),\n                    preferredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.weightedPodAffinityTerm,\n                    // NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n                    requiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution):: if std.type(requiredDuringSchedulingIgnoredDuringExecution) == \"array\" then __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: requiredDuringSchedulingIgnoredDuringExecution}) else __podAntiAffinityMixin({requiredDuringSchedulingIgnoredDuringExecution+: [requiredDuringSchedulingIgnoredDuringExecution]}),\n                    requiredDuringSchedulingIgnoredDuringExecutionType:: hidden.core.v1.podAffinityTerm,\n                  },\n                  podAntiAffinityType:: hidden.core.v1.podAntiAffinity,\n                },\n                affinityType:: hidden.core.v1.affinity,\n                // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n                automountServiceAccountToken(automountServiceAccountToken):: __specMixin({automountServiceAccountToken: automountServiceAccountToken}),\n                // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n                containers(containers):: if std.type(containers) == \"array\" then __specMixin({containers+: containers}) else __specMixin({containers+: [containers]}),\n                containersType:: hidden.core.v1.container,\n                // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n                dnsPolicy(dnsPolicy):: __specMixin({dnsPolicy: dnsPolicy}),\n                // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n                hostAliases(hostAliases):: if std.type(hostAliases) == \"array\" then __specMixin({hostAliases+: hostAliases}) else __specMixin({hostAliases+: [hostAliases]}),\n                hostAliasesType:: hidden.core.v1.hostAlias,\n                // Use the host's ipc namespace. Optional: Default to false.\n                hostIpc(hostIpc):: __specMixin({hostIPC: hostIpc}),\n                // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n                hostNetwork(hostNetwork):: __specMixin({hostNetwork: hostNetwork}),\n                // Use the host's pid namespace. Optional: Default to false.\n                hostPid(hostPid):: __specMixin({hostPID: hostPid}),\n                // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n                hostname(hostname):: __specMixin({hostname: hostname}),\n                // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n                imagePullSecrets(imagePullSecrets):: if std.type(imagePullSecrets) == \"array\" then __specMixin({imagePullSecrets+: imagePullSecrets}) else __specMixin({imagePullSecrets+: [imagePullSecrets]}),\n                imagePullSecretsType:: hidden.core.v1.localObjectReference,\n                // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n                initContainers(initContainers):: if std.type(initContainers) == \"array\" then __specMixin({initContainers+: initContainers}) else __specMixin({initContainers+: [initContainers]}),\n                initContainersType:: hidden.core.v1.container,\n                // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n                nodeName(nodeName):: __specMixin({nodeName: nodeName}),\n                // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n                nodeSelector(nodeSelector):: __specMixin({nodeSelector+: nodeSelector}),\n                // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n                restartPolicy(restartPolicy):: __specMixin({restartPolicy: restartPolicy}),\n                // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n                schedulerName(schedulerName):: __specMixin({schedulerName: schedulerName}),\n                // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n                securityContext:: {\n                  local __securityContextMixin(securityContext) = __specMixin({securityContext+: securityContext}),\n                  mixinInstance(securityContext):: __securityContextMixin(securityContext),\n                  // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n                  //\n                  // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n                  //\n                  // If unset, the Kubelet will not modify the ownership and permissions of any volume.\n                  fsGroup(fsGroup):: __securityContextMixin({fsGroup: fsGroup}),\n                  // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n                  runAsNonRoot(runAsNonRoot):: __securityContextMixin({runAsNonRoot: runAsNonRoot}),\n                  // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  runAsUser(runAsUser):: __securityContextMixin({runAsUser: runAsUser}),\n                  // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n                  seLinuxOptions:: {\n                    local __seLinuxOptionsMixin(seLinuxOptions) = __securityContextMixin({seLinuxOptions+: seLinuxOptions}),\n                    mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n                    // Level is SELinux level label that applies to the container.\n                    level(level):: __seLinuxOptionsMixin({level: level}),\n                    // Role is a SELinux role label that applies to the container.\n                    role(role):: __seLinuxOptionsMixin({role: role}),\n                    // Type is a SELinux type label that applies to the container.\n                    type(type):: __seLinuxOptionsMixin({type: type}),\n                    // User is a SELinux user label that applies to the container.\n                    user(user):: __seLinuxOptionsMixin({user: user}),\n                  },\n                  seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n                  // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n                  supplementalGroups(supplementalGroups):: if std.type(supplementalGroups) == \"array\" then __securityContextMixin({supplementalGroups+: supplementalGroups}) else __securityContextMixin({supplementalGroups+: [supplementalGroups]}),\n                },\n                securityContextType:: hidden.core.v1.podSecurityContext,\n                // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n                serviceAccount(serviceAccount):: __specMixin({serviceAccount: serviceAccount}),\n                // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n                serviceAccountName(serviceAccountName):: __specMixin({serviceAccountName: serviceAccountName}),\n                // If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n                subdomain(subdomain):: __specMixin({subdomain: subdomain}),\n                // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n                terminationGracePeriodSeconds(terminationGracePeriodSeconds):: __specMixin({terminationGracePeriodSeconds: terminationGracePeriodSeconds}),\n                // If specified, the pod's tolerations.\n                tolerations(tolerations):: if std.type(tolerations) == \"array\" then __specMixin({tolerations+: tolerations}) else __specMixin({tolerations+: [tolerations]}),\n                tolerationsType:: hidden.core.v1.toleration,\n                // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n                volumes(volumes):: if std.type(volumes) == \"array\" then __specMixin({volumes+: volumes}) else __specMixin({volumes+: [volumes]}),\n                volumesType:: hidden.core.v1.volume,\n              },\n              specType:: hidden.core.v1.podSpec,\n            },\n            templateType:: hidden.core.v1.podTemplateSpec,\n          },\n        },\n        // ReplicaSetStatus represents the current status of a ReplicaSet.\n        replicaSetStatus:: {\n          new():: {},\n          // The number of available replicas (ready for at least minReadySeconds) for this replica set.\n          availableReplicas(availableReplicas):: {availableReplicas: availableReplicas},\n          // Represents the latest available observations of a replica set's current state.\n          conditions(conditions):: if std.type(conditions) == \"array\" then {conditions+: conditions} else {conditions+: [conditions]},\n          conditionsType:: hidden.extensions.v1beta1.replicaSetCondition,\n          // The number of pods that have labels matching the labels of the pod template of the replicaset.\n          fullyLabeledReplicas(fullyLabeledReplicas):: {fullyLabeledReplicas: fullyLabeledReplicas},\n          // ObservedGeneration reflects the generation of the most recently observed ReplicaSet.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          // The number of ready replicas for this replica set.\n          readyReplicas(readyReplicas):: {readyReplicas: readyReplicas},\n          // Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller\n          replicas(replicas):: {replicas: replicas},\n          mixin:: {\n          },\n        },\n        //\n        rollbackConfig:: {\n          new():: {},\n          // The revision to rollback to. If set to 0, rollback to the last revision.\n          revision(revision):: {revision: revision},\n          mixin:: {\n          },\n        },\n        // Spec to control the desired behavior of daemon set rolling update.\n        rollingUpdateDaemonSet:: {\n          new():: {},\n          // The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.\n          maxUnavailable(maxUnavailable):: {maxUnavailable: maxUnavailable},\n          mixin:: {\n          },\n        },\n        // Spec to control the desired behavior of rolling update.\n        rollingUpdateDeployment:: {\n          new():: {},\n          // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\n          maxSurge(maxSurge):: {maxSurge: maxSurge},\n          // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n          maxUnavailable(maxUnavailable):: {maxUnavailable: maxUnavailable},\n          mixin:: {\n          },\n        },\n        // Run A sUser Strategy Options defines the strategy type and any options used to create the strategy.\n        runAsUserStrategyOptions:: {\n          new():: {},\n          // Ranges are the allowed ranges of uids that may be used.\n          ranges(ranges):: if std.type(ranges) == \"array\" then {ranges+: ranges} else {ranges+: [ranges]},\n          rangesType:: hidden.extensions.v1beta1.idRange,\n          // Rule is the strategy that will dictate the allowable RunAsUser values that may be set.\n          rule(rule):: {rule: rule},\n          mixin:: {\n          },\n        },\n        // SELinux  Strategy Options defines the strategy type and any options used to create the strategy.\n        seLinuxStrategyOptions:: {\n          new():: {},\n          // type is the strategy that will dictate the allowable labels that may be set.\n          rule(rule):: {rule: rule},\n          mixin:: {\n            // seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md\n            seLinuxOptions:: {\n              local __seLinuxOptionsMixin(seLinuxOptions) = {seLinuxOptions+: seLinuxOptions},\n              mixinInstance(seLinuxOptions):: __seLinuxOptionsMixin(seLinuxOptions),\n              // Level is SELinux level label that applies to the container.\n              level(level):: __seLinuxOptionsMixin({level: level}),\n              // Role is a SELinux role label that applies to the container.\n              role(role):: __seLinuxOptionsMixin({role: role}),\n              // Type is a SELinux type label that applies to the container.\n              type(type):: __seLinuxOptionsMixin({type: type}),\n              // User is a SELinux user label that applies to the container.\n              user(user):: __seLinuxOptionsMixin({user: user}),\n            },\n            seLinuxOptionsType:: hidden.core.v1.seLinuxOptions,\n          },\n        },\n        // describes the attributes of a scale subresource\n        scaleSpec:: {\n          new():: {},\n          // desired number of instances for the scaled object.\n          replicas(replicas):: {replicas: replicas},\n          mixin:: {\n          },\n        },\n        // represents the current status of a scale subresource.\n        scaleStatus:: {\n          new():: {},\n          // actual number of observed instances of the scaled object.\n          replicas(replicas):: {replicas: replicas},\n          // label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors\n          selector(selector):: {selector+: selector},\n          // label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n          targetSelector(targetSelector):: {targetSelector: targetSelector},\n          mixin:: {\n          },\n        },\n        // SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.\n        supplementalGroupsStrategyOptions:: {\n          new():: {},\n          // Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.\n          ranges(ranges):: if std.type(ranges) == \"array\" then {ranges+: ranges} else {ranges+: [ranges]},\n          rangesType:: hidden.extensions.v1beta1.idRange,\n          // Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.\n          rule(rule):: {rule: rule},\n          mixin:: {\n          },\n        },\n      },\n    },\n    meta:: {\n      v1:: {\n        local apiVersion = {apiVersion: \"meta/v1\"},\n        // APIGroup contains the name, the supported versions, and the preferred version of a group.\n        apiGroup:: {\n          new():: {},\n          // name is the name of the group.\n          name(name):: {name: name},\n          // a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.\n          serverAddressByClientCidrs(serverAddressByClientCidrs):: if std.type(serverAddressByClientCidrs) == \"array\" then {serverAddressByClientCIDRs+: serverAddressByClientCidrs} else {serverAddressByClientCIDRs+: [serverAddressByClientCidrs]},\n          serverAddressByClientCidrsType:: hidden.meta.v1.serverAddressByClientCidr,\n          // versions are the versions supported in this group.\n          versions(versions):: if std.type(versions) == \"array\" then {versions+: versions} else {versions+: [versions]},\n          versionsType:: hidden.meta.v1.groupVersionForDiscovery,\n          mixin:: {\n            // preferredVersion is the version preferred by the API server, which probably is the storage version.\n            preferredVersion:: {\n              local __preferredVersionMixin(preferredVersion) = {preferredVersion+: preferredVersion},\n              mixinInstance(preferredVersion):: __preferredVersionMixin(preferredVersion),\n              // groupVersion specifies the API group and version in the form \"group/version\"\n              groupVersion(groupVersion):: __preferredVersionMixin({groupVersion: groupVersion}),\n              // version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.\n              version(version):: __preferredVersionMixin({version: version}),\n            },\n            preferredVersionType:: hidden.meta.v1.groupVersionForDiscovery,\n          },\n        },\n        // APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.\n        apiGroupList:: {\n          new():: {},\n          // groups is a list of APIGroup.\n          groups(groups):: if std.type(groups) == \"array\" then {groups+: groups} else {groups+: [groups]},\n          groupsType:: hidden.meta.v1.apiGroup,\n          mixin:: {\n          },\n        },\n        // APIResource specifies the name of a resource and whether it is namespaced.\n        apiResource:: {\n          new():: {},\n          // categories is a list of the grouped resources this resource belongs to (e.g. 'all')\n          categories(categories):: if std.type(categories) == \"array\" then {categories+: categories} else {categories+: [categories]},\n          // name is the plural name of the resource.\n          name(name):: {name: name},\n          // namespaced indicates if a resource is namespaced or not.\n          namespaced(namespaced):: {namespaced: namespaced},\n          // shortNames is a list of suggested short names of the resource.\n          shortNames(shortNames):: if std.type(shortNames) == \"array\" then {shortNames+: shortNames} else {shortNames+: [shortNames]},\n          // singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.\n          singularName(singularName):: {singularName: singularName},\n          // verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)\n          verbs(verbs):: if std.type(verbs) == \"array\" then {verbs+: verbs} else {verbs+: [verbs]},\n          mixin:: {\n          },\n        },\n        // APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.\n        apiResourceList:: {\n          new():: {},\n          // groupVersion is the group and version this APIResourceList is for.\n          groupVersion(groupVersion):: {groupVersion: groupVersion},\n          // resources contains the name of the resources and if they are namespaced.\n          resources(resources):: if std.type(resources) == \"array\" then {resources+: resources} else {resources+: [resources]},\n          resourcesType:: hidden.meta.v1.apiResource,\n          mixin:: {\n          },\n        },\n        // APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.\n        apiVersions:: {\n          new():: {},\n          // a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.\n          serverAddressByClientCidrs(serverAddressByClientCidrs):: if std.type(serverAddressByClientCidrs) == \"array\" then {serverAddressByClientCIDRs+: serverAddressByClientCidrs} else {serverAddressByClientCIDRs+: [serverAddressByClientCidrs]},\n          serverAddressByClientCidrsType:: hidden.meta.v1.serverAddressByClientCidr,\n          // versions are the api versions that are available.\n          versions(versions):: if std.type(versions) == \"array\" then {versions+: versions} else {versions+: [versions]},\n          mixin:: {\n          },\n        },\n        // DeleteOptions may be provided when deleting an API object.\n        deleteOptions:: {\n          new():: {},\n          // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\n          gracePeriodSeconds(gracePeriodSeconds):: {gracePeriodSeconds: gracePeriodSeconds},\n          // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\n          orphanDependents(orphanDependents):: {orphanDependents: orphanDependents},\n          // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\n          propagationPolicy(propagationPolicy):: {propagationPolicy: propagationPolicy},\n          mixin:: {\n            // Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.\n            preconditions:: {\n              local __preconditionsMixin(preconditions) = {preconditions+: preconditions},\n              mixinInstance(preconditions):: __preconditionsMixin(preconditions),\n              // Specifies the target UID.\n              uid(uid):: __preconditionsMixin({uid: uid}),\n            },\n            preconditionsType:: hidden.meta.v1.preconditions,\n          },\n        },\n        // GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.\n        groupVersionForDiscovery:: {\n          new():: {},\n          // groupVersion specifies the API group and version in the form \"group/version\"\n          groupVersion(groupVersion):: {groupVersion: groupVersion},\n          // version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.\n          version(version):: {version: version},\n          mixin:: {\n          },\n        },\n        // Initializer is information about an initializer that has not yet completed.\n        initializer:: {\n          new():: {},\n          // name of the process that is responsible for initializing this object.\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // Initializers tracks the progress of initialization.\n        initializers:: {\n          new():: {},\n          // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n          pending(pending):: if std.type(pending) == \"array\" then {pending+: pending} else {pending+: [pending]},\n          pendingType:: hidden.meta.v1.initializer,\n          mixin:: {\n            // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n            result:: {\n              local __resultMixin(result) = {result+: result},\n              mixinInstance(result):: __resultMixin(result),\n              // Suggested HTTP return code for this status, 0 if not set.\n              code(code):: __resultMixin({code: code}),\n              // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n              details:: {\n                local __detailsMixin(details) = __resultMixin({details+: details}),\n                mixinInstance(details):: __detailsMixin(details),\n                // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                causesType:: hidden.meta.v1.statusCause,\n                // The group attribute of the resource associated with the status StatusReason.\n                group(group):: __detailsMixin({group: group}),\n                // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                name(name):: __detailsMixin({name: name}),\n                // If specified, the time in seconds before the operation should be retried.\n                retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                uid(uid):: __detailsMixin({uid: uid}),\n              },\n              detailsType:: hidden.meta.v1.statusDetails,\n              // A human-readable description of the status of this operation.\n              message(message):: __resultMixin({message: message}),\n              // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n              reason(reason):: __resultMixin({reason: reason}),\n            },\n            resultType:: hidden.meta.v1.status,\n          },\n        },\n        // A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\n        labelSelector:: {\n          new():: {},\n          // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n          matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then {matchExpressions+: matchExpressions} else {matchExpressions+: [matchExpressions]},\n          matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n          // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n          matchLabels(matchLabels):: {matchLabels+: matchLabels},\n          mixin:: {\n          },\n        },\n        // A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\n        labelSelectorRequirement:: {\n          new():: {},\n          // key is the label key that the selector applies to.\n          key(key):: {key: key},\n          // operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.\n          operator(operator):: {operator: operator},\n          // values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\n          values(values):: if std.type(values) == \"array\" then {values+: values} else {values+: [values]},\n          mixin:: {\n          },\n        },\n        // ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.\n        listMeta:: {\n          new():: {},\n          // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n          resourceVersion(resourceVersion):: {resourceVersion: resourceVersion},\n          // SelfLink is a URL representing this object. Populated by the system. Read-only.\n          selfLink(selfLink):: {selfLink: selfLink},\n          mixin:: {\n          },\n        },\n        // ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\n        objectMeta:: {\n          new():: {},\n          // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n          annotations(annotations):: {annotations+: annotations},\n          // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n          clusterName(clusterName):: {clusterName: clusterName},\n          // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n          deletionGracePeriodSeconds(deletionGracePeriodSeconds):: {deletionGracePeriodSeconds: deletionGracePeriodSeconds},\n          // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n          finalizers(finalizers):: if std.type(finalizers) == \"array\" then {finalizers+: finalizers} else {finalizers+: [finalizers]},\n          // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n          //\n          // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n          //\n          // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n          generateName(generateName):: {generateName: generateName},\n          // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n          labels(labels):: {labels+: labels},\n          // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n          name(name):: {name: name},\n          // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n          //\n          // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n          namespace(namespace):: {namespace: namespace},\n          mixin:: {\n            // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n            //\n            // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n            initializers:: {\n              local __initializersMixin(initializers) = {initializers+: initializers},\n              mixinInstance(initializers):: __initializersMixin(initializers),\n              // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n              pending(pending):: if std.type(pending) == \"array\" then __initializersMixin({pending+: pending}) else __initializersMixin({pending+: [pending]}),\n              pendingType:: hidden.meta.v1.initializer,\n              // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n              result:: {\n                local __resultMixin(result) = __initializersMixin({result+: result}),\n                mixinInstance(result):: __resultMixin(result),\n                // Suggested HTTP return code for this status, 0 if not set.\n                code(code):: __resultMixin({code: code}),\n                // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n                details:: {\n                  local __detailsMixin(details) = __resultMixin({details+: details}),\n                  mixinInstance(details):: __detailsMixin(details),\n                  // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n                  causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n                  causesType:: hidden.meta.v1.statusCause,\n                  // The group attribute of the resource associated with the status StatusReason.\n                  group(group):: __detailsMixin({group: group}),\n                  // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n                  name(name):: __detailsMixin({name: name}),\n                  // If specified, the time in seconds before the operation should be retried.\n                  retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n                  // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n                  uid(uid):: __detailsMixin({uid: uid}),\n                },\n                detailsType:: hidden.meta.v1.statusDetails,\n                // A human-readable description of the status of this operation.\n                message(message):: __resultMixin({message: message}),\n                // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n                reason(reason):: __resultMixin({reason: reason}),\n              },\n              resultType:: hidden.meta.v1.status,\n            },\n            initializersType:: hidden.meta.v1.initializers,\n          },\n        },\n        // OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.\n        ownerReference:: {\n          new():: {},\n          // If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\n          blockOwnerDeletion(blockOwnerDeletion):: {blockOwnerDeletion: blockOwnerDeletion},\n          // If true, this reference points to the managing controller.\n          controller(controller):: {controller: controller},\n          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n          name(name):: {name: name},\n          // UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n          uid(uid):: {uid: uid},\n          mixin:: {\n          },\n        },\n        // Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.\n        patch:: {\n          new():: {},\n          mixin:: {\n          },\n        },\n        // Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.\n        preconditions:: {\n          new():: {},\n          // Specifies the target UID.\n          uid(uid):: {uid: uid},\n          mixin:: {\n          },\n        },\n        // ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.\n        serverAddressByClientCidr:: {\n          new():: {},\n          // The CIDR with which clients can match their IP to figure out the server address that they should use.\n          clientCidr(clientCidr):: {clientCIDR: clientCidr},\n          // Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.\n          serverAddress(serverAddress):: {serverAddress: serverAddress},\n          mixin:: {\n          },\n        },\n        // Status is a return value for calls that don't return other objects.\n        status:: {\n          new():: {},\n          // Suggested HTTP return code for this status, 0 if not set.\n          code(code):: {code: code},\n          // A human-readable description of the status of this operation.\n          message(message):: {message: message},\n          // A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n          reason(reason):: {reason: reason},\n          mixin:: {\n            // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n            details:: {\n              local __detailsMixin(details) = {details+: details},\n              mixinInstance(details):: __detailsMixin(details),\n              // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n              causes(causes):: if std.type(causes) == \"array\" then __detailsMixin({causes+: causes}) else __detailsMixin({causes+: [causes]}),\n              causesType:: hidden.meta.v1.statusCause,\n              // The group attribute of the resource associated with the status StatusReason.\n              group(group):: __detailsMixin({group: group}),\n              // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n              name(name):: __detailsMixin({name: name}),\n              // If specified, the time in seconds before the operation should be retried.\n              retryAfterSeconds(retryAfterSeconds):: __detailsMixin({retryAfterSeconds: retryAfterSeconds}),\n              // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n              uid(uid):: __detailsMixin({uid: uid}),\n            },\n            detailsType:: hidden.meta.v1.statusDetails,\n          },\n        },\n        // StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.\n        statusCause:: {\n          new():: {},\n          // The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n          //\n          // Examples:\n          //   \"name\" - the field \"name\" on the current resource\n          //   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"\n          field(field):: {field: field},\n          // A human-readable description of the cause of the error.  This field may be presented as-is to a reader.\n          message(message):: {message: message},\n          // A machine-readable description of the cause of the error. If this value is empty there is no information available.\n          reason(reason):: {reason: reason},\n          mixin:: {\n          },\n        },\n        // StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.\n        statusDetails:: {\n          new():: {},\n          // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n          causes(causes):: if std.type(causes) == \"array\" then {causes+: causes} else {causes+: [causes]},\n          causesType:: hidden.meta.v1.statusCause,\n          // The group attribute of the resource associated with the status StatusReason.\n          group(group):: {group: group},\n          // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n          name(name):: {name: name},\n          // If specified, the time in seconds before the operation should be retried.\n          retryAfterSeconds(retryAfterSeconds):: {retryAfterSeconds: retryAfterSeconds},\n          // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n          uid(uid):: {uid: uid},\n          mixin:: {\n          },\n        },\n        //\n        time:: {\n          new():: {},\n          mixin:: {\n          },\n        },\n        // Event represents a single event to a watched resource.\n        watchEvent:: {\n          new():: {},\n          //\n          type(type):: {type: type},\n          mixin:: {\n          },\n        },\n      },\n    },\n    networking:: {\n      v1:: {\n        local apiVersion = {apiVersion: \"networking/v1\"},\n        // NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.\n        networkPolicyIngressRule:: {\n          new():: {},\n          // List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.\n          from(from):: if std.type(from) == \"array\" then {from+: from} else {from+: [from]},\n          fromType:: hidden.networking.v1.networkPolicyPeer,\n          // List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\n          ports(ports):: if std.type(ports) == \"array\" then {ports+: ports} else {ports+: [ports]},\n          portsType:: hidden.networking.v1.networkPolicyPort,\n          mixin:: {\n          },\n        },\n        // NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.\n        networkPolicyPeer:: {\n          new():: {},\n          mixin:: {\n            // Selects Namespaces using cluster scoped-labels. This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.\n            namespaceSelector:: {\n              local __namespaceSelectorMixin(namespaceSelector) = {namespaceSelector+: namespaceSelector},\n              mixinInstance(namespaceSelector):: __namespaceSelectorMixin(namespaceSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __namespaceSelectorMixin({matchExpressions+: matchExpressions}) else __namespaceSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __namespaceSelectorMixin({matchLabels+: matchLabels}),\n            },\n            namespaceSelectorType:: hidden.meta.v1.labelSelector,\n            // This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.\n            podSelector:: {\n              local __podSelectorMixin(podSelector) = {podSelector+: podSelector},\n              mixinInstance(podSelector):: __podSelectorMixin(podSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __podSelectorMixin({matchExpressions+: matchExpressions}) else __podSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __podSelectorMixin({matchLabels+: matchLabels}),\n            },\n            podSelectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n        // NetworkPolicyPort describes a port to allow traffic on\n        networkPolicyPort:: {\n          new():: {},\n          // The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.\n          port(port):: {port: port},\n          // The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.\n          protocol(protocol):: {protocol: protocol},\n          mixin:: {\n          },\n        },\n        // NetworkPolicySpec provides the specification of a NetworkPolicy\n        networkPolicySpec:: {\n          new():: {},\n          // List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)\n          ingress(ingress):: if std.type(ingress) == \"array\" then {ingress+: ingress} else {ingress+: [ingress]},\n          ingressType:: hidden.networking.v1.networkPolicyIngressRule,\n          mixin:: {\n            // Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\n            podSelector:: {\n              local __podSelectorMixin(podSelector) = {podSelector+: podSelector},\n              mixinInstance(podSelector):: __podSelectorMixin(podSelector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __podSelectorMixin({matchExpressions+: matchExpressions}) else __podSelectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __podSelectorMixin({matchLabels+: matchLabels}),\n            },\n            podSelectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n      },\n    },\n    policy:: {\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"policy/v1beta1\"},\n        // PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.\n        podDisruptionBudgetSpec:: {\n          new():: {},\n          // An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".\n          maxUnavailable(maxUnavailable):: {maxUnavailable: maxUnavailable},\n          // An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".\n          minAvailable(minAvailable):: {minAvailable: minAvailable},\n          mixin:: {\n            // Label query over pods whose evictions are managed by the disruption budget.\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n        // PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.\n        podDisruptionBudgetStatus:: {\n          new():: {},\n          // current number of healthy pods\n          currentHealthy(currentHealthy):: {currentHealthy: currentHealthy},\n          // minimum desired number of healthy pods\n          desiredHealthy(desiredHealthy):: {desiredHealthy: desiredHealthy},\n          // DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.\n          disruptedPods(disruptedPods):: {disruptedPods+: disruptedPods},\n          // Number of pod disruptions that are currently allowed.\n          disruptionsAllowed(disruptionsAllowed):: {disruptionsAllowed: disruptionsAllowed},\n          // total number of pods counted by this disruption budget\n          expectedPods(expectedPods):: {expectedPods: expectedPods},\n          // Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB's object generation.\n          observedGeneration(observedGeneration):: {observedGeneration: observedGeneration},\n          mixin:: {\n          },\n        },\n      },\n    },\n    rbac:: {\n      v1alpha1:: {\n        local apiVersion = {apiVersion: \"rbac/v1alpha1\"},\n        // PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.\n        policyRule:: {\n          new():: {},\n          // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.\n          apiGroups(apiGroups):: if std.type(apiGroups) == \"array\" then {apiGroups+: apiGroups} else {apiGroups+: [apiGroups]},\n          // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.\n          nonResourceUrls(nonResourceUrls):: if std.type(nonResourceUrls) == \"array\" then {nonResourceURLs+: nonResourceUrls} else {nonResourceURLs+: [nonResourceUrls]},\n          // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.\n          resourceNames(resourceNames):: if std.type(resourceNames) == \"array\" then {resourceNames+: resourceNames} else {resourceNames+: [resourceNames]},\n          // Resources is a list of resources this rule applies to.  ResourceAll represents all resources.\n          resources(resources):: if std.type(resources) == \"array\" then {resources+: resources} else {resources+: [resources]},\n          // Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.\n          verbs(verbs):: if std.type(verbs) == \"array\" then {verbs+: verbs} else {verbs+: [verbs]},\n          mixin:: {\n          },\n        },\n        // RoleRef contains information that points to the role being used\n        roleRef:: {\n          new():: {},\n          // APIGroup is the group for the resource being referenced\n          apiGroup(apiGroup):: {apiGroup: apiGroup},\n          // Name is the name of resource being referenced\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.\n        subject:: {\n          new():: {},\n          // Name of the object being referenced.\n          name(name):: {name: name},\n          // Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.\n          namespace(namespace):: {namespace: namespace},\n          mixin:: {\n          },\n        },\n      },\n      v1beta1:: {\n        local apiVersion = {apiVersion: \"rbac/v1beta1\"},\n        // PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.\n        policyRule:: {\n          new():: {},\n          // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.\n          apiGroups(apiGroups):: if std.type(apiGroups) == \"array\" then {apiGroups+: apiGroups} else {apiGroups+: [apiGroups]},\n          // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.\n          nonResourceUrls(nonResourceUrls):: if std.type(nonResourceUrls) == \"array\" then {nonResourceURLs+: nonResourceUrls} else {nonResourceURLs+: [nonResourceUrls]},\n          // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.\n          resourceNames(resourceNames):: if std.type(resourceNames) == \"array\" then {resourceNames+: resourceNames} else {resourceNames+: [resourceNames]},\n          // Resources is a list of resources this rule applies to.  ResourceAll represents all resources.\n          resources(resources):: if std.type(resources) == \"array\" then {resources+: resources} else {resources+: [resources]},\n          // Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.\n          verbs(verbs):: if std.type(verbs) == \"array\" then {verbs+: verbs} else {verbs+: [verbs]},\n          mixin:: {\n          },\n        },\n        // RoleRef contains information that points to the role being used\n        roleRef:: {\n          new():: {},\n          // APIGroup is the group for the resource being referenced\n          apiGroup(apiGroup):: {apiGroup: apiGroup},\n          // Name is the name of resource being referenced\n          name(name):: {name: name},\n          mixin:: {\n          },\n        },\n        // Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.\n        subject:: {\n          new():: {},\n          // APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.\n          apiGroup(apiGroup):: {apiGroup: apiGroup},\n          // Name of the object being referenced.\n          name(name):: {name: name},\n          // Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.\n          namespace(namespace):: {namespace: namespace},\n          mixin:: {\n          },\n        },\n      },\n    },\n    settings:: {\n      v1alpha1:: {\n        local apiVersion = {apiVersion: \"settings/v1alpha1\"},\n        // PodPresetSpec is a description of a pod preset.\n        podPresetSpec:: {\n          new():: {},\n          // Env defines the collection of EnvVar to inject into containers.\n          env(env):: if std.type(env) == \"array\" then {env+: env} else {env+: [env]},\n          // EnvFrom defines the collection of EnvFromSource to inject into containers.\n          envFrom(envFrom):: if std.type(envFrom) == \"array\" then {envFrom+: envFrom} else {envFrom+: [envFrom]},\n          envFromType:: hidden.core.v1.envFromSource,\n          envType:: hidden.core.v1.envVar,\n          // VolumeMounts defines the collection of VolumeMount to inject into containers.\n          volumeMounts(volumeMounts):: if std.type(volumeMounts) == \"array\" then {volumeMounts+: volumeMounts} else {volumeMounts+: [volumeMounts]},\n          volumeMountsType:: hidden.core.v1.volumeMount,\n          // Volumes defines the collection of Volume to inject into the pod.\n          volumes(volumes):: if std.type(volumes) == \"array\" then {volumes+: volumes} else {volumes+: [volumes]},\n          volumesType:: hidden.core.v1.volume,\n          mixin:: {\n            // Selector is a label query over a set of resources, in this case pods. Required.\n            selector:: {\n              local __selectorMixin(selector) = {selector+: selector},\n              mixinInstance(selector):: __selectorMixin(selector),\n              // matchExpressions is a list of label selector requirements. The requirements are ANDed.\n              matchExpressions(matchExpressions):: if std.type(matchExpressions) == \"array\" then __selectorMixin({matchExpressions+: matchExpressions}) else __selectorMixin({matchExpressions+: [matchExpressions]}),\n              matchExpressionsType:: hidden.meta.v1.labelSelectorRequirement,\n              // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n              matchLabels(matchLabels):: __selectorMixin({matchLabels+: matchLabels}),\n            },\n            selectorType:: hidden.meta.v1.labelSelector,\n          },\n        },\n      },\n    },\n  },\n}\n","swagger.json":"{\n  \"swagger\": \"2.0\",\n  \"info\": {\n   \"title\": \"Kubernetes\",\n   \"version\": \"v1.7.0\"\n  },\n  \"paths\": {\n   \"/api/\": {\n    \"get\": {\n     \"description\": \"get available API versions\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core\"\n     ],\n     \"operationId\": \"getCoreAPIVersions\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/api/v1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"getCoreV1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/api/v1/componentstatuses\": {\n    \"get\": {\n     \"description\": \"list objects of kind ComponentStatus\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1ComponentStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ComponentStatusList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ComponentStatus\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/componentstatuses/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ComponentStatus\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1ComponentStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ComponentStatus\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ComponentStatus\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ComponentStatus\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/configmaps\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1ConfigMapForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMapList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/endpoints\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1EndpointsForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EndpointsList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/events\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1EventForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EventList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/limitranges\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1LimitRangeForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRangeList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1Namespace\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NamespaceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1Namespace\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/bindings\": {\n    \"post\": {\n     \"description\": \"create a Binding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Binding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Binding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Binding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/configmaps\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedConfigMap\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMapList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedConfigMap\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMap\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMap\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedConfigMap\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/configmaps/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedConfigMap\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMap\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedConfigMap\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMap\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMap\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedConfigMap\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ConfigMap\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedConfigMap\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMap\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ConfigMap\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/endpoints\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedEndpoints\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EndpointsList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedEndpoints\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Endpoints\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Endpoints\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedEndpoints\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/endpoints/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedEndpoints\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Endpoints\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedEndpoints\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Endpoints\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Endpoints\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedEndpoints\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Endpoints\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedEndpoints\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Endpoints\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Endpoints\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/events\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedEvent\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EventList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create an Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedEvent\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Event\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Event\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedEvent\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/events/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedEvent\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Event\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedEvent\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Event\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Event\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete an Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedEvent\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Event\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedEvent\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Event\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Event\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/limitranges\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedLimitRange\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRangeList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedLimitRange\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRange\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRange\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedLimitRange\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/limitranges/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedLimitRange\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRange\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedLimitRange\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRange\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRange\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedLimitRange\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified LimitRange\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedLimitRange\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRange\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the LimitRange\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/persistentvolumeclaims\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedPersistentVolumeClaim\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedPersistentVolumeClaim\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedPersistentVolumeClaim\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedPersistentVolumeClaim\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedPersistentVolumeClaim\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedPersistentVolumeClaim\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified PersistentVolumeClaim\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedPersistentVolumeClaim\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PersistentVolumeClaim\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedPersistentVolumeClaimStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedPersistentVolumeClaimStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified PersistentVolumeClaim\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedPersistentVolumeClaimStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PersistentVolumeClaim\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedPod\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedPod\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedPod\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedPod\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedPod\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedPod\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Pod\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedPod\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/attach\": {\n    \"get\": {\n     \"description\": \"connect GET requests to attach of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNamespacedPodAttach\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to attach of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNamespacedPodAttach\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"The container in which to execute the command. Defaults to only container if there is only one container in the pod.\",\n      \"name\": \"container\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.\",\n      \"name\": \"stderr\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.\",\n      \"name\": \"stdin\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.\",\n      \"name\": \"stdout\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.\",\n      \"name\": \"tty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/binding\": {\n    \"post\": {\n     \"description\": \"create binding of a Binding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedBindingBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Binding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Binding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Binding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Binding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/eviction\": {\n    \"post\": {\n     \"description\": \"create eviction of an Eviction\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedEvictionEviction\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.Eviction\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.Eviction\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Eviction\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Eviction\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/exec\": {\n    \"get\": {\n     \"description\": \"connect GET requests to exec of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNamespacedPodExec\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to exec of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNamespacedPodExec\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Command is the remote command to execute. argv array. Not executed within a shell.\",\n      \"name\": \"command\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Container in which to execute the command. Defaults to only container if there is only one container in the pod.\",\n      \"name\": \"container\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Redirect the standard error stream of the pod for this call. Defaults to true.\",\n      \"name\": \"stderr\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Redirect the standard input stream of the pod for this call. Defaults to false.\",\n      \"name\": \"stdin\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Redirect the standard output stream of the pod for this call. Defaults to true.\",\n      \"name\": \"stdout\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.\",\n      \"name\": \"tty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/log\": {\n    \"get\": {\n     \"description\": \"read log of the specified Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"text/plain\",\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedPodLog\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"The container for which to stream logs. Defaults to only container if there is one container in the pod.\",\n      \"name\": \"container\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Follow the log stream of the pod. Defaults to false.\",\n      \"name\": \"follow\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.\",\n      \"name\": \"limitBytes\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Return previous terminated container logs. Defaults to false.\",\n      \"name\": \"previous\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.\",\n      \"name\": \"sinceSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime\",\n      \"name\": \"tailLines\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.\",\n      \"name\": \"timestamps\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/portforward\": {\n    \"get\": {\n     \"description\": \"connect GET requests to portforward of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNamespacedPodPortforward\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to portforward of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNamespacedPodPortforward\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"List of ports to forward Required when using WebSockets\",\n      \"name\": \"ports\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/proxy\": {\n    \"get\": {\n     \"description\": \"connect GET requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNamespacedPodProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"put\": {\n     \"description\": \"connect PUT requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PutNamespacedPodProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNamespacedPodProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"connect DELETE requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1DeleteNamespacedPodProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"options\": {\n     \"description\": \"connect OPTIONS requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1OptionsNamespacedPodProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"head\": {\n     \"description\": \"connect HEAD requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1HeadNamespacedPodProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"connect PATCH requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PatchNamespacedPodProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Path is the URL path to use for the current proxy request to pod.\",\n      \"name\": \"path\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}\": {\n    \"get\": {\n     \"description\": \"connect GET requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNamespacedPodProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"put\": {\n     \"description\": \"connect PUT requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PutNamespacedPodProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNamespacedPodProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"connect DELETE requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1DeleteNamespacedPodProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"options\": {\n     \"description\": \"connect OPTIONS requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1OptionsNamespacedPodProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"head\": {\n     \"description\": \"connect HEAD requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1HeadNamespacedPodProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"connect PATCH requests to proxy of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PatchNamespacedPodProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"path to the resource\",\n      \"name\": \"path\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Path is the URL path to use for the current proxy request to pod.\",\n      \"name\": \"path\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/pods/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedPodStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedPodStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Pod\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedPodStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/podtemplates\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedPodTemplate\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedPodTemplate\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplate\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplate\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedPodTemplate\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/podtemplates/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedPodTemplate\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplate\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedPodTemplate\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplate\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplate\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedPodTemplate\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified PodTemplate\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedPodTemplate\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplate\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodTemplate\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/replicationcontrollers\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedReplicationController\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationControllerList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedReplicationController\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedReplicationController\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/replicationcontrollers/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedReplicationController\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedReplicationController\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedReplicationController\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ReplicationController\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedReplicationController\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ReplicationController\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale\": {\n    \"get\": {\n     \"description\": \"read scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedScaleScale\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedScaleScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.Scale\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update scale of the specified Scale\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedScaleScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Scale\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedReplicationControllerStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedReplicationControllerStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified ReplicationController\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedReplicationControllerStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ReplicationController\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/resourcequotas\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedResourceQuota\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuotaList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedResourceQuota\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedResourceQuota\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/resourcequotas/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedResourceQuota\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedResourceQuota\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedResourceQuota\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ResourceQuota\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedResourceQuota\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ResourceQuota\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/resourcequotas/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedResourceQuotaStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedResourceQuotaStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified ResourceQuota\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedResourceQuotaStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ResourceQuota\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/secrets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedSecret\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SecretList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedSecret\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Secret\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Secret\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedSecret\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/secrets/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedSecret\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Secret\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedSecret\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Secret\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Secret\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedSecret\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Secret\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedSecret\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Secret\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Secret\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/serviceaccounts\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedServiceAccount\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccountList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedServiceAccount\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccount\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccount\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNamespacedServiceAccount\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/serviceaccounts/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedServiceAccount\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccount\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedServiceAccount\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccount\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccount\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedServiceAccount\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ServiceAccount\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedServiceAccount\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccount\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ServiceAccount\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/services\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1NamespacedService\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1NamespacedService\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/services/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedService\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedService\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1NamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Service\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedService\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Service\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/services/{name}/proxy\": {\n    \"get\": {\n     \"description\": \"connect GET requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNamespacedServiceProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"put\": {\n     \"description\": \"connect PUT requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PutNamespacedServiceProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNamespacedServiceProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"connect DELETE requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1DeleteNamespacedServiceProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"options\": {\n     \"description\": \"connect OPTIONS requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1OptionsNamespacedServiceProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"head\": {\n     \"description\": \"connect HEAD requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1HeadNamespacedServiceProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"connect PATCH requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PatchNamespacedServiceProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Service\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.\",\n      \"name\": \"path\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}\": {\n    \"get\": {\n     \"description\": \"connect GET requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNamespacedServiceProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"put\": {\n     \"description\": \"connect PUT requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PutNamespacedServiceProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNamespacedServiceProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"connect DELETE requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1DeleteNamespacedServiceProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"options\": {\n     \"description\": \"connect OPTIONS requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1OptionsNamespacedServiceProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"head\": {\n     \"description\": \"connect HEAD requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1HeadNamespacedServiceProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"connect PATCH requests to proxy of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PatchNamespacedServiceProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Service\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"path to the resource\",\n      \"name\": \"path\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.\",\n      \"name\": \"path\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{namespace}/services/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespacedServiceStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespacedServiceStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Service\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespacedServiceStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Service\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1Namespace\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1Namespace\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1Namespace\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Namespace\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1Namespace\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Namespace\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{name}/finalize\": {\n    \"put\": {\n     \"description\": \"replace finalize of the specified Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespaceFinalize\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Namespace\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/namespaces/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NamespaceStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NamespaceStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Namespace\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NamespaceStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Namespace\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/nodes\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1Node\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1Node\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionNode\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/nodes/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1Node\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1Node\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1Node\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Node\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1Node\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Node\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/nodes/{name}/proxy\": {\n    \"get\": {\n     \"description\": \"connect GET requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNodeProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"put\": {\n     \"description\": \"connect PUT requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PutNodeProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNodeProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"connect DELETE requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1DeleteNodeProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"options\": {\n     \"description\": \"connect OPTIONS requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1OptionsNodeProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"head\": {\n     \"description\": \"connect HEAD requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1HeadNodeProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"connect PATCH requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PatchNodeProxy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Node\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Path is the URL path to use for the current proxy request to node.\",\n      \"name\": \"path\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/nodes/{name}/proxy/{path}\": {\n    \"get\": {\n     \"description\": \"connect GET requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1GetNodeProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"put\": {\n     \"description\": \"connect PUT requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PutNodeProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"post\": {\n     \"description\": \"connect POST requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PostNodeProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"connect DELETE requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1DeleteNodeProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"options\": {\n     \"description\": \"connect OPTIONS requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1OptionsNodeProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"head\": {\n     \"description\": \"connect HEAD requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1HeadNodeProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"connect PATCH requests to proxy of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"connectCoreV1PatchNodeProxyWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"connect\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Node\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"path to the resource\",\n      \"name\": \"path\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"Path is the URL path to use for the current proxy request to node.\",\n      \"name\": \"path\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/nodes/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1NodeStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1NodeStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Node\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1NodeStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Node\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/persistentvolumeclaims\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1PersistentVolumeClaimForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/persistentvolumes\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1PersistentVolume\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"createCoreV1PersistentVolume\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1CollectionPersistentVolume\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/persistentvolumes/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1PersistentVolume\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1PersistentVolume\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"deleteCoreV1PersistentVolume\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified PersistentVolume\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1PersistentVolume\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PersistentVolume\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/persistentvolumes/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"readCoreV1PersistentVolumeStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"replaceCoreV1PersistentVolumeStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified PersistentVolume\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"patchCoreV1PersistentVolumeStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PersistentVolume\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/pods\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1PodForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/podtemplates\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1PodTemplateForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/proxy/namespaces/{namespace}/pods/{name}\": {\n    \"get\": {\n     \"description\": \"proxy GET requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1GETNamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"put\": {\n     \"description\": \"proxy PUT requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PUTNamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"proxy POST requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1POSTNamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"proxy DELETE requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1DELETENamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"options\": {\n     \"description\": \"proxy OPTIONS requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1OPTIONSNamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"head\": {\n     \"description\": \"proxy HEAD requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1HEADNamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"proxy PATCH requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PATCHNamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     }\n    ]\n   },\n   \"/api/v1/proxy/namespaces/{namespace}/pods/{name}/{path}\": {\n    \"get\": {\n     \"description\": \"proxy GET requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1GETNamespacedPodWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"put\": {\n     \"description\": \"proxy PUT requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PUTNamespacedPodWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"post\": {\n     \"description\": \"proxy POST requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1POSTNamespacedPodWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"proxy DELETE requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1DELETENamespacedPodWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"options\": {\n     \"description\": \"proxy OPTIONS requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1OPTIONSNamespacedPodWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"head\": {\n     \"description\": \"proxy HEAD requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1HEADNamespacedPodWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"proxy PATCH requests to Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PATCHNamespacedPodWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"path to the resource\",\n      \"name\": \"path\",\n      \"in\": \"path\",\n      \"required\": true\n     }\n    ]\n   },\n   \"/api/v1/proxy/namespaces/{namespace}/services/{name}\": {\n    \"get\": {\n     \"description\": \"proxy GET requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1GETNamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"put\": {\n     \"description\": \"proxy PUT requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PUTNamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"post\": {\n     \"description\": \"proxy POST requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1POSTNamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"proxy DELETE requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1DELETENamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"options\": {\n     \"description\": \"proxy OPTIONS requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1OPTIONSNamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"head\": {\n     \"description\": \"proxy HEAD requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1HEADNamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"proxy PATCH requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PATCHNamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Service\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     }\n    ]\n   },\n   \"/api/v1/proxy/namespaces/{namespace}/services/{name}/{path}\": {\n    \"get\": {\n     \"description\": \"proxy GET requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1GETNamespacedServiceWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"put\": {\n     \"description\": \"proxy PUT requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PUTNamespacedServiceWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"post\": {\n     \"description\": \"proxy POST requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1POSTNamespacedServiceWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"proxy DELETE requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1DELETENamespacedServiceWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"options\": {\n     \"description\": \"proxy OPTIONS requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1OPTIONSNamespacedServiceWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"head\": {\n     \"description\": \"proxy HEAD requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1HEADNamespacedServiceWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"proxy PATCH requests to Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PATCHNamespacedServiceWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Service\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"path to the resource\",\n      \"name\": \"path\",\n      \"in\": \"path\",\n      \"required\": true\n     }\n    ]\n   },\n   \"/api/v1/proxy/nodes/{name}\": {\n    \"get\": {\n     \"description\": \"proxy GET requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1GETNode\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"put\": {\n     \"description\": \"proxy PUT requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PUTNode\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"post\": {\n     \"description\": \"proxy POST requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1POSTNode\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"proxy DELETE requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1DELETENode\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"options\": {\n     \"description\": \"proxy OPTIONS requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1OPTIONSNode\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"head\": {\n     \"description\": \"proxy HEAD requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1HEADNode\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"proxy PATCH requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PATCHNode\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Node\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     }\n    ]\n   },\n   \"/api/v1/proxy/nodes/{name}/{path}\": {\n    \"get\": {\n     \"description\": \"proxy GET requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1GETNodeWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"put\": {\n     \"description\": \"proxy PUT requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PUTNodeWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"post\": {\n     \"description\": \"proxy POST requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1POSTNodeWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"proxy DELETE requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1DELETENodeWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"options\": {\n     \"description\": \"proxy OPTIONS requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1OPTIONSNodeWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"head\": {\n     \"description\": \"proxy HEAD requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1HEADNodeWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"proxy PATCH requests to Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"*/*\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"proxyCoreV1PATCHNodeWithPath\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"type\": \"string\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"proxy\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Node\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"path to the resource\",\n      \"name\": \"path\",\n      \"in\": \"path\",\n      \"required\": true\n     }\n    ]\n   },\n   \"/api/v1/replicationcontrollers\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1ReplicationControllerForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationControllerList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/resourcequotas\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1ResourceQuotaForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuotaList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/secrets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1SecretForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SecretList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/serviceaccounts\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1ServiceAccountForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccountList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/services\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"listCoreV1ServiceForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/configmaps\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1ConfigMapListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/endpoints\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1EndpointsListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/events\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1EventListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/limitranges\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1LimitRangeListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespaceList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/configmaps\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedConfigMapList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/configmaps/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ConfigMap\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedConfigMap\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ConfigMap\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/endpoints\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedEndpointsList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/endpoints/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Endpoints\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedEndpoints\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Endpoints\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/events\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedEventList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/events/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Event\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedEvent\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Event\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/limitranges\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedLimitRangeList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/limitranges/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind LimitRange\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedLimitRange\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the LimitRange\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedPersistentVolumeClaimList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedPersistentVolumeClaim\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PersistentVolumeClaim\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/pods\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedPodList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/pods/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedPod\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Pod\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/podtemplates\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedPodTemplateList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/podtemplates/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedPodTemplate\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodTemplate\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/replicationcontrollers\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedReplicationControllerList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedReplicationController\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ReplicationController\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/resourcequotas\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedResourceQuotaList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedResourceQuota\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ResourceQuota\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/secrets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedSecretList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/secrets/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedSecret\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Secret\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/serviceaccounts\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedServiceAccountList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedServiceAccount\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ServiceAccount\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/services\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedServiceList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{namespace}/services/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NamespacedService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Service\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/namespaces/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Namespace\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1Namespace\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Namespace\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/nodes\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1NodeList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/nodes/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Node\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1Node\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Node\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/persistentvolumeclaims\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PersistentVolumeClaim\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1PersistentVolumeClaimListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/persistentvolumes\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1PersistentVolumeList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/persistentvolumes/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind PersistentVolume\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1PersistentVolume\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PersistentVolume\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/pods\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Pod\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1PodListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/podtemplates\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PodTemplate\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1PodTemplateListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/replicationcontrollers\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ReplicationController\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1ReplicationControllerListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/resourcequotas\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ResourceQuota\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1ResourceQuotaListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/secrets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Secret\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1SecretListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/serviceaccounts\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ServiceAccount\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1ServiceAccountListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/api/v1/watch/services\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Service\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"core_v1\"\n     ],\n     \"operationId\": \"watchCoreV1ServiceListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/\": {\n    \"get\": {\n     \"description\": \"get available API versions\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apis\"\n     ],\n     \"operationId\": \"getAPIVersions\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/admissionregistration.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration\"\n     ],\n     \"operationId\": \"getAdmissionregistrationAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"getAdmissionregistrationV1alpha1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/externaladmissionhookconfigurations\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"listAdmissionregistrationV1alpha1ExternalAdmissionHookConfiguration\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfigurationList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create an ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"createAdmissionregistrationV1alpha1ExternalAdmissionHookConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"deleteAdmissionregistrationV1alpha1CollectionExternalAdmissionHookConfiguration\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/externaladmissionhookconfigurations/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"readAdmissionregistrationV1alpha1ExternalAdmissionHookConfiguration\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"replaceAdmissionregistrationV1alpha1ExternalAdmissionHookConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete an ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"deleteAdmissionregistrationV1alpha1ExternalAdmissionHookConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"patchAdmissionregistrationV1alpha1ExternalAdmissionHookConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ExternalAdmissionHookConfiguration\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"listAdmissionregistrationV1alpha1InitializerConfiguration\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfigurationList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create an InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"createAdmissionregistrationV1alpha1InitializerConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"deleteAdmissionregistrationV1alpha1CollectionInitializerConfiguration\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/initializerconfigurations/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"readAdmissionregistrationV1alpha1InitializerConfiguration\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"replaceAdmissionregistrationV1alpha1InitializerConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete an InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"deleteAdmissionregistrationV1alpha1InitializerConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified InitializerConfiguration\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"patchAdmissionregistrationV1alpha1InitializerConfiguration\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the InitializerConfiguration\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/watch/externaladmissionhookconfigurations\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"watchAdmissionregistrationV1alpha1ExternalAdmissionHookConfigurationList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/watch/externaladmissionhookconfigurations/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ExternalAdmissionHookConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"watchAdmissionregistrationV1alpha1ExternalAdmissionHookConfiguration\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ExternalAdmissionHookConfiguration\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/watch/initializerconfigurations\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"watchAdmissionregistrationV1alpha1InitializerConfigurationList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/admissionregistration.k8s.io/v1alpha1/watch/initializerconfigurations/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind InitializerConfiguration\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"admissionregistration_v1alpha1\"\n     ],\n     \"operationId\": \"watchAdmissionregistrationV1alpha1InitializerConfiguration\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the InitializerConfiguration\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apiregistration.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration\"\n     ],\n     \"operationId\": \"getApiregistrationAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/apiregistration.k8s.io/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"getApiregistrationV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/apiregistration.k8s.io/v1beta1/apiservices\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"listApiregistrationV1beta1APIService\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create an APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"createApiregistrationV1beta1APIService\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"deleteApiregistrationV1beta1CollectionAPIService\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"readApiregistrationV1beta1APIService\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"replaceApiregistrationV1beta1APIService\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete an APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"deleteApiregistrationV1beta1APIService\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified APIService\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"patchApiregistrationV1beta1APIService\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the APIService\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status\": {\n    \"put\": {\n     \"description\": \"replace status of the specified APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"replaceApiregistrationV1beta1APIServiceStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the APIService\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apiregistration.k8s.io/v1beta1/watch/apiservices\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"watchApiregistrationV1beta1APIServiceList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apiregistration.k8s.io/v1beta1/watch/apiservices/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind APIService\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apiregistration_v1beta1\"\n     ],\n     \"operationId\": \"watchApiregistrationV1beta1APIService\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apiregistration.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"APIService\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the APIService\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps\"\n     ],\n     \"operationId\": \"getAppsAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/apps/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"getAppsV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/apps/v1beta1/controllerrevisions\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"listAppsV1beta1ControllerRevisionForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevisionList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/deployments\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"listAppsV1beta1DeploymentForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"listAppsV1beta1NamespacedControllerRevision\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevisionList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"createAppsV1beta1NamespacedControllerRevision\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"deleteAppsV1beta1CollectionNamespacedControllerRevision\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"readAppsV1beta1NamespacedControllerRevision\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"replaceAppsV1beta1NamespacedControllerRevision\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"deleteAppsV1beta1NamespacedControllerRevision\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ControllerRevision\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"patchAppsV1beta1NamespacedControllerRevision\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ControllerRevision\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/deployments\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"listAppsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"createAppsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"deleteAppsV1beta1CollectionNamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"readAppsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"replaceAppsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"deleteAppsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Deployment\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"patchAppsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Deployment\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback\": {\n    \"post\": {\n     \"description\": \"create rollback of a DeploymentRollback\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"createAppsV1beta1NamespacedDeploymentRollbackRollback\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentRollback\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentRollback\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DeploymentRollback\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the DeploymentRollback\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale\": {\n    \"get\": {\n     \"description\": \"read scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"readAppsV1beta1NamespacedScaleScale\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"replaceAppsV1beta1NamespacedScaleScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Scale\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update scale of the specified Scale\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"patchAppsV1beta1NamespacedScaleScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Scale\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"readAppsV1beta1NamespacedDeploymentStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"replaceAppsV1beta1NamespacedDeploymentStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Deployment\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"patchAppsV1beta1NamespacedDeploymentStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Deployment\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/statefulsets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"listAppsV1beta1NamespacedStatefulSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"createAppsV1beta1NamespacedStatefulSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"deleteAppsV1beta1CollectionNamespacedStatefulSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"readAppsV1beta1NamespacedStatefulSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"replaceAppsV1beta1NamespacedStatefulSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"deleteAppsV1beta1NamespacedStatefulSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified StatefulSet\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"patchAppsV1beta1NamespacedStatefulSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the StatefulSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"readAppsV1beta1NamespacedStatefulSetStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"replaceAppsV1beta1NamespacedStatefulSetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified StatefulSet\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"patchAppsV1beta1NamespacedStatefulSetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the StatefulSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/statefulsets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"listAppsV1beta1StatefulSetForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/controllerrevisions\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1ControllerRevisionListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/deployments\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1DeploymentListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1NamespacedControllerRevisionList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ControllerRevision\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1NamespacedControllerRevision\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ControllerRevision\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1NamespacedDeploymentList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1NamespacedDeployment\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Deployment\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1NamespacedStatefulSetList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1NamespacedStatefulSet\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the StatefulSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/apps/v1beta1/watch/statefulsets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of StatefulSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"apps_v1beta1\"\n     ],\n     \"operationId\": \"watchAppsV1beta1StatefulSetListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authentication.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authentication\"\n     ],\n     \"operationId\": \"getAuthenticationAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/authentication.k8s.io/v1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authentication_v1\"\n     ],\n     \"operationId\": \"getAuthenticationV1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/authentication.k8s.io/v1/tokenreviews\": {\n    \"post\": {\n     \"description\": \"create a TokenReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authentication_v1\"\n     ],\n     \"operationId\": \"createAuthenticationV1TokenReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1.TokenReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1.TokenReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authentication.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"TokenReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authentication.k8s.io/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authentication_v1beta1\"\n     ],\n     \"operationId\": \"getAuthenticationV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/authentication.k8s.io/v1beta1/tokenreviews\": {\n    \"post\": {\n     \"description\": \"create a TokenReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authentication_v1beta1\"\n     ],\n     \"operationId\": \"createAuthenticationV1beta1TokenReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1beta1.TokenReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1beta1.TokenReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authentication.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"TokenReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authorization.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization\"\n     ],\n     \"operationId\": \"getAuthorizationAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/authorization.k8s.io/v1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1\"\n     ],\n     \"operationId\": \"getAuthorizationV1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews\": {\n    \"post\": {\n     \"description\": \"create a LocalSubjectAccessReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1\"\n     ],\n     \"operationId\": \"createAuthorizationV1NamespacedLocalSubjectAccessReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.LocalSubjectAccessReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.LocalSubjectAccessReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"LocalSubjectAccessReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authorization.k8s.io/v1/selfsubjectaccessreviews\": {\n    \"post\": {\n     \"description\": \"create a SelfSubjectAccessReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1\"\n     ],\n     \"operationId\": \"createAuthorizationV1SelfSubjectAccessReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SelfSubjectAccessReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SelfSubjectAccessReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"SelfSubjectAccessReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authorization.k8s.io/v1/subjectaccessreviews\": {\n    \"post\": {\n     \"description\": \"create a SubjectAccessReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1\"\n     ],\n     \"operationId\": \"createAuthorizationV1SubjectAccessReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"SubjectAccessReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authorization.k8s.io/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1beta1\"\n     ],\n     \"operationId\": \"getAuthorizationV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews\": {\n    \"post\": {\n     \"description\": \"create a LocalSubjectAccessReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1beta1\"\n     ],\n     \"operationId\": \"createAuthorizationV1beta1NamespacedLocalSubjectAccessReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.LocalSubjectAccessReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.LocalSubjectAccessReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"LocalSubjectAccessReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews\": {\n    \"post\": {\n     \"description\": \"create a SelfSubjectAccessReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1beta1\"\n     ],\n     \"operationId\": \"createAuthorizationV1beta1SelfSubjectAccessReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SelfSubjectAccessReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SelfSubjectAccessReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"SelfSubjectAccessReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/authorization.k8s.io/v1beta1/subjectaccessreviews\": {\n    \"post\": {\n     \"description\": \"create a SubjectAccessReview\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"authorization_v1beta1\"\n     ],\n     \"operationId\": \"createAuthorizationV1beta1SubjectAccessReview\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReview\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReview\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"SubjectAccessReview\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling\"\n     ],\n     \"operationId\": \"getAutoscalingAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/autoscaling/v1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"getAutoscalingV1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/autoscaling/v1/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"listAutoscalingV1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"createAutoscalingV1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"readAutoscalingV1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"replaceAutoscalingV1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"deleteAutoscalingV1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"patchAutoscalingV1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the HorizontalPodAutoscaler\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the HorizontalPodAutoscaler\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v1/watch/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"watchAutoscalingV1NamespacedHorizontalPodAutoscalerList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v1\"\n     ],\n     \"operationId\": \"watchAutoscalingV1NamespacedHorizontalPodAutoscaler\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the HorizontalPodAutoscaler\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v2alpha1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"getAutoscalingV2alpha1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/autoscaling/v2alpha1/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"listAutoscalingV2alpha1HorizontalPodAutoscalerForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v2alpha1/namespaces/{namespace}/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"listAutoscalingV2alpha1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"createAutoscalingV2alpha1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"deleteAutoscalingV2alpha1CollectionNamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v2alpha1/namespaces/{namespace}/horizontalpodautoscalers/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"readAutoscalingV2alpha1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"replaceAutoscalingV2alpha1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"deleteAutoscalingV2alpha1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"patchAutoscalingV2alpha1NamespacedHorizontalPodAutoscaler\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the HorizontalPodAutoscaler\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v2alpha1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"readAutoscalingV2alpha1NamespacedHorizontalPodAutoscalerStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"replaceAutoscalingV2alpha1NamespacedHorizontalPodAutoscalerStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"patchAutoscalingV2alpha1NamespacedHorizontalPodAutoscalerStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the HorizontalPodAutoscaler\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v2alpha1/watch/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"watchAutoscalingV2alpha1HorizontalPodAutoscalerListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v2alpha1/watch/namespaces/{namespace}/horizontalpodautoscalers\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"watchAutoscalingV2alpha1NamespacedHorizontalPodAutoscalerList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/autoscaling/v2alpha1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind HorizontalPodAutoscaler\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"autoscaling_v2alpha1\"\n     ],\n     \"operationId\": \"watchAutoscalingV2alpha1NamespacedHorizontalPodAutoscaler\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the HorizontalPodAutoscaler\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch\"\n     ],\n     \"operationId\": \"getBatchAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/batch/v1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"getBatchV1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/batch/v1/jobs\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"listBatchV1JobForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.JobList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v1/namespaces/{namespace}/jobs\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"listBatchV1NamespacedJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.JobList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"createBatchV1NamespacedJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"deleteBatchV1CollectionNamespacedJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v1/namespaces/{namespace}/jobs/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"readBatchV1NamespacedJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"replaceBatchV1NamespacedJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"deleteBatchV1NamespacedJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Job\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"patchBatchV1NamespacedJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Job\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"readBatchV1NamespacedJobStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"replaceBatchV1NamespacedJobStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Job\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"patchBatchV1NamespacedJobStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Job\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v1/watch/jobs\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"watchBatchV1JobListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v1/watch/namespaces/{namespace}/jobs\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"watchBatchV1NamespacedJobList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Job\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v1\"\n     ],\n     \"operationId\": \"watchBatchV1NamespacedJob\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Job\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"getBatchV2alpha1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/batch/v2alpha1/cronjobs\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"listBatchV2alpha1CronJobForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"listBatchV2alpha1NamespacedCronJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"createBatchV2alpha1NamespacedCronJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"deleteBatchV2alpha1CollectionNamespacedCronJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"readBatchV2alpha1NamespacedCronJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"replaceBatchV2alpha1NamespacedCronJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"deleteBatchV2alpha1NamespacedCronJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified CronJob\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"patchBatchV2alpha1NamespacedCronJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the CronJob\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"readBatchV2alpha1NamespacedCronJobStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"replaceBatchV2alpha1NamespacedCronJobStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified CronJob\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"patchBatchV2alpha1NamespacedCronJobStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the CronJob\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"listBatchV2alpha1NamespacedScheduledJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"createBatchV2alpha1NamespacedScheduledJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"deleteBatchV2alpha1CollectionNamespacedScheduledJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"readBatchV2alpha1NamespacedScheduledJob\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"replaceBatchV2alpha1NamespacedScheduledJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"deleteBatchV2alpha1NamespacedScheduledJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ScheduledJob\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"patchBatchV2alpha1NamespacedScheduledJob\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ScheduledJob\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"readBatchV2alpha1NamespacedScheduledJobStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"replaceBatchV2alpha1NamespacedScheduledJobStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified ScheduledJob\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"patchBatchV2alpha1NamespacedScheduledJobStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ScheduledJob\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/scheduledjobs\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"listBatchV2alpha1ScheduledJobForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/watch/cronjobs\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"watchBatchV2alpha1CronJobListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"watchBatchV2alpha1NamespacedCronJobList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind CronJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"watchBatchV2alpha1NamespacedCronJob\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the CronJob\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/watch/namespaces/{namespace}/scheduledjobs\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"watchBatchV2alpha1NamespacedScheduledJobList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/watch/namespaces/{namespace}/scheduledjobs/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"watchBatchV2alpha1NamespacedScheduledJob\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ScheduledJob\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/batch/v2alpha1/watch/scheduledjobs\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ScheduledJob\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"batch_v2alpha1\"\n     ],\n     \"operationId\": \"watchBatchV2alpha1ScheduledJobListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/certificates.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates\"\n     ],\n     \"operationId\": \"getCertificatesAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/certificates.k8s.io/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"getCertificatesV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"listCertificatesV1beta1CertificateSigningRequest\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"createCertificatesV1beta1CertificateSigningRequest\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"deleteCertificatesV1beta1CollectionCertificateSigningRequest\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"readCertificatesV1beta1CertificateSigningRequest\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"replaceCertificatesV1beta1CertificateSigningRequest\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"deleteCertificatesV1beta1CertificateSigningRequest\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified CertificateSigningRequest\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"patchCertificatesV1beta1CertificateSigningRequest\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the CertificateSigningRequest\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval\": {\n    \"put\": {\n     \"description\": \"replace approval of the specified CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"replaceCertificatesV1beta1CertificateSigningRequestApproval\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the CertificateSigningRequest\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status\": {\n    \"put\": {\n     \"description\": \"replace status of the specified CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"replaceCertificatesV1beta1CertificateSigningRequestStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the CertificateSigningRequest\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"watchCertificatesV1beta1CertificateSigningRequestList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind CertificateSigningRequest\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"certificates_v1beta1\"\n     ],\n     \"operationId\": \"watchCertificatesV1beta1CertificateSigningRequest\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the CertificateSigningRequest\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions\"\n     ],\n     \"operationId\": \"getExtensionsAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/extensions/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"getExtensionsV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/extensions/v1beta1/daemonsets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1DaemonSetForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/deployments\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1DeploymentForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/ingresses\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1IngressForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1NamespacedDaemonSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1NamespacedDaemonSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1CollectionNamespacedDaemonSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedDaemonSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedDaemonSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1NamespacedDaemonSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified DaemonSet\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedDaemonSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the DaemonSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedDaemonSetStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedDaemonSetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified DaemonSet\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedDaemonSetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the DaemonSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/deployments\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1CollectionNamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Deployment\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedDeployment\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Deployment\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback\": {\n    \"post\": {\n     \"description\": \"create rollback of a DeploymentRollback\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1NamespacedDeploymentRollbackRollback\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentRollback\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentRollback\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DeploymentRollback\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the DeploymentRollback\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale\": {\n    \"get\": {\n     \"description\": \"read scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedDeploymentsScale\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedDeploymentsScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update scale of the specified Scale\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedDeploymentsScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Scale\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedDeploymentStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedDeploymentStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Deployment\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedDeploymentStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Deployment\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/ingresses\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1NamespacedIngress\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create an Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1NamespacedIngress\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1CollectionNamespacedIngress\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedIngress\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedIngress\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete an Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1NamespacedIngress\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Ingress\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedIngress\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Ingress\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedIngressStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedIngressStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified Ingress\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedIngressStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Ingress\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified NetworkPolicy\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the NetworkPolicy\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1NamespacedReplicaSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1NamespacedReplicaSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1CollectionNamespacedReplicaSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedReplicaSet\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedReplicaSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1NamespacedReplicaSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ReplicaSet\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedReplicaSet\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ReplicaSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale\": {\n    \"get\": {\n     \"description\": \"read scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedReplicasetsScale\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedReplicasetsScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update scale of the specified Scale\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedReplicasetsScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Scale\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedReplicaSetStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedReplicaSetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified ReplicaSet\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedReplicaSetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ReplicaSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale\": {\n    \"get\": {\n     \"description\": \"read scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1NamespacedReplicationcontrollersScale\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace scale of the specified Scale\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1NamespacedReplicationcontrollersScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update scale of the specified Scale\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1NamespacedReplicationcontrollersScale\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Scale\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/networkpolicies\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1NetworkPolicyForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/podsecuritypolicies\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1PodSecurityPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicyList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1PodSecurityPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1CollectionPodSecurityPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/podsecuritypolicies/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1PodSecurityPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1PodSecurityPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1PodSecurityPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified PodSecurityPolicy\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1PodSecurityPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodSecurityPolicy\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/replicasets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1ReplicaSetForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/thirdpartyresources\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"listExtensionsV1beta1ThirdPartyResource\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"createExtensionsV1beta1ThirdPartyResource\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1CollectionThirdPartyResource\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/thirdpartyresources/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"readExtensionsV1beta1ThirdPartyResource\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"replaceExtensionsV1beta1ThirdPartyResource\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"deleteExtensionsV1beta1ThirdPartyResource\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ThirdPartyResource\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"patchExtensionsV1beta1ThirdPartyResource\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ThirdPartyResource\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/daemonsets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1DaemonSetListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/deployments\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1DeploymentListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/ingresses\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1IngressListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedDaemonSetList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind DaemonSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedDaemonSet\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the DaemonSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedDeploymentList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Deployment\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedDeployment\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Deployment\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedIngressList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Ingress\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedIngress\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Ingress\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedNetworkPolicyList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedNetworkPolicy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the NetworkPolicy\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedReplicaSetList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NamespacedReplicaSet\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ReplicaSet\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/networkpolicies\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1NetworkPolicyListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/podsecuritypolicies\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1PodSecurityPolicyList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind PodSecurityPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1PodSecurityPolicy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodSecurityPolicy\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/replicasets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ReplicaSet\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1ReplicaSetListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/thirdpartyresources\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1ThirdPartyResourceList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/extensions/v1beta1/watch/thirdpartyresources/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ThirdPartyResource\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"extensions_v1beta1\"\n     ],\n     \"operationId\": \"watchExtensionsV1beta1ThirdPartyResource\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ThirdPartyResource\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/networking.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking\"\n     ],\n     \"operationId\": \"getNetworkingAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/networking.k8s.io/v1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"getNetworkingV1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"listNetworkingV1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"createNetworkingV1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"deleteNetworkingV1CollectionNamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"readNetworkingV1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"replaceNetworkingV1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"deleteNetworkingV1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified NetworkPolicy\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"patchNetworkingV1NamespacedNetworkPolicy\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the NetworkPolicy\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/networking.k8s.io/v1/networkpolicies\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"listNetworkingV1NetworkPolicyForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"watchNetworkingV1NamespacedNetworkPolicyList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"watchNetworkingV1NamespacedNetworkPolicy\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the NetworkPolicy\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/networking.k8s.io/v1/watch/networkpolicies\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of NetworkPolicy\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"networking_v1\"\n     ],\n     \"operationId\": \"watchNetworkingV1NetworkPolicyListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/policy/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy\"\n     ],\n     \"operationId\": \"getPolicyAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/policy/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"getPolicyV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"listPolicyV1beta1NamespacedPodDisruptionBudget\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudgetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"createPolicyV1beta1NamespacedPodDisruptionBudget\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"readPolicyV1beta1NamespacedPodDisruptionBudget\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"replacePolicyV1beta1NamespacedPodDisruptionBudget\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"deletePolicyV1beta1NamespacedPodDisruptionBudget\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified PodDisruptionBudget\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"patchPolicyV1beta1NamespacedPodDisruptionBudget\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodDisruptionBudget\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status\": {\n    \"get\": {\n     \"description\": \"read status of the specified PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"readPolicyV1beta1NamespacedPodDisruptionBudgetStatus\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace status of the specified PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update status of the specified PodDisruptionBudget\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodDisruptionBudget\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/policy/v1beta1/poddisruptionbudgets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"listPolicyV1beta1PodDisruptionBudgetForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudgetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"watchPolicyV1beta1NamespacedPodDisruptionBudgetList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"watchPolicyV1beta1NamespacedPodDisruptionBudget\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodDisruptionBudget\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/policy/v1beta1/watch/poddisruptionbudgets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PodDisruptionBudget\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"policy_v1beta1\"\n     ],\n     \"operationId\": \"watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization\"\n     ],\n     \"operationId\": \"getRbacAuthorizationAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"getRbacAuthorizationV1alpha1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1alpha1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBindingList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1alpha1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1alpha1ClusterRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1alpha1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ClusterRoleBinding\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1alpha1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1alpha1ClusterRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1alpha1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1CollectionClusterRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1alpha1ClusterRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1alpha1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ClusterRole\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1alpha1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRole\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1alpha1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBindingList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1alpha1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1alpha1NamespacedRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1alpha1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified RoleBinding\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1alpha1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the RoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1alpha1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1alpha1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1CollectionNamespacedRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1alpha1NamespacedRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1alpha1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1alpha1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Role\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1alpha1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Role\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBindingList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/roles\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1alpha1RoleForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1ClusterRoleBindingList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1ClusterRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1ClusterRoleList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1ClusterRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRole\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1NamespacedRoleBindingList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1NamespacedRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the RoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1NamespacedRoleList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1NamespacedRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Role\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1alpha1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1alpha1RoleListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"getRbacAuthorizationV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1beta1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBindingList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1beta1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1beta1ClusterRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1beta1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ClusterRoleBinding\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1beta1ClusterRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/clusterroles\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1beta1ClusterRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1beta1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1CollectionClusterRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1beta1ClusterRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1beta1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified ClusterRole\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1beta1ClusterRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRole\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1beta1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBindingList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1beta1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1beta1NamespacedRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1beta1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified RoleBinding\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1beta1NamespacedRoleBinding\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the RoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1beta1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"createRbacAuthorizationV1beta1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1CollectionNamespacedRole\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"readRbacAuthorizationV1beta1NamespacedRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"replaceRbacAuthorizationV1beta1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"deleteRbacAuthorizationV1beta1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified Role\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"patchRbacAuthorizationV1beta1NamespacedRole\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Role\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/rolebindings\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1beta1RoleBindingForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBindingList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/roles\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"listRbacAuthorizationV1beta1RoleForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1ClusterRoleBindingList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ClusterRoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1ClusterRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1ClusterRoleList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind ClusterRole\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1ClusterRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the ClusterRole\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1NamespacedRoleBindingList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1NamespacedRoleBinding\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the RoleBinding\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1NamespacedRoleList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1NamespacedRole\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the Role\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of RoleBinding\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/rbac.authorization.k8s.io/v1beta1/watch/roles\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of Role\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"rbacAuthorization_v1beta1\"\n     ],\n     \"operationId\": \"watchRbacAuthorizationV1beta1RoleListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/settings.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings\"\n     ],\n     \"operationId\": \"getSettingsAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/settings.k8s.io/v1alpha1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"getSettingsV1alpha1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"listSettingsV1alpha1NamespacedPodPreset\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPresetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"createSettingsV1alpha1NamespacedPodPreset\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"deleteSettingsV1alpha1CollectionNamespacedPodPreset\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"readSettingsV1alpha1NamespacedPodPreset\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"replaceSettingsV1alpha1NamespacedPodPreset\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"deleteSettingsV1alpha1NamespacedPodPreset\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified PodPreset\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"patchSettingsV1alpha1NamespacedPodPreset\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodPreset\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/settings.k8s.io/v1alpha1/podpresets\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"listSettingsV1alpha1PodPresetForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPresetList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"watchSettingsV1alpha1NamespacedPodPresetList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"watchSettingsV1alpha1NamespacedPodPreset\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the PodPreset\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"object name and auth scope, such as for teams and projects\",\n      \"name\": \"namespace\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/settings.k8s.io/v1alpha1/watch/podpresets\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of PodPreset\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"settings_v1alpha1\"\n     ],\n     \"operationId\": \"watchSettingsV1alpha1PodPresetListForAllNamespaces\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/\": {\n    \"get\": {\n     \"description\": \"get information of a group\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage\"\n     ],\n     \"operationId\": \"getStorageAPIGroup\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/storage.k8s.io/v1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"getStorageV1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/storage.k8s.io/v1/storageclasses\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"listStorageV1StorageClass\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClassList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"createStorageV1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"deleteStorageV1CollectionStorageClass\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/v1/storageclasses/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"readStorageV1StorageClass\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"replaceStorageV1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"deleteStorageV1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified StorageClass\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"patchStorageV1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the StorageClass\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/v1/watch/storageclasses\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"watchStorageV1StorageClassList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/v1/watch/storageclasses/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1\"\n     ],\n     \"operationId\": \"watchStorageV1StorageClass\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the StorageClass\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/v1beta1/\": {\n    \"get\": {\n     \"description\": \"get available resources\",\n     \"consumes\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"getStorageV1beta1APIResources\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/apis/storage.k8s.io/v1beta1/storageclasses\": {\n    \"get\": {\n     \"description\": \"list or watch objects of kind StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"listStorageV1beta1StorageClass\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClassList\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"list\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"post\": {\n     \"description\": \"create a StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"createStorageV1beta1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"post\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete collection of StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"deleteStorageV1beta1CollectionStorageClass\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n       \"name\": \"fieldSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"If true, partially initialized resources are included in the response.\",\n       \"name\": \"includeUninitialized\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n       \"name\": \"labelSelector\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n       \"name\": \"resourceVersion\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"Timeout for the list/watch call.\",\n       \"name\": \"timeoutSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n       \"name\": \"watch\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"deletecollection\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/v1beta1/storageclasses/{name}\": {\n    \"get\": {\n     \"description\": \"read the specified StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"readStorageV1beta1StorageClass\",\n     \"parameters\": [\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.\",\n       \"name\": \"exact\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Should this value be exported.  Export strips fields that a user can not specify.\",\n       \"name\": \"export\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"get\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"put\": {\n     \"description\": \"replace the specified StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"replaceStorageV1beta1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"put\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"delete\": {\n     \"description\": \"delete a StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"deleteStorageV1beta1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n       }\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"integer\",\n       \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n       \"name\": \"gracePeriodSeconds\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"boolean\",\n       \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n       \"name\": \"orphanDependents\",\n       \"in\": \"query\"\n      },\n      {\n       \"uniqueItems\": true,\n       \"type\": \"string\",\n       \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n       \"name\": \"propagationPolicy\",\n       \"in\": \"query\"\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"delete\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"patch\": {\n     \"description\": \"partially update the specified StorageClass\",\n     \"consumes\": [\n      \"application/json-patch+json\",\n      \"application/merge-patch+json\",\n      \"application/strategic-merge-patch+json\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"patchStorageV1beta1StorageClass\",\n     \"parameters\": [\n      {\n       \"name\": \"body\",\n       \"in\": \"body\",\n       \"required\": true,\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch\"\n       }\n      }\n     ],\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"patch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the StorageClass\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/v1beta1/watch/storageclasses\": {\n    \"get\": {\n     \"description\": \"watch individual changes to a list of StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"watchStorageV1beta1StorageClassList\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watchlist\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}\": {\n    \"get\": {\n     \"description\": \"watch changes to an object of kind StorageClass\",\n     \"consumes\": [\n      \"*/*\"\n     ],\n     \"produces\": [\n      \"application/json\",\n      \"application/yaml\",\n      \"application/vnd.kubernetes.protobuf\",\n      \"application/json;stream=watch\",\n      \"application/vnd.kubernetes.protobuf;stream=watch\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"storage_v1beta1\"\n     ],\n     \"operationId\": \"watchStorageV1beta1StorageClass\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     },\n     \"x-kubernetes-action\": \"watch\",\n     \"x-kubernetes-group-version-kind\": {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their fields. Defaults to everything.\",\n      \"name\": \"fieldSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"If true, partially initialized resources are included in the response.\",\n      \"name\": \"includeUninitialized\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"A selector to restrict the list of returned objects by their labels. Defaults to everything.\",\n      \"name\": \"labelSelector\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"name of the StorageClass\",\n      \"name\": \"name\",\n      \"in\": \"path\",\n      \"required\": true\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"If 'true', then the output is pretty printed.\",\n      \"name\": \"pretty\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.\",\n      \"name\": \"resourceVersion\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"integer\",\n      \"description\": \"Timeout for the list/watch call.\",\n      \"name\": \"timeoutSeconds\",\n      \"in\": \"query\"\n     },\n     {\n      \"uniqueItems\": true,\n      \"type\": \"boolean\",\n      \"description\": \"Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.\",\n      \"name\": \"watch\",\n      \"in\": \"query\"\n     }\n    ]\n   },\n   \"/logs/\": {\n    \"get\": {\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"logs\"\n     ],\n     \"operationId\": \"logFileListHandler\",\n     \"responses\": {\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   },\n   \"/logs/{logpath}\": {\n    \"get\": {\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"logs\"\n     ],\n     \"operationId\": \"logFileHandler\",\n     \"responses\": {\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    },\n    \"parameters\": [\n     {\n      \"uniqueItems\": true,\n      \"type\": \"string\",\n      \"description\": \"path to the log\",\n      \"name\": \"logpath\",\n      \"in\": \"path\",\n      \"required\": true\n     }\n    ]\n   },\n   \"/version/\": {\n    \"get\": {\n     \"description\": \"get the code version\",\n     \"consumes\": [\n      \"application/json\"\n     ],\n     \"produces\": [\n      \"application/json\"\n     ],\n     \"schemes\": [\n      \"https\"\n     ],\n     \"tags\": [\n      \"version\"\n     ],\n     \"operationId\": \"getCodeVersion\",\n     \"responses\": {\n      \"200\": {\n       \"description\": \"OK\",\n       \"schema\": {\n        \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.version.Info\"\n       }\n      },\n      \"401\": {\n       \"description\": \"Unauthorized\"\n      }\n     }\n    }\n   }\n  },\n  \"definitions\": {\n   \"io.k8s.apimachinery.pkg.api.resource.Quantity\": {\n    \"type\": \"string\"\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\": {\n    \"description\": \"APIGroup contains the name, the supported versions, and the preferred version of a group.\",\n    \"required\": [\n     \"name\",\n     \"versions\",\n     \"serverAddressByClientCIDRs\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"name is the name of the group.\",\n      \"type\": \"string\"\n     },\n     \"preferredVersion\": {\n      \"description\": \"preferredVersion is the version preferred by the API server, which probably is the storage version.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery\"\n     },\n     \"serverAddressByClientCIDRs\": {\n      \"description\": \"a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR\"\n      }\n     },\n     \"versions\": {\n      \"description\": \"versions are the versions supported in this group.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery\"\n      }\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList\": {\n    \"description\": \"APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.\",\n    \"required\": [\n     \"groups\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"groups\": {\n      \"description\": \"groups is a list of APIGroup.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.APIResource\": {\n    \"description\": \"APIResource specifies the name of a resource and whether it is namespaced.\",\n    \"required\": [\n     \"name\",\n     \"singularName\",\n     \"namespaced\",\n     \"kind\",\n     \"verbs\"\n    ],\n    \"properties\": {\n     \"categories\": {\n      \"description\": \"categories is a list of the grouped resources this resource belongs to (e.g. 'all')\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"name is the plural name of the resource.\",\n      \"type\": \"string\"\n     },\n     \"namespaced\": {\n      \"description\": \"namespaced indicates if a resource is namespaced or not.\",\n      \"type\": \"boolean\"\n     },\n     \"shortNames\": {\n      \"description\": \"shortNames is a list of suggested short names of the resource.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"singularName\": {\n      \"description\": \"singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.\",\n      \"type\": \"string\"\n     },\n     \"verbs\": {\n      \"description\": \"verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList\": {\n    \"description\": \"APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.\",\n    \"required\": [\n     \"groupVersion\",\n     \"resources\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"groupVersion\": {\n      \"description\": \"groupVersion is the group and version this APIResourceList is for.\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"resources\": {\n      \"description\": \"resources contains the name of the resources and if they are namespaced.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource\"\n      }\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions\": {\n    \"description\": \"APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.\",\n    \"required\": [\n     \"versions\",\n     \"serverAddressByClientCIDRs\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"serverAddressByClientCIDRs\": {\n      \"description\": \"a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR\"\n      }\n     },\n     \"versions\": {\n      \"description\": \"versions are the api versions that are available.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\": {\n    \"description\": \"DeleteOptions may be provided when deleting an API object.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"gracePeriodSeconds\": {\n      \"description\": \"The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"orphanDependents\": {\n      \"description\": \"Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \\\"orphan\\\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.\",\n      \"type\": \"boolean\"\n     },\n     \"preconditions\": {\n      \"description\": \"Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions\"\n     },\n     \"propagationPolicy\": {\n      \"description\": \"Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery\": {\n    \"description\": \"GroupVersion contains the \\\"group/version\\\" and \\\"version\\\" string of a version. It is made a struct to keep extensibility.\",\n    \"required\": [\n     \"groupVersion\",\n     \"version\"\n    ],\n    \"properties\": {\n     \"groupVersion\": {\n      \"description\": \"groupVersion specifies the API group and version in the form \\\"group/version\\\"\",\n      \"type\": \"string\"\n     },\n     \"version\": {\n      \"description\": \"version specifies the version in the form of \\\"version\\\". This is to save the clients the trouble of splitting the GroupVersion.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.Initializer\": {\n    \"description\": \"Initializer is information about an initializer that has not yet completed.\",\n    \"required\": [\n     \"name\"\n    ],\n    \"properties\": {\n     \"name\": {\n      \"description\": \"name of the process that is responsible for initializing this object.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.Initializers\": {\n    \"description\": \"Initializers tracks the progress of initialization.\",\n    \"required\": [\n     \"pending\"\n    ],\n    \"properties\": {\n     \"pending\": {\n      \"description\": \"Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Initializer\"\n      }\n     },\n     \"result\": {\n      \"description\": \"If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\": {\n    \"description\": \"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\",\n    \"properties\": {\n     \"matchExpressions\": {\n      \"description\": \"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement\"\n      }\n     },\n     \"matchLabels\": {\n      \"description\": \"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement\": {\n    \"description\": \"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n    \"required\": [\n     \"key\",\n     \"operator\"\n    ],\n    \"properties\": {\n     \"key\": {\n      \"description\": \"key is the label key that the selector applies to.\",\n      \"type\": \"string\",\n      \"x-kubernetes-patch-merge-key\": \"key\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"operator\": {\n      \"description\": \"operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.\",\n      \"type\": \"string\"\n     },\n     \"values\": {\n      \"description\": \"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\": {\n    \"description\": \"ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.\",\n    \"properties\": {\n     \"resourceVersion\": {\n      \"description\": \"String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\",\n      \"type\": \"string\"\n     },\n     \"selfLink\": {\n      \"description\": \"SelfLink is a URL representing this object. Populated by the system. Read-only.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\": {\n    \"description\": \"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\",\n    \"properties\": {\n     \"annotations\": {\n      \"description\": \"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"clusterName\": {\n      \"description\": \"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\",\n      \"type\": \"string\"\n     },\n     \"creationTimestamp\": {\n      \"description\": \"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\\n\\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"deletionGracePeriodSeconds\": {\n      \"description\": \"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"deletionTimestamp\": {\n      \"description\": \"DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\\n\\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"finalizers\": {\n      \"description\": \"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      },\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"generateName\": {\n      \"description\": \"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\",\n      \"type\": \"string\"\n     },\n     \"generation\": {\n      \"description\": \"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"initializers\": {\n      \"description\": \"An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\\n\\nWhen an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Initializers\"\n     },\n     \"labels\": {\n      \"description\": \"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"name\": {\n      \"description\": \"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\",\n      \"type\": \"string\"\n     },\n     \"ownerReferences\": {\n      \"description\": \"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"uid\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"resourceVersion\": {\n      \"description\": \"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\",\n      \"type\": \"string\"\n     },\n     \"selfLink\": {\n      \"description\": \"SelfLink is a URL representing this object. Populated by the system. Read-only.\",\n      \"type\": \"string\"\n     },\n     \"uid\": {\n      \"description\": \"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference\": {\n    \"description\": \"OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.\",\n    \"required\": [\n     \"apiVersion\",\n     \"kind\",\n     \"name\",\n     \"uid\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"API version of the referent.\",\n      \"type\": \"string\"\n     },\n     \"blockOwnerDeletion\": {\n      \"description\": \"If true, AND if the owner has the \\\"foregroundDeletion\\\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \\\"delete\\\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\",\n      \"type\": \"boolean\"\n     },\n     \"controller\": {\n      \"description\": \"If true, this reference points to the managing controller.\",\n      \"type\": \"boolean\"\n     },\n     \"kind\": {\n      \"description\": \"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names\",\n      \"type\": \"string\"\n     },\n     \"uid\": {\n      \"description\": \"UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.Patch\": {\n    \"description\": \"Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.\"\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions\": {\n    \"description\": \"Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.\",\n    \"properties\": {\n     \"uid\": {\n      \"description\": \"Specifies the target UID.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR\": {\n    \"description\": \"ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.\",\n    \"required\": [\n     \"clientCIDR\",\n     \"serverAddress\"\n    ],\n    \"properties\": {\n     \"clientCIDR\": {\n      \"description\": \"The CIDR with which clients can match their IP to figure out the server address that they should use.\",\n      \"type\": \"string\"\n     },\n     \"serverAddress\": {\n      \"description\": \"Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.Status\": {\n    \"description\": \"Status is a return value for calls that don't return other objects.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"code\": {\n      \"description\": \"Suggested HTTP return code for this status, 0 if not set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"details\": {\n      \"description\": \"Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"message\": {\n      \"description\": \"A human-readable description of the status of this operation.\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     },\n     \"reason\": {\n      \"description\": \"A machine-readable description of why this operation is in the \\\"Failure\\\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the operation. One of: \\\"Success\\\" or \\\"Failure\\\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause\": {\n    \"description\": \"StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.\",\n    \"properties\": {\n     \"field\": {\n      \"description\": \"The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\\n\\nExamples:\\n  \\\"name\\\" - the field \\\"name\\\" on the current resource\\n  \\\"items[0].name\\\" - the field \\\"name\\\" on the first array entry in \\\"items\\\"\",\n      \"type\": \"string\"\n     },\n     \"message\": {\n      \"description\": \"A human-readable description of the cause of the error.  This field may be presented as-is to a reader.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"A machine-readable description of the cause of the error. If this value is empty there is no information available.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails\": {\n    \"description\": \"StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.\",\n    \"properties\": {\n     \"causes\": {\n      \"description\": \"The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause\"\n      }\n     },\n     \"group\": {\n      \"description\": \"The group attribute of the resource associated with the status StatusReason.\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\",\n      \"type\": \"string\"\n     },\n     \"retryAfterSeconds\": {\n      \"description\": \"If specified, the time in seconds before the operation should be retried.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"uid\": {\n      \"description\": \"UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.Time\": {\n    \"type\": \"string\",\n    \"format\": \"date-time\"\n   },\n   \"io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent\": {\n    \"description\": \"Event represents a single event to a watched resource.\",\n    \"required\": [\n     \"type\",\n     \"object\"\n    ],\n    \"properties\": {\n     \"object\": {\n      \"description\": \"Object is:\\n * If Type is Added or Modified: the new state of the object.\\n * If Type is Deleted: the state of the object immediately before deletion.\\n * If Type is Error: *Status is recommended; other types may make sense\\n   depending on context.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension\"\n     },\n     \"type\": {\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.runtime.RawExtension\": {\n    \"description\": \"RawExtension is used to hold extensions in external versions.\\n\\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\\n\\n// Internal package: type MyAPIObject struct {\\n\\truntime.TypeMeta `json:\\\",inline\\\"`\\n\\tMyPlugin runtime.Object `json:\\\"myPlugin\\\"`\\n} type PluginA struct {\\n\\tAOption string `json:\\\"aOption\\\"`\\n}\\n\\n// External package: type MyAPIObject struct {\\n\\truntime.TypeMeta `json:\\\",inline\\\"`\\n\\tMyPlugin runtime.RawExtension `json:\\\"myPlugin\\\"`\\n} type PluginA struct {\\n\\tAOption string `json:\\\"aOption\\\"`\\n}\\n\\n// On the wire, the JSON will look something like this: {\\n\\t\\\"kind\\\":\\\"MyAPIObject\\\",\\n\\t\\\"apiVersion\\\":\\\"v1\\\",\\n\\t\\\"myPlugin\\\": {\\n\\t\\t\\\"kind\\\":\\\"PluginA\\\",\\n\\t\\t\\\"aOption\\\":\\\"foo\\\",\\n\\t},\\n}\\n\\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)\",\n    \"required\": [\n     \"Raw\"\n    ],\n    \"properties\": {\n     \"Raw\": {\n      \"description\": \"Raw is the underlying serialization of this object.\",\n      \"type\": \"string\",\n      \"format\": \"byte\"\n     }\n    }\n   },\n   \"io.k8s.apimachinery.pkg.util.intstr.IntOrString\": {\n    \"type\": \"string\",\n    \"format\": \"int-or-string\"\n   },\n   \"io.k8s.apimachinery.pkg.version.Info\": {\n    \"description\": \"Info contains versioning information. how we'll want to distribute that information.\",\n    \"required\": [\n     \"major\",\n     \"minor\",\n     \"gitVersion\",\n     \"gitCommit\",\n     \"gitTreeState\",\n     \"buildDate\",\n     \"goVersion\",\n     \"compiler\",\n     \"platform\"\n    ],\n    \"properties\": {\n     \"buildDate\": {\n      \"type\": \"string\"\n     },\n     \"compiler\": {\n      \"type\": \"string\"\n     },\n     \"gitCommit\": {\n      \"type\": \"string\"\n     },\n     \"gitTreeState\": {\n      \"type\": \"string\"\n     },\n     \"gitVersion\": {\n      \"type\": \"string\"\n     },\n     \"goVersion\": {\n      \"type\": \"string\"\n     },\n     \"major\": {\n      \"type\": \"string\"\n     },\n     \"minor\": {\n      \"type\": \"string\"\n     },\n     \"platform\": {\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\": {\n    \"description\": \"APIService represents a server for a particular GroupVersion. Name must be \\\"version.group\\\".\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec contains information for locating and communicating with a server\",\n      \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status contains derived information about an API server\",\n      \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus\"\n     }\n    }\n   },\n   \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition\": {\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastTransitionTime\": {\n      \"description\": \"Last time the condition transitioned from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"Human-readable message indicating details about last transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"Unique, one-word, CamelCase reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status is the status of the condition. Can be True, False, Unknown.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type is the type of the condition.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList\": {\n    \"description\": \"APIServiceList is a list of APIService objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    }\n   },\n   \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec\": {\n    \"description\": \"APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.\",\n    \"required\": [\n     \"service\",\n     \"caBundle\",\n     \"groupPriorityMinimum\",\n     \"versionPriority\"\n    ],\n    \"properties\": {\n     \"caBundle\": {\n      \"description\": \"CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.\",\n      \"type\": \"string\",\n      \"format\": \"byte\"\n     },\n     \"group\": {\n      \"description\": \"Group is the API group name this server hosts\",\n      \"type\": \"string\"\n     },\n     \"groupPriorityMinimum\": {\n      \"description\": \"GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"insecureSkipTLSVerify\": {\n      \"description\": \"InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.\",\n      \"type\": \"boolean\"\n     },\n     \"service\": {\n      \"description\": \"Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.\",\n      \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference\"\n     },\n     \"version\": {\n      \"description\": \"Version is the API version this server hosts.  For example, \\\"v1\\\"\",\n      \"type\": \"string\"\n     },\n     \"versionPriority\": {\n      \"description\": \"VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it's inside of a group, the number can be small, probably in the 10s.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus\": {\n    \"description\": \"APIServiceStatus contains derived information about an API server\",\n    \"properties\": {\n     \"conditions\": {\n      \"description\": \"Current service state of apiService.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     }\n    }\n   },\n   \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference\": {\n    \"description\": \"ServiceReference holds a reference to Service.legacy.k8s.io\",\n    \"properties\": {\n     \"name\": {\n      \"description\": \"Name is the name of the service\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace is the namespace of the service\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.AWSElasticBlockStoreVolumeSource\": {\n    \"description\": \"Represents a Persistent Disk resource in AWS.\\n\\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.\",\n    \"required\": [\n     \"volumeID\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\",\n      \"type\": \"string\"\n     },\n     \"partition\": {\n      \"description\": \"The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \\\"1\\\". Similarly, the volume partition for /dev/sda is \\\"0\\\" (or you can leave the property empty).\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"readOnly\": {\n      \"description\": \"Specify \\\"true\\\" to force and set the ReadOnly property in VolumeMounts to \\\"true\\\". If omitted, the default is \\\"false\\\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\",\n      \"type\": \"boolean\"\n     },\n     \"volumeID\": {\n      \"description\": \"Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Affinity\": {\n    \"description\": \"Affinity is a group of affinity scheduling rules.\",\n    \"properties\": {\n     \"nodeAffinity\": {\n      \"description\": \"Describes node affinity scheduling rules for the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeAffinity\"\n     },\n     \"podAffinity\": {\n      \"description\": \"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodAffinity\"\n     },\n     \"podAntiAffinity\": {\n      \"description\": \"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodAntiAffinity\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.AttachedVolume\": {\n    \"description\": \"AttachedVolume describes a volume attached to a node\",\n    \"required\": [\n     \"name\",\n     \"devicePath\"\n    ],\n    \"properties\": {\n     \"devicePath\": {\n      \"description\": \"DevicePath represents the device path where the volume should be available\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the attached volume\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.AzureDiskVolumeSource\": {\n    \"description\": \"AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\",\n    \"required\": [\n     \"diskName\",\n     \"diskURI\"\n    ],\n    \"properties\": {\n     \"cachingMode\": {\n      \"description\": \"Host Caching mode: None, Read Only, Read Write.\",\n      \"type\": \"string\"\n     },\n     \"diskName\": {\n      \"description\": \"The Name of the data disk in the blob storage\",\n      \"type\": \"string\"\n     },\n     \"diskURI\": {\n      \"description\": \"The URI the data disk in the blob storage\",\n      \"type\": \"string\"\n     },\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.AzureFileVolumeSource\": {\n    \"description\": \"AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\",\n    \"required\": [\n     \"secretName\",\n     \"shareName\"\n    ],\n    \"properties\": {\n     \"readOnly\": {\n      \"description\": \"Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     },\n     \"secretName\": {\n      \"description\": \"the name of secret that contains Azure Storage Account Name and Key\",\n      \"type\": \"string\"\n     },\n     \"shareName\": {\n      \"description\": \"Share Name\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Binding\": {\n    \"description\": \"Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.\",\n    \"required\": [\n     \"target\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"target\": {\n      \"description\": \"The target object that you want to bind to the standard object.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Binding\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Capabilities\": {\n    \"description\": \"Adds and removes POSIX capabilities from running containers.\",\n    \"properties\": {\n     \"add\": {\n      \"description\": \"Added capabilities\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"drop\": {\n      \"description\": \"Removed capabilities\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.CephFSVolumeSource\": {\n    \"description\": \"Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.\",\n    \"required\": [\n     \"monitors\"\n    ],\n    \"properties\": {\n     \"monitors\": {\n      \"description\": \"Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"path\": {\n      \"description\": \"Optional: Used as the mounted root, rather than the full Ceph tree, default is /\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\",\n      \"type\": \"boolean\"\n     },\n     \"secretFile\": {\n      \"description\": \"Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\",\n      \"type\": \"string\"\n     },\n     \"secretRef\": {\n      \"description\": \"Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n     },\n     \"user\": {\n      \"description\": \"Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.CinderVolumeSource\": {\n    \"description\": \"Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.\",\n    \"required\": [\n     \"volumeID\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\",\n      \"type\": \"boolean\"\n     },\n     \"volumeID\": {\n      \"description\": \"volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ComponentCondition\": {\n    \"description\": \"Information about the condition of a component.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"error\": {\n      \"description\": \"Condition error code for a component. For example, a health check error code.\",\n      \"type\": \"string\"\n     },\n     \"message\": {\n      \"description\": \"Message about the condition for a component. For example, information about a health check.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the condition for a component. Valid values for \\\"Healthy\\\": \\\"True\\\", \\\"False\\\", or \\\"Unknown\\\".\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type of condition for a component. Valid value: \\\"Healthy\\\"\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ComponentStatus\": {\n    \"description\": \"ComponentStatus (and ComponentStatusList) holds the cluster validation info.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"conditions\": {\n      \"description\": \"List of component conditions observed\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ComponentCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ComponentStatus\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ComponentStatusList\": {\n    \"description\": \"Status of all the conditions for the component as a list of ComponentStatus objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of ComponentStatus objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ComponentStatus\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ComponentStatusList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ConfigMap\": {\n    \"description\": \"ConfigMap holds configuration data for pods to consume.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"data\": {\n      \"description\": \"Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMap\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ConfigMapEnvSource\": {\n    \"description\": \"ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\\n\\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\",\n    \"properties\": {\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the ConfigMap must be defined\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ConfigMapKeySelector\": {\n    \"description\": \"Selects a key from a ConfigMap.\",\n    \"required\": [\n     \"key\"\n    ],\n    \"properties\": {\n     \"key\": {\n      \"description\": \"The key to select.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the ConfigMap or it's key must be defined\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ConfigMapList\": {\n    \"description\": \"ConfigMapList is a resource containing a list of ConfigMap objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of ConfigMaps.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMap\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ConfigMapList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ConfigMapProjection\": {\n    \"description\": \"Adapts a ConfigMap into a projected volume.\\n\\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.\",\n    \"properties\": {\n     \"items\": {\n      \"description\": \"If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.KeyToPath\"\n      }\n     },\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the ConfigMap or it's keys must be defined\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ConfigMapVolumeSource\": {\n    \"description\": \"Adapts a ConfigMap into a volume.\\n\\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.\",\n    \"properties\": {\n     \"defaultMode\": {\n      \"description\": \"Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"items\": {\n      \"description\": \"If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.KeyToPath\"\n      }\n     },\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the ConfigMap or it's keys must be defined\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Container\": {\n    \"description\": \"A single application container that you want to run within a pod.\",\n    \"required\": [\n     \"name\",\n     \"image\"\n    ],\n    \"properties\": {\n     \"args\": {\n      \"description\": \"Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"command\": {\n      \"description\": \"Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"env\": {\n      \"description\": \"List of environment variables to set in the container. Cannot be updated.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EnvVar\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"envFrom\": {\n      \"description\": \"List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EnvFromSource\"\n      }\n     },\n     \"image\": {\n      \"description\": \"Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images\",\n      \"type\": \"string\"\n     },\n     \"imagePullPolicy\": {\n      \"description\": \"Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\",\n      \"type\": \"string\"\n     },\n     \"lifecycle\": {\n      \"description\": \"Actions that the management system should take in response to container lifecycle events. Cannot be updated.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Lifecycle\"\n     },\n     \"livenessProbe\": {\n      \"description\": \"Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Probe\"\n     },\n     \"name\": {\n      \"description\": \"Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\",\n      \"type\": \"string\"\n     },\n     \"ports\": {\n      \"description\": \"List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \\\"0.0.0.0\\\" address inside a container will be accessible from the network. Cannot be updated.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerPort\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"containerPort\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"readinessProbe\": {\n      \"description\": \"Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Probe\"\n     },\n     \"resources\": {\n      \"description\": \"Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceRequirements\"\n     },\n     \"securityContext\": {\n      \"description\": \"Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SecurityContext\"\n     },\n     \"stdin\": {\n      \"description\": \"Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.\",\n      \"type\": \"boolean\"\n     },\n     \"stdinOnce\": {\n      \"description\": \"Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false\",\n      \"type\": \"boolean\"\n     },\n     \"terminationMessagePath\": {\n      \"description\": \"Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.\",\n      \"type\": \"string\"\n     },\n     \"terminationMessagePolicy\": {\n      \"description\": \"Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\",\n      \"type\": \"string\"\n     },\n     \"tty\": {\n      \"description\": \"Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.\",\n      \"type\": \"boolean\"\n     },\n     \"volumeMounts\": {\n      \"description\": \"Pod volumes to mount into the container's filesystem. Cannot be updated.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.VolumeMount\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"mountPath\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"workingDir\": {\n      \"description\": \"Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ContainerImage\": {\n    \"description\": \"Describe a container image\",\n    \"required\": [\n     \"names\"\n    ],\n    \"properties\": {\n     \"names\": {\n      \"description\": \"Names by which this image is known. e.g. [\\\"gcr.io/google_containers/hyperkube:v1.0.7\\\", \\\"dockerhub.io/google_containers/hyperkube:v1.0.7\\\"]\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"sizeBytes\": {\n      \"description\": \"The size of the image in bytes.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ContainerPort\": {\n    \"description\": \"ContainerPort represents a network port in a single container.\",\n    \"required\": [\n     \"containerPort\"\n    ],\n    \"properties\": {\n     \"containerPort\": {\n      \"description\": \"Number of port to expose on the pod's IP address. This must be a valid port number, 0 \\u003c x \\u003c 65536.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"hostIP\": {\n      \"description\": \"What host IP to bind the external port to.\",\n      \"type\": \"string\"\n     },\n     \"hostPort\": {\n      \"description\": \"Number of port to expose on the host. If specified, this must be a valid port number, 0 \\u003c x \\u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"name\": {\n      \"description\": \"If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.\",\n      \"type\": \"string\"\n     },\n     \"protocol\": {\n      \"description\": \"Protocol for port. Must be UDP or TCP. Defaults to \\\"TCP\\\".\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ContainerState\": {\n    \"description\": \"ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.\",\n    \"properties\": {\n     \"running\": {\n      \"description\": \"Details about a running container\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerStateRunning\"\n     },\n     \"terminated\": {\n      \"description\": \"Details about a terminated container\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerStateTerminated\"\n     },\n     \"waiting\": {\n      \"description\": \"Details about a waiting container\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerStateWaiting\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ContainerStateRunning\": {\n    \"description\": \"ContainerStateRunning is a running state of a container.\",\n    \"properties\": {\n     \"startedAt\": {\n      \"description\": \"Time at which the container was last (re-)started\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ContainerStateTerminated\": {\n    \"description\": \"ContainerStateTerminated is a terminated state of a container.\",\n    \"required\": [\n     \"exitCode\"\n    ],\n    \"properties\": {\n     \"containerID\": {\n      \"description\": \"Container's ID in the format 'docker://\\u003ccontainer_id\\u003e'\",\n      \"type\": \"string\"\n     },\n     \"exitCode\": {\n      \"description\": \"Exit status from the last termination of the container\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"finishedAt\": {\n      \"description\": \"Time at which the container last terminated\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"Message regarding the last termination of the container\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"(brief) reason from the last termination of the container\",\n      \"type\": \"string\"\n     },\n     \"signal\": {\n      \"description\": \"Signal from the last termination of the container\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"startedAt\": {\n      \"description\": \"Time at which previous execution of the container started\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ContainerStateWaiting\": {\n    \"description\": \"ContainerStateWaiting is a waiting state of a container.\",\n    \"properties\": {\n     \"message\": {\n      \"description\": \"Message regarding why the container is not yet running.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"(brief) reason the container is not yet running.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ContainerStatus\": {\n    \"description\": \"ContainerStatus contains details for the current status of this container.\",\n    \"required\": [\n     \"name\",\n     \"ready\",\n     \"restartCount\",\n     \"image\",\n     \"imageID\"\n    ],\n    \"properties\": {\n     \"containerID\": {\n      \"description\": \"Container's ID in the format 'docker://\\u003ccontainer_id\\u003e'.\",\n      \"type\": \"string\"\n     },\n     \"image\": {\n      \"description\": \"The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images\",\n      \"type\": \"string\"\n     },\n     \"imageID\": {\n      \"description\": \"ImageID of the container's image.\",\n      \"type\": \"string\"\n     },\n     \"lastState\": {\n      \"description\": \"Details about the container's last termination condition.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerState\"\n     },\n     \"name\": {\n      \"description\": \"This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.\",\n      \"type\": \"string\"\n     },\n     \"ready\": {\n      \"description\": \"Specifies whether the container has passed its readiness probe.\",\n      \"type\": \"boolean\"\n     },\n     \"restartCount\": {\n      \"description\": \"The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"state\": {\n      \"description\": \"Details about the container's current condition.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerState\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.DaemonEndpoint\": {\n    \"description\": \"DaemonEndpoint contains information about a single Daemon endpoint.\",\n    \"required\": [\n     \"Port\"\n    ],\n    \"properties\": {\n     \"Port\": {\n      \"description\": \"Port number of the given endpoint.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.DownwardAPIProjection\": {\n    \"description\": \"Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.\",\n    \"properties\": {\n     \"items\": {\n      \"description\": \"Items is a list of DownwardAPIVolume file\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.DownwardAPIVolumeFile\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.DownwardAPIVolumeFile\": {\n    \"description\": \"DownwardAPIVolumeFile represents information to create the file containing the pod field\",\n    \"required\": [\n     \"path\"\n    ],\n    \"properties\": {\n     \"fieldRef\": {\n      \"description\": \"Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectFieldSelector\"\n     },\n     \"mode\": {\n      \"description\": \"Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"path\": {\n      \"description\": \"Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\",\n      \"type\": \"string\"\n     },\n     \"resourceFieldRef\": {\n      \"description\": \"Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceFieldSelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.DownwardAPIVolumeSource\": {\n    \"description\": \"DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.\",\n    \"properties\": {\n     \"defaultMode\": {\n      \"description\": \"Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of downward API volume file\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.DownwardAPIVolumeFile\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EmptyDirVolumeSource\": {\n    \"description\": \"Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.\",\n    \"properties\": {\n     \"medium\": {\n      \"description\": \"What type of storage medium should back this directory. The default is \\\"\\\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\",\n      \"type\": \"string\"\n     },\n     \"sizeLimit\": {\n      \"description\": \"Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EndpointAddress\": {\n    \"description\": \"EndpointAddress is a tuple that describes single IP address.\",\n    \"required\": [\n     \"ip\"\n    ],\n    \"properties\": {\n     \"hostname\": {\n      \"description\": \"The Hostname of this endpoint\",\n      \"type\": \"string\"\n     },\n     \"ip\": {\n      \"description\": \"The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.\",\n      \"type\": \"string\"\n     },\n     \"nodeName\": {\n      \"description\": \"Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.\",\n      \"type\": \"string\"\n     },\n     \"targetRef\": {\n      \"description\": \"Reference to object providing the endpoint.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EndpointPort\": {\n    \"description\": \"EndpointPort is a tuple that describes a single port.\",\n    \"required\": [\n     \"port\"\n    ],\n    \"properties\": {\n     \"name\": {\n      \"description\": \"The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.\",\n      \"type\": \"string\"\n     },\n     \"port\": {\n      \"description\": \"The port number of the endpoint.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"protocol\": {\n      \"description\": \"The IP protocol for this port. Must be UDP or TCP. Default is TCP.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EndpointSubset\": {\n    \"description\": \"EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\\n  {\\n    Addresses: [{\\\"ip\\\": \\\"10.10.1.1\\\"}, {\\\"ip\\\": \\\"10.10.2.2\\\"}],\\n    Ports:     [{\\\"name\\\": \\\"a\\\", \\\"port\\\": 8675}, {\\\"name\\\": \\\"b\\\", \\\"port\\\": 309}]\\n  }\\nThe resulting set of endpoints can be viewed as:\\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]\",\n    \"properties\": {\n     \"addresses\": {\n      \"description\": \"IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EndpointAddress\"\n      }\n     },\n     \"notReadyAddresses\": {\n      \"description\": \"IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EndpointAddress\"\n      }\n     },\n     \"ports\": {\n      \"description\": \"Port numbers available on the related IP addresses.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EndpointPort\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Endpoints\": {\n    \"description\": \"Endpoints is a collection of endpoints that implement the actual service. Example:\\n  Name: \\\"mysvc\\\",\\n  Subsets: [\\n    {\\n      Addresses: [{\\\"ip\\\": \\\"10.10.1.1\\\"}, {\\\"ip\\\": \\\"10.10.2.2\\\"}],\\n      Ports: [{\\\"name\\\": \\\"a\\\", \\\"port\\\": 8675}, {\\\"name\\\": \\\"b\\\", \\\"port\\\": 309}]\\n    },\\n    {\\n      Addresses: [{\\\"ip\\\": \\\"10.10.3.3\\\"}],\\n      Ports: [{\\\"name\\\": \\\"a\\\", \\\"port\\\": 93}, {\\\"name\\\": \\\"b\\\", \\\"port\\\": 76}]\\n    },\\n ]\",\n    \"required\": [\n     \"subsets\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"subsets\": {\n      \"description\": \"The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EndpointSubset\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Endpoints\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EndpointsList\": {\n    \"description\": \"EndpointsList is a list of endpoints.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of endpoints.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Endpoints\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"EndpointsList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EnvFromSource\": {\n    \"description\": \"EnvFromSource represents the source of a set of ConfigMaps\",\n    \"properties\": {\n     \"configMapRef\": {\n      \"description\": \"The ConfigMap to select from\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMapEnvSource\"\n     },\n     \"prefix\": {\n      \"description\": \"An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\",\n      \"type\": \"string\"\n     },\n     \"secretRef\": {\n      \"description\": \"The Secret to select from\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SecretEnvSource\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EnvVar\": {\n    \"description\": \"EnvVar represents an environment variable present in a Container.\",\n    \"required\": [\n     \"name\"\n    ],\n    \"properties\": {\n     \"name\": {\n      \"description\": \"Name of the environment variable. Must be a C_IDENTIFIER.\",\n      \"type\": \"string\"\n     },\n     \"value\": {\n      \"description\": \"Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \\\"\\\".\",\n      \"type\": \"string\"\n     },\n     \"valueFrom\": {\n      \"description\": \"Source for the environment variable's value. Cannot be used if value is not empty.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EnvVarSource\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EnvVarSource\": {\n    \"description\": \"EnvVarSource represents a source for the value of an EnvVar.\",\n    \"properties\": {\n     \"configMapKeyRef\": {\n      \"description\": \"Selects a key of a ConfigMap.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMapKeySelector\"\n     },\n     \"fieldRef\": {\n      \"description\": \"Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectFieldSelector\"\n     },\n     \"resourceFieldRef\": {\n      \"description\": \"Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceFieldSelector\"\n     },\n     \"secretKeyRef\": {\n      \"description\": \"Selects a key of a secret in the pod's namespace\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SecretKeySelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Event\": {\n    \"description\": \"Event is a report of an event somewhere in the cluster.\",\n    \"required\": [\n     \"metadata\",\n     \"involvedObject\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"count\": {\n      \"description\": \"The number of times this event has occurred.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"firstTimestamp\": {\n      \"description\": \"The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"involvedObject\": {\n      \"description\": \"The object that this event is about.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"lastTimestamp\": {\n      \"description\": \"The time at which the most recent occurrence of this event was recorded.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"A human-readable description of the status of this operation.\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"reason\": {\n      \"description\": \"This should be a short, machine understandable string that gives the reason for the transition into the object's current status.\",\n      \"type\": \"string\"\n     },\n     \"source\": {\n      \"description\": \"The component reporting this event. Should be a short machine understandable string.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EventSource\"\n     },\n     \"type\": {\n      \"description\": \"Type of this event (Normal, Warning), new types could be added in the future\",\n      \"type\": \"string\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Event\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EventList\": {\n    \"description\": \"EventList is a list of events.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of events\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Event\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"EventList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.EventSource\": {\n    \"description\": \"EventSource contains information for an event.\",\n    \"properties\": {\n     \"component\": {\n      \"description\": \"Component from which the event is generated.\",\n      \"type\": \"string\"\n     },\n     \"host\": {\n      \"description\": \"Node name on which the event is generated.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ExecAction\": {\n    \"description\": \"ExecAction describes a \\\"run in container\\\" action.\",\n    \"properties\": {\n     \"command\": {\n      \"description\": \"Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.FCVolumeSource\": {\n    \"description\": \"Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.\",\n    \"required\": [\n     \"targetWWNs\",\n     \"lun\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"lun\": {\n      \"description\": \"Required: FC target lun number\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"readOnly\": {\n      \"description\": \"Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     },\n     \"targetWWNs\": {\n      \"description\": \"Required: FC target worldwide names (WWNs)\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.FlexVolumeSource\": {\n    \"description\": \"FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\",\n    \"required\": [\n     \"driver\"\n    ],\n    \"properties\": {\n     \"driver\": {\n      \"description\": \"Driver is the name of the driver to use for this volume.\",\n      \"type\": \"string\"\n     },\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". The default filesystem depends on FlexVolume script.\",\n      \"type\": \"string\"\n     },\n     \"options\": {\n      \"description\": \"Optional: Extra command options if any.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"readOnly\": {\n      \"description\": \"Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     },\n     \"secretRef\": {\n      \"description\": \"Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.FlockerVolumeSource\": {\n    \"description\": \"Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.\",\n    \"properties\": {\n     \"datasetName\": {\n      \"description\": \"Name of the dataset stored as metadata -\\u003e name on the dataset for Flocker should be considered as deprecated\",\n      \"type\": \"string\"\n     },\n     \"datasetUUID\": {\n      \"description\": \"UUID of the dataset. This is unique identifier of a Flocker dataset\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.GCEPersistentDiskVolumeSource\": {\n    \"description\": \"Represents a Persistent Disk resource in Google Compute Engine.\\n\\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.\",\n    \"required\": [\n     \"pdName\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\",\n      \"type\": \"string\"\n     },\n     \"partition\": {\n      \"description\": \"The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \\\"1\\\". Similarly, the volume partition for /dev/sda is \\\"0\\\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"pdName\": {\n      \"description\": \"Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.GitRepoVolumeSource\": {\n    \"description\": \"Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\",\n    \"required\": [\n     \"repository\"\n    ],\n    \"properties\": {\n     \"directory\": {\n      \"description\": \"Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\",\n      \"type\": \"string\"\n     },\n     \"repository\": {\n      \"description\": \"Repository URL\",\n      \"type\": \"string\"\n     },\n     \"revision\": {\n      \"description\": \"Commit hash for the specified revision.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.GlusterfsVolumeSource\": {\n    \"description\": \"Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.\",\n    \"required\": [\n     \"endpoints\",\n     \"path\"\n    ],\n    \"properties\": {\n     \"endpoints\": {\n      \"description\": \"EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\",\n      \"type\": \"string\"\n     },\n     \"path\": {\n      \"description\": \"Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.HTTPGetAction\": {\n    \"description\": \"HTTPGetAction describes an action based on HTTP Get requests.\",\n    \"required\": [\n     \"port\"\n    ],\n    \"properties\": {\n     \"host\": {\n      \"description\": \"Host name to connect to, defaults to the pod IP. You probably want to set \\\"Host\\\" in httpHeaders instead.\",\n      \"type\": \"string\"\n     },\n     \"httpHeaders\": {\n      \"description\": \"Custom headers to set in the request. HTTP allows repeated headers.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.HTTPHeader\"\n      }\n     },\n     \"path\": {\n      \"description\": \"Path to access on the HTTP server.\",\n      \"type\": \"string\"\n     },\n     \"port\": {\n      \"description\": \"Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     },\n     \"scheme\": {\n      \"description\": \"Scheme to use for connecting to the host. Defaults to HTTP.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.HTTPHeader\": {\n    \"description\": \"HTTPHeader describes a custom header to be used in HTTP probes\",\n    \"required\": [\n     \"name\",\n     \"value\"\n    ],\n    \"properties\": {\n     \"name\": {\n      \"description\": \"The header field name\",\n      \"type\": \"string\"\n     },\n     \"value\": {\n      \"description\": \"The header field value\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Handler\": {\n    \"description\": \"Handler defines a specific action that should be taken\",\n    \"properties\": {\n     \"exec\": {\n      \"description\": \"One and only one of the following should be specified. Exec specifies the action to take.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ExecAction\"\n     },\n     \"httpGet\": {\n      \"description\": \"HTTPGet specifies the http request to perform.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.HTTPGetAction\"\n     },\n     \"tcpSocket\": {\n      \"description\": \"TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.TCPSocketAction\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.HostAlias\": {\n    \"description\": \"HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.\",\n    \"properties\": {\n     \"hostnames\": {\n      \"description\": \"Hostnames for the above IP address.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"ip\": {\n      \"description\": \"IP address of the host file entry.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.HostPathVolumeSource\": {\n    \"description\": \"Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.\",\n    \"required\": [\n     \"path\"\n    ],\n    \"properties\": {\n     \"path\": {\n      \"description\": \"Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ISCSIVolumeSource\": {\n    \"description\": \"Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.\",\n    \"required\": [\n     \"targetPortal\",\n     \"iqn\",\n     \"lun\"\n    ],\n    \"properties\": {\n     \"chapAuthDiscovery\": {\n      \"description\": \"whether support iSCSI Discovery CHAP authentication\",\n      \"type\": \"boolean\"\n     },\n     \"chapAuthSession\": {\n      \"description\": \"whether support iSCSI Session CHAP authentication\",\n      \"type\": \"boolean\"\n     },\n     \"fsType\": {\n      \"description\": \"Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\",\n      \"type\": \"string\"\n     },\n     \"iqn\": {\n      \"description\": \"Target iSCSI Qualified Name.\",\n      \"type\": \"string\"\n     },\n     \"iscsiInterface\": {\n      \"description\": \"Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.\",\n      \"type\": \"string\"\n     },\n     \"lun\": {\n      \"description\": \"iSCSI target lun number.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"portals\": {\n      \"description\": \"iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"readOnly\": {\n      \"description\": \"ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\",\n      \"type\": \"boolean\"\n     },\n     \"secretRef\": {\n      \"description\": \"CHAP secret for iSCSI target and initiator authentication\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n     },\n     \"targetPortal\": {\n      \"description\": \"iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.KeyToPath\": {\n    \"description\": \"Maps a string key to a path within a volume.\",\n    \"required\": [\n     \"key\",\n     \"path\"\n    ],\n    \"properties\": {\n     \"key\": {\n      \"description\": \"The key to project.\",\n      \"type\": \"string\"\n     },\n     \"mode\": {\n      \"description\": \"Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"path\": {\n      \"description\": \"The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Lifecycle\": {\n    \"description\": \"Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.\",\n    \"properties\": {\n     \"postStart\": {\n      \"description\": \"PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Handler\"\n     },\n     \"preStop\": {\n      \"description\": \"PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Handler\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LimitRange\": {\n    \"description\": \"LimitRange sets resource usage limits for each kind of resource in a Namespace.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRangeSpec\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRange\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LimitRangeItem\": {\n    \"description\": \"LimitRangeItem defines a min/max usage limit for any resource that matches on kind.\",\n    \"properties\": {\n     \"default\": {\n      \"description\": \"Default resource requirement limit value by resource name if resource limit is omitted.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"defaultRequest\": {\n      \"description\": \"DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"max\": {\n      \"description\": \"Max usage constraints on this kind by resource name.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"maxLimitRequestRatio\": {\n      \"description\": \"MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"min\": {\n      \"description\": \"Min usage constraints on this kind by resource name.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"type\": {\n      \"description\": \"Type of resource that this limit applies to.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LimitRangeList\": {\n    \"description\": \"LimitRangeList is a list of LimitRange items.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of LimitRange objects. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_limit_range.md\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRange\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"LimitRangeList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LimitRangeSpec\": {\n    \"description\": \"LimitRangeSpec defines a min/max usage limit for resources that match on kind.\",\n    \"required\": [\n     \"limits\"\n    ],\n    \"properties\": {\n     \"limits\": {\n      \"description\": \"Limits is the list of LimitRangeItem objects that are enforced.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LimitRangeItem\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LoadBalancerIngress\": {\n    \"description\": \"LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.\",\n    \"properties\": {\n     \"hostname\": {\n      \"description\": \"Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)\",\n      \"type\": \"string\"\n     },\n     \"ip\": {\n      \"description\": \"IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LoadBalancerStatus\": {\n    \"description\": \"LoadBalancerStatus represents the status of a load-balancer.\",\n    \"properties\": {\n     \"ingress\": {\n      \"description\": \"Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LoadBalancerIngress\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\": {\n    \"description\": \"LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\",\n    \"properties\": {\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.LocalVolumeSource\": {\n    \"description\": \"Local represents directly-attached storage with node affinity\",\n    \"required\": [\n     \"path\"\n    ],\n    \"properties\": {\n     \"path\": {\n      \"description\": \"The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NFSVolumeSource\": {\n    \"description\": \"Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.\",\n    \"required\": [\n     \"server\",\n     \"path\"\n    ],\n    \"properties\": {\n     \"path\": {\n      \"description\": \"Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\",\n      \"type\": \"boolean\"\n     },\n     \"server\": {\n      \"description\": \"Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Namespace\": {\n    \"description\": \"Namespace provides a scope for Names. Use of multiple namespaces is optional.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NamespaceSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NamespaceStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Namespace\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NamespaceList\": {\n    \"description\": \"NamespaceList is a list of Namespaces.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Namespace\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"NamespaceList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NamespaceSpec\": {\n    \"description\": \"NamespaceSpec describes the attributes on a Namespace.\",\n    \"properties\": {\n     \"finalizers\": {\n      \"description\": \"Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://git.k8s.io/community/contributors/design-proposals/namespaces.md#finalizers\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NamespaceStatus\": {\n    \"description\": \"NamespaceStatus is information about the current status of a Namespace.\",\n    \"properties\": {\n     \"phase\": {\n      \"description\": \"Phase is the current lifecycle phase of the namespace. More info: https://git.k8s.io/community/contributors/design-proposals/namespaces.md#phases\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Node\": {\n    \"description\": \"Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeSpec\"\n     },\n     \"status\": {\n      \"description\": \"Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Node\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeAddress\": {\n    \"description\": \"NodeAddress contains information for the node's address.\",\n    \"required\": [\n     \"type\",\n     \"address\"\n    ],\n    \"properties\": {\n     \"address\": {\n      \"description\": \"The node address.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Node address type, one of Hostname, ExternalIP or InternalIP.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeAffinity\": {\n    \"description\": \"Node affinity is a group of node affinity scheduling rules.\",\n    \"properties\": {\n     \"preferredDuringSchedulingIgnoredDuringExecution\": {\n      \"description\": \"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PreferredSchedulingTerm\"\n      }\n     },\n     \"requiredDuringSchedulingIgnoredDuringExecution\": {\n      \"description\": \"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeSelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeCondition\": {\n    \"description\": \"NodeCondition contains condition information for a node.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastHeartbeatTime\": {\n      \"description\": \"Last time we got an update on a given condition.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"lastTransitionTime\": {\n      \"description\": \"Last time the condition transit from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"Human readable message indicating details about last transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"(brief) reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the condition, one of True, False, Unknown.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type of node condition.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeDaemonEndpoints\": {\n    \"description\": \"NodeDaemonEndpoints lists ports opened by daemons running on the Node.\",\n    \"properties\": {\n     \"kubeletEndpoint\": {\n      \"description\": \"Endpoint on which Kubelet is listening.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.DaemonEndpoint\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeList\": {\n    \"description\": \"NodeList is the whole list of all Nodes which have been registered with master.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of nodes\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Node\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"NodeList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeSelector\": {\n    \"description\": \"A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.\",\n    \"required\": [\n     \"nodeSelectorTerms\"\n    ],\n    \"properties\": {\n     \"nodeSelectorTerms\": {\n      \"description\": \"Required. A list of node selector terms. The terms are ORed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeSelectorTerm\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeSelectorRequirement\": {\n    \"description\": \"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\n    \"required\": [\n     \"key\",\n     \"operator\"\n    ],\n    \"properties\": {\n     \"key\": {\n      \"description\": \"The label key that the selector applies to.\",\n      \"type\": \"string\",\n      \"x-kubernetes-patch-merge-key\": \"key\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"operator\": {\n      \"description\": \"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\n      \"type\": \"string\"\n     },\n     \"values\": {\n      \"description\": \"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeSelectorTerm\": {\n    \"description\": \"A null or empty node selector term matches no objects.\",\n    \"required\": [\n     \"matchExpressions\"\n    ],\n    \"properties\": {\n     \"matchExpressions\": {\n      \"description\": \"Required. A list of node selector requirements. The requirements are ANDed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeSelectorRequirement\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeSpec\": {\n    \"description\": \"NodeSpec describes the attributes that a node is created with.\",\n    \"properties\": {\n     \"externalID\": {\n      \"description\": \"External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.\",\n      \"type\": \"string\"\n     },\n     \"podCIDR\": {\n      \"description\": \"PodCIDR represents the pod IP range assigned to the node.\",\n      \"type\": \"string\"\n     },\n     \"providerID\": {\n      \"description\": \"ID of the node assigned by the cloud provider in the format: \\u003cProviderName\\u003e://\\u003cProviderSpecificNodeID\\u003e\",\n      \"type\": \"string\"\n     },\n     \"taints\": {\n      \"description\": \"If specified, the node's taints.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Taint\"\n      }\n     },\n     \"unschedulable\": {\n      \"description\": \"Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeStatus\": {\n    \"description\": \"NodeStatus is information about the current status of a node.\",\n    \"properties\": {\n     \"addresses\": {\n      \"description\": \"List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeAddress\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"allocatable\": {\n      \"description\": \"Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"capacity\": {\n      \"description\": \"Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"conditions\": {\n      \"description\": \"Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"daemonEndpoints\": {\n      \"description\": \"Endpoints of daemons running on the Node.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeDaemonEndpoints\"\n     },\n     \"images\": {\n      \"description\": \"List of container images on this node\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerImage\"\n      }\n     },\n     \"nodeInfo\": {\n      \"description\": \"Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeSystemInfo\"\n     },\n     \"phase\": {\n      \"description\": \"NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.\",\n      \"type\": \"string\"\n     },\n     \"volumesAttached\": {\n      \"description\": \"List of volumes that are attached to the node.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.AttachedVolume\"\n      }\n     },\n     \"volumesInUse\": {\n      \"description\": \"List of attachable volumes in use (mounted) by the node.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.NodeSystemInfo\": {\n    \"description\": \"NodeSystemInfo is a set of ids/uuids to uniquely identify the node.\",\n    \"required\": [\n     \"machineID\",\n     \"systemUUID\",\n     \"bootID\",\n     \"kernelVersion\",\n     \"osImage\",\n     \"containerRuntimeVersion\",\n     \"kubeletVersion\",\n     \"kubeProxyVersion\",\n     \"operatingSystem\",\n     \"architecture\"\n    ],\n    \"properties\": {\n     \"architecture\": {\n      \"description\": \"The Architecture reported by the node\",\n      \"type\": \"string\"\n     },\n     \"bootID\": {\n      \"description\": \"Boot ID reported by the node.\",\n      \"type\": \"string\"\n     },\n     \"containerRuntimeVersion\": {\n      \"description\": \"ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).\",\n      \"type\": \"string\"\n     },\n     \"kernelVersion\": {\n      \"description\": \"Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).\",\n      \"type\": \"string\"\n     },\n     \"kubeProxyVersion\": {\n      \"description\": \"KubeProxy Version reported by the node.\",\n      \"type\": \"string\"\n     },\n     \"kubeletVersion\": {\n      \"description\": \"Kubelet Version reported by the node.\",\n      \"type\": \"string\"\n     },\n     \"machineID\": {\n      \"description\": \"MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html\",\n      \"type\": \"string\"\n     },\n     \"operatingSystem\": {\n      \"description\": \"The Operating System reported by the node\",\n      \"type\": \"string\"\n     },\n     \"osImage\": {\n      \"description\": \"OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).\",\n      \"type\": \"string\"\n     },\n     \"systemUUID\": {\n      \"description\": \"SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ObjectFieldSelector\": {\n    \"description\": \"ObjectFieldSelector selects an APIVersioned field of an object.\",\n    \"required\": [\n     \"fieldPath\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"Version of the schema the FieldPath is written in terms of, defaults to \\\"v1\\\".\",\n      \"type\": \"string\"\n     },\n     \"fieldPath\": {\n      \"description\": \"Path of the field to select in the specified API version.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ObjectReference\": {\n    \"description\": \"ObjectReference contains enough information to let you inspect or modify the referred object.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"API version of the referent.\",\n      \"type\": \"string\"\n     },\n     \"fieldPath\": {\n      \"description\": \"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\n      \"type\": \"string\"\n     },\n     \"resourceVersion\": {\n      \"description\": \"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\",\n      \"type\": \"string\"\n     },\n     \"uid\": {\n      \"description\": \"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolume\": {\n    \"description\": \"PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolume\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\": {\n    \"description\": \"PersistentVolumeClaim is a user's request for and claim to a persistent volume\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaim\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimList\": {\n    \"description\": \"PersistentVolumeClaimList is a list of PersistentVolumeClaim items.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeClaimList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimSpec\": {\n    \"description\": \"PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes\",\n    \"properties\": {\n     \"accessModes\": {\n      \"description\": \"AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"resources\": {\n      \"description\": \"Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceRequirements\"\n     },\n     \"selector\": {\n      \"description\": \"A label query over volumes to consider for binding.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"storageClassName\": {\n      \"description\": \"Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\n      \"type\": \"string\"\n     },\n     \"volumeName\": {\n      \"description\": \"VolumeName is the binding reference to the PersistentVolume backing this claim.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimStatus\": {\n    \"description\": \"PersistentVolumeClaimStatus is the current status of a persistent volume claim.\",\n    \"properties\": {\n     \"accessModes\": {\n      \"description\": \"AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"capacity\": {\n      \"description\": \"Represents the actual resources of the underlying volume.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"phase\": {\n      \"description\": \"Phase represents the current phase of PersistentVolumeClaim.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimVolumeSource\": {\n    \"description\": \"PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).\",\n    \"required\": [\n     \"claimName\"\n    ],\n    \"properties\": {\n     \"claimName\": {\n      \"description\": \"ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Will force the ReadOnly setting in VolumeMounts. Default false.\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeList\": {\n    \"description\": \"PersistentVolumeList is a list of PersistentVolume items.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolume\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PersistentVolumeList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeSpec\": {\n    \"description\": \"PersistentVolumeSpec is the specification of a persistent volume.\",\n    \"properties\": {\n     \"accessModes\": {\n      \"description\": \"AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"awsElasticBlockStore\": {\n      \"description\": \"AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.AWSElasticBlockStoreVolumeSource\"\n     },\n     \"azureDisk\": {\n      \"description\": \"AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.AzureDiskVolumeSource\"\n     },\n     \"azureFile\": {\n      \"description\": \"AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.AzureFileVolumeSource\"\n     },\n     \"capacity\": {\n      \"description\": \"A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"cephfs\": {\n      \"description\": \"CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.CephFSVolumeSource\"\n     },\n     \"cinder\": {\n      \"description\": \"Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.CinderVolumeSource\"\n     },\n     \"claimRef\": {\n      \"description\": \"ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference\"\n     },\n     \"fc\": {\n      \"description\": \"FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.FCVolumeSource\"\n     },\n     \"flexVolume\": {\n      \"description\": \"FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.FlexVolumeSource\"\n     },\n     \"flocker\": {\n      \"description\": \"Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.FlockerVolumeSource\"\n     },\n     \"gcePersistentDisk\": {\n      \"description\": \"GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.GCEPersistentDiskVolumeSource\"\n     },\n     \"glusterfs\": {\n      \"description\": \"Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.GlusterfsVolumeSource\"\n     },\n     \"hostPath\": {\n      \"description\": \"HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.HostPathVolumeSource\"\n     },\n     \"iscsi\": {\n      \"description\": \"ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ISCSIVolumeSource\"\n     },\n     \"local\": {\n      \"description\": \"Local represents directly-attached storage with node affinity\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalVolumeSource\"\n     },\n     \"nfs\": {\n      \"description\": \"NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NFSVolumeSource\"\n     },\n     \"persistentVolumeReclaimPolicy\": {\n      \"description\": \"What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\",\n      \"type\": \"string\"\n     },\n     \"photonPersistentDisk\": {\n      \"description\": \"PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PhotonPersistentDiskVolumeSource\"\n     },\n     \"portworxVolume\": {\n      \"description\": \"PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PortworxVolumeSource\"\n     },\n     \"quobyte\": {\n      \"description\": \"Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.QuobyteVolumeSource\"\n     },\n     \"rbd\": {\n      \"description\": \"RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.RBDVolumeSource\"\n     },\n     \"scaleIO\": {\n      \"description\": \"ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ScaleIOVolumeSource\"\n     },\n     \"storageClassName\": {\n      \"description\": \"Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.\",\n      \"type\": \"string\"\n     },\n     \"storageos\": {\n      \"description\": \"StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.StorageOSPersistentVolumeSource\"\n     },\n     \"vsphereVolume\": {\n      \"description\": \"VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.VsphereVirtualDiskVolumeSource\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PersistentVolumeStatus\": {\n    \"description\": \"PersistentVolumeStatus is the current status of a persistent volume.\",\n    \"properties\": {\n     \"message\": {\n      \"description\": \"A human-readable message indicating details about why the volume is in this state.\",\n      \"type\": \"string\"\n     },\n     \"phase\": {\n      \"description\": \"Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PhotonPersistentDiskVolumeSource\": {\n    \"description\": \"Represents a Photon Controller persistent disk resource.\",\n    \"required\": [\n     \"pdID\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"pdID\": {\n      \"description\": \"ID that identifies Photon Controller persistent disk\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Pod\": {\n    \"description\": \"Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodSpec\"\n     },\n     \"status\": {\n      \"description\": \"Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Pod\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodAffinity\": {\n    \"description\": \"Pod affinity is a group of inter pod affinity scheduling rules.\",\n    \"properties\": {\n     \"preferredDuringSchedulingIgnoredDuringExecution\": {\n      \"description\": \"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.WeightedPodAffinityTerm\"\n      }\n     },\n     \"requiredDuringSchedulingIgnoredDuringExecution\": {\n      \"description\": \"NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\\\"requiredDuringSchedulingRequiredDuringExecution,omitempty\\\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodAffinityTerm\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodAffinityTerm\": {\n    \"description\": \"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e tches that of any node on which a pod of the set of pods is running\",\n    \"properties\": {\n     \"labelSelector\": {\n      \"description\": \"A label query over a set of resources, in this case pods.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"namespaces\": {\n      \"description\": \"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"topologyKey\": {\n      \"description\": \"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \\\"all topologies\\\" (\\\"all topologies\\\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodAntiAffinity\": {\n    \"description\": \"Pod anti affinity is a group of inter pod anti affinity scheduling rules.\",\n    \"properties\": {\n     \"preferredDuringSchedulingIgnoredDuringExecution\": {\n      \"description\": \"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.WeightedPodAffinityTerm\"\n      }\n     },\n     \"requiredDuringSchedulingIgnoredDuringExecution\": {\n      \"description\": \"NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\\\"requiredDuringSchedulingRequiredDuringExecution,omitempty\\\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodAffinityTerm\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodCondition\": {\n    \"description\": \"PodCondition contains details for the current condition of this pod.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastProbeTime\": {\n      \"description\": \"Last time we probed the condition.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"lastTransitionTime\": {\n      \"description\": \"Last time the condition transitioned from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"Human-readable message indicating details about last transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"Unique, one-word, CamelCase reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type is the type of the condition. Currently only Ready. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodList\": {\n    \"description\": \"PodList is a list of Pods.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of pods. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Pod\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodSecurityContext\": {\n    \"description\": \"PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.\",\n    \"properties\": {\n     \"fsGroup\": {\n      \"description\": \"A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\\n\\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\\n\\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"runAsNonRoot\": {\n      \"description\": \"Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\",\n      \"type\": \"boolean\"\n     },\n     \"runAsUser\": {\n      \"description\": \"The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"seLinuxOptions\": {\n      \"description\": \"The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SELinuxOptions\"\n     },\n     \"supplementalGroups\": {\n      \"description\": \"A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"integer\",\n       \"format\": \"int64\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodSpec\": {\n    \"description\": \"PodSpec is a description of a pod.\",\n    \"required\": [\n     \"containers\"\n    ],\n    \"properties\": {\n     \"activeDeadlineSeconds\": {\n      \"description\": \"Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"affinity\": {\n      \"description\": \"If specified, the pod's scheduling constraints\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Affinity\"\n     },\n     \"automountServiceAccountToken\": {\n      \"description\": \"AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\",\n      \"type\": \"boolean\"\n     },\n     \"containers\": {\n      \"description\": \"List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Container\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"dnsPolicy\": {\n      \"description\": \"Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \\\"ClusterFirst\\\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\",\n      \"type\": \"string\"\n     },\n     \"hostAliases\": {\n      \"description\": \"HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.HostAlias\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"ip\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"hostIPC\": {\n      \"description\": \"Use the host's ipc namespace. Optional: Default to false.\",\n      \"type\": \"boolean\"\n     },\n     \"hostNetwork\": {\n      \"description\": \"Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\",\n      \"type\": \"boolean\"\n     },\n     \"hostPID\": {\n      \"description\": \"Use the host's pid namespace. Optional: Default to false.\",\n      \"type\": \"boolean\"\n     },\n     \"hostname\": {\n      \"description\": \"Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\",\n      \"type\": \"string\"\n     },\n     \"imagePullSecrets\": {\n      \"description\": \"ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"initContainers\": {\n      \"description\": \"List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Container\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"nodeName\": {\n      \"description\": \"NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\",\n      \"type\": \"string\"\n     },\n     \"nodeSelector\": {\n      \"description\": \"NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"restartPolicy\": {\n      \"description\": \"Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\",\n      \"type\": \"string\"\n     },\n     \"schedulerName\": {\n      \"description\": \"If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\",\n      \"type\": \"string\"\n     },\n     \"securityContext\": {\n      \"description\": \"SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodSecurityContext\"\n     },\n     \"serviceAccount\": {\n      \"description\": \"DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\",\n      \"type\": \"string\"\n     },\n     \"serviceAccountName\": {\n      \"description\": \"ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\",\n      \"type\": \"string\"\n     },\n     \"subdomain\": {\n      \"description\": \"If specified, the fully qualified Pod hostname will be \\\"\\u003chostname\\u003e.\\u003csubdomain\\u003e.\\u003cpod namespace\\u003e.svc.\\u003ccluster domain\\u003e\\\". If not specified, the pod will not have a domainname at all.\",\n      \"type\": \"string\"\n     },\n     \"terminationGracePeriodSeconds\": {\n      \"description\": \"Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"tolerations\": {\n      \"description\": \"If specified, the pod's tolerations.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Toleration\"\n      }\n     },\n     \"volumes\": {\n      \"description\": \"List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Volume\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodStatus\": {\n    \"description\": \"PodStatus represents information about the status of a pod. Status may trail the actual state of a system.\",\n    \"properties\": {\n     \"conditions\": {\n      \"description\": \"Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"containerStatuses\": {\n      \"description\": \"The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerStatus\"\n      }\n     },\n     \"hostIP\": {\n      \"description\": \"IP address of the host to which the pod is assigned. Empty if not yet scheduled.\",\n      \"type\": \"string\"\n     },\n     \"initContainerStatuses\": {\n      \"description\": \"The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ContainerStatus\"\n      }\n     },\n     \"message\": {\n      \"description\": \"A human readable message indicating details about why the pod is in this condition.\",\n      \"type\": \"string\"\n     },\n     \"phase\": {\n      \"description\": \"Current condition of the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\",\n      \"type\": \"string\"\n     },\n     \"podIP\": {\n      \"description\": \"IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.\",\n      \"type\": \"string\"\n     },\n     \"qosClass\": {\n      \"description\": \"The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://github.com/kubernetes/kubernetes/blob/master/docs/design/resource-qos.md\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'\",\n      \"type\": \"string\"\n     },\n     \"startTime\": {\n      \"description\": \"RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodTemplate\": {\n    \"description\": \"PodTemplate describes a template for creating copies of a predefined pod.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"template\": {\n      \"description\": \"Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplate\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodTemplateList\": {\n    \"description\": \"PodTemplateList is a list of PodTemplates.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of pod templates\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplate\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"PodTemplateList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\": {\n    \"description\": \"PodTemplateSpec describes the data a pod should have when created from a template\",\n    \"properties\": {\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodSpec\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PortworxVolumeSource\": {\n    \"description\": \"PortworxVolumeSource represents a Portworx volume resource.\",\n    \"required\": [\n     \"volumeID\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     },\n     \"volumeID\": {\n      \"description\": \"VolumeID uniquely identifies a Portworx volume\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.PreferredSchedulingTerm\": {\n    \"description\": \"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\n    \"required\": [\n     \"weight\",\n     \"preference\"\n    ],\n    \"properties\": {\n     \"preference\": {\n      \"description\": \"A node selector term, associated with the corresponding weight.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NodeSelectorTerm\"\n     },\n     \"weight\": {\n      \"description\": \"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Probe\": {\n    \"description\": \"Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.\",\n    \"properties\": {\n     \"exec\": {\n      \"description\": \"One and only one of the following should be specified. Exec specifies the action to take.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ExecAction\"\n     },\n     \"failureThreshold\": {\n      \"description\": \"Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"httpGet\": {\n      \"description\": \"HTTPGet specifies the http request to perform.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.HTTPGetAction\"\n     },\n     \"initialDelaySeconds\": {\n      \"description\": \"Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"periodSeconds\": {\n      \"description\": \"How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"successThreshold\": {\n      \"description\": \"Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"tcpSocket\": {\n      \"description\": \"TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.TCPSocketAction\"\n     },\n     \"timeoutSeconds\": {\n      \"description\": \"Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ProjectedVolumeSource\": {\n    \"description\": \"Represents a projected volume source\",\n    \"required\": [\n     \"sources\"\n    ],\n    \"properties\": {\n     \"defaultMode\": {\n      \"description\": \"Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"sources\": {\n      \"description\": \"list of volume projections\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.VolumeProjection\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.QuobyteVolumeSource\": {\n    \"description\": \"Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.\",\n    \"required\": [\n     \"registry\",\n     \"volume\"\n    ],\n    \"properties\": {\n     \"group\": {\n      \"description\": \"Group to map volume access to Default is no group\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\",\n      \"type\": \"boolean\"\n     },\n     \"registry\": {\n      \"description\": \"Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\",\n      \"type\": \"string\"\n     },\n     \"user\": {\n      \"description\": \"User to map volume access to Defaults to serivceaccount user\",\n      \"type\": \"string\"\n     },\n     \"volume\": {\n      \"description\": \"Volume is a string that references an already created Quobyte volume by name.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.RBDVolumeSource\": {\n    \"description\": \"Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.\",\n    \"required\": [\n     \"monitors\",\n     \"image\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\",\n      \"type\": \"string\"\n     },\n     \"image\": {\n      \"description\": \"The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\",\n      \"type\": \"string\"\n     },\n     \"keyring\": {\n      \"description\": \"Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\",\n      \"type\": \"string\"\n     },\n     \"monitors\": {\n      \"description\": \"A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"pool\": {\n      \"description\": \"The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\",\n      \"type\": \"boolean\"\n     },\n     \"secretRef\": {\n      \"description\": \"SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n     },\n     \"user\": {\n      \"description\": \"The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ReplicationController\": {\n    \"description\": \"ReplicationController represents the configuration of a replication controller.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationControllerSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationControllerStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationController\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ReplicationControllerCondition\": {\n    \"description\": \"ReplicationControllerCondition describes the state of a replication controller at a certain point.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastTransitionTime\": {\n      \"description\": \"The last time the condition transitioned from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"A human readable message indicating details about the transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"The reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the condition, one of True, False, Unknown.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type of replication controller condition.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ReplicationControllerList\": {\n    \"description\": \"ReplicationControllerList is a collection of replication controllers.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationController\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ReplicationControllerList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ReplicationControllerSpec\": {\n    \"description\": \"ReplicationControllerSpec is the specification of a replication controller.\",\n    \"properties\": {\n     \"minReadySeconds\": {\n      \"description\": \"Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"template\": {\n      \"description\": \"Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ReplicationControllerStatus\": {\n    \"description\": \"ReplicationControllerStatus represents the current status of a replication controller.\",\n    \"required\": [\n     \"replicas\"\n    ],\n    \"properties\": {\n     \"availableReplicas\": {\n      \"description\": \"The number of available replicas (ready for at least minReadySeconds) for this replication controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"conditions\": {\n      \"description\": \"Represents the latest available observations of a replication controller's current state.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ReplicationControllerCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"fullyLabeledReplicas\": {\n      \"description\": \"The number of pods that have labels matching the labels of the pod template of the replication controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"ObservedGeneration reflects the generation of the most recently observed replication controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"readyReplicas\": {\n      \"description\": \"The number of ready replicas for this replication controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ResourceFieldSelector\": {\n    \"description\": \"ResourceFieldSelector represents container resources (cpu, memory) and their output format\",\n    \"required\": [\n     \"resource\"\n    ],\n    \"properties\": {\n     \"containerName\": {\n      \"description\": \"Container name: required for volumes, optional for env vars\",\n      \"type\": \"string\"\n     },\n     \"divisor\": {\n      \"description\": \"Specifies the output format of the exposed resources, defaults to \\\"1\\\"\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     },\n     \"resource\": {\n      \"description\": \"Required: resource to select\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ResourceQuota\": {\n    \"description\": \"ResourceQuota sets aggregate quota restrictions enforced per namespace\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuotaSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuotaStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuota\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ResourceQuotaList\": {\n    \"description\": \"ResourceQuotaList is a list of ResourceQuota items.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of ResourceQuota objects. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ResourceQuota\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ResourceQuotaList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ResourceQuotaSpec\": {\n    \"description\": \"ResourceQuotaSpec defines the desired hard limits to enforce for Quota.\",\n    \"properties\": {\n     \"hard\": {\n      \"description\": \"Hard is the set of desired hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"scopes\": {\n      \"description\": \"A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ResourceQuotaStatus\": {\n    \"description\": \"ResourceQuotaStatus defines the enforced hard limits and observed use.\",\n    \"properties\": {\n     \"hard\": {\n      \"description\": \"Hard is the set of enforced hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"used\": {\n      \"description\": \"Used is the current observed total usage of the resource in the namespace.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ResourceRequirements\": {\n    \"description\": \"ResourceRequirements describes the compute resource requirements.\",\n    \"properties\": {\n     \"limits\": {\n      \"description\": \"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     },\n     \"requests\": {\n      \"description\": \"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.SELinuxOptions\": {\n    \"description\": \"SELinuxOptions are the labels to be applied to the container\",\n    \"properties\": {\n     \"level\": {\n      \"description\": \"Level is SELinux level label that applies to the container.\",\n      \"type\": \"string\"\n     },\n     \"role\": {\n      \"description\": \"Role is a SELinux role label that applies to the container.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type is a SELinux type label that applies to the container.\",\n      \"type\": \"string\"\n     },\n     \"user\": {\n      \"description\": \"User is a SELinux user label that applies to the container.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ScaleIOVolumeSource\": {\n    \"description\": \"ScaleIOVolumeSource represents a persistent ScaleIO volume\",\n    \"required\": [\n     \"gateway\",\n     \"system\",\n     \"secretRef\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"gateway\": {\n      \"description\": \"The host address of the ScaleIO API Gateway.\",\n      \"type\": \"string\"\n     },\n     \"protectionDomain\": {\n      \"description\": \"The name of the Protection Domain for the configured storage (defaults to \\\"default\\\").\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     },\n     \"secretRef\": {\n      \"description\": \"SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n     },\n     \"sslEnabled\": {\n      \"description\": \"Flag to enable/disable SSL communication with Gateway, default false\",\n      \"type\": \"boolean\"\n     },\n     \"storageMode\": {\n      \"description\": \"Indicates whether the storage for a volume should be thick or thin (defaults to \\\"thin\\\").\",\n      \"type\": \"string\"\n     },\n     \"storagePool\": {\n      \"description\": \"The Storage Pool associated with the protection domain (defaults to \\\"default\\\").\",\n      \"type\": \"string\"\n     },\n     \"system\": {\n      \"description\": \"The name of the storage system as configured in ScaleIO.\",\n      \"type\": \"string\"\n     },\n     \"volumeName\": {\n      \"description\": \"The name of a volume already created in the ScaleIO system that is associated with this volume source.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Secret\": {\n    \"description\": \"Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"data\": {\n      \"description\": \"Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\",\n       \"format\": \"byte\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"stringData\": {\n      \"description\": \"stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"type\": {\n      \"description\": \"Used to facilitate programmatic handling of secret data.\",\n      \"type\": \"string\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Secret\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.SecretEnvSource\": {\n    \"description\": \"SecretEnvSource selects a Secret to populate the environment variables with.\\n\\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.\",\n    \"properties\": {\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the Secret must be defined\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.SecretKeySelector\": {\n    \"description\": \"SecretKeySelector selects a key of a Secret.\",\n    \"required\": [\n     \"key\"\n    ],\n    \"properties\": {\n     \"key\": {\n      \"description\": \"The key of the secret to select from.  Must be a valid secret key.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the Secret or it's key must be defined\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.SecretList\": {\n    \"description\": \"SecretList is a list of Secret.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Secret\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"SecretList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.SecretProjection\": {\n    \"description\": \"Adapts a secret into a projected volume.\\n\\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.\",\n    \"properties\": {\n     \"items\": {\n      \"description\": \"If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.KeyToPath\"\n      }\n     },\n     \"name\": {\n      \"description\": \"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the Secret or its key must be defined\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.SecretVolumeSource\": {\n    \"description\": \"Adapts a Secret into a volume.\\n\\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.\",\n    \"properties\": {\n     \"defaultMode\": {\n      \"description\": \"Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"items\": {\n      \"description\": \"If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.KeyToPath\"\n      }\n     },\n     \"optional\": {\n      \"description\": \"Specify whether the Secret or it's keys must be defined\",\n      \"type\": \"boolean\"\n     },\n     \"secretName\": {\n      \"description\": \"Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.SecurityContext\": {\n    \"description\": \"SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.\",\n    \"properties\": {\n     \"capabilities\": {\n      \"description\": \"The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Capabilities\"\n     },\n     \"privileged\": {\n      \"description\": \"Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\",\n      \"type\": \"boolean\"\n     },\n     \"readOnlyRootFilesystem\": {\n      \"description\": \"Whether this container has a read-only root filesystem. Default is false.\",\n      \"type\": \"boolean\"\n     },\n     \"runAsNonRoot\": {\n      \"description\": \"Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\",\n      \"type\": \"boolean\"\n     },\n     \"runAsUser\": {\n      \"description\": \"The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"seLinuxOptions\": {\n      \"description\": \"The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SELinuxOptions\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Service\": {\n    \"description\": \"Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceSpec\"\n     },\n     \"status\": {\n      \"description\": \"Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"Service\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ServiceAccount\": {\n    \"description\": \"ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"automountServiceAccountToken\": {\n      \"description\": \"AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.\",\n      \"type\": \"boolean\"\n     },\n     \"imagePullSecrets\": {\n      \"description\": \"ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"secrets\": {\n      \"description\": \"Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccount\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ServiceAccountList\": {\n    \"description\": \"ServiceAccountList is a list of ServiceAccount objects\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServiceAccount\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceAccountList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ServiceList\": {\n    \"description\": \"ServiceList holds a list of services.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of services\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Service\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"\",\n      \"version\": \"v1\",\n      \"kind\": \"ServiceList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ServicePort\": {\n    \"description\": \"ServicePort contains information on service's port.\",\n    \"required\": [\n     \"port\"\n    ],\n    \"properties\": {\n     \"name\": {\n      \"description\": \"The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.\",\n      \"type\": \"string\"\n     },\n     \"nodePort\": {\n      \"description\": \"The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"port\": {\n      \"description\": \"The port that will be exposed by this service.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"protocol\": {\n      \"description\": \"The IP protocol for this port. Supports \\\"TCP\\\" and \\\"UDP\\\". Default is TCP.\",\n      \"type\": \"string\"\n     },\n     \"targetPort\": {\n      \"description\": \"Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ServiceSpec\": {\n    \"description\": \"ServiceSpec describes the attributes that a user creates on a service.\",\n    \"properties\": {\n     \"clusterIP\": {\n      \"description\": \"clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \\\"None\\\", empty string (\\\"\\\"), or a valid IP address. \\\"None\\\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\",\n      \"type\": \"string\"\n     },\n     \"externalIPs\": {\n      \"description\": \"externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"externalName\": {\n      \"description\": \"externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName.\",\n      \"type\": \"string\"\n     },\n     \"externalTrafficPolicy\": {\n      \"description\": \"externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \\\"Local\\\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \\\"Cluster\\\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.\",\n      \"type\": \"string\"\n     },\n     \"healthCheckNodePort\": {\n      \"description\": \"healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"loadBalancerIP\": {\n      \"description\": \"Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.\",\n      \"type\": \"string\"\n     },\n     \"loadBalancerSourceRanges\": {\n      \"description\": \"If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\\\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"ports\": {\n      \"description\": \"The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ServicePort\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"port\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"selector\": {\n      \"description\": \"Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"sessionAffinity\": {\n      \"description\": \"Supports \\\"ClientIP\\\" and \\\"None\\\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \\\"ExternalName\\\" maps to the specified externalName. \\\"ClusterIP\\\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \\\"None\\\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \\\"NodePort\\\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \\\"LoadBalancer\\\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.ServiceStatus\": {\n    \"description\": \"ServiceStatus represents the current status of a service.\",\n    \"properties\": {\n     \"loadBalancer\": {\n      \"description\": \"LoadBalancer contains the current status of the load-balancer, if one is present.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LoadBalancerStatus\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.StorageOSPersistentVolumeSource\": {\n    \"description\": \"Represents a StorageOS persistent volume resource.\",\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     },\n     \"secretRef\": {\n      \"description\": \"SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference\"\n     },\n     \"volumeName\": {\n      \"description\": \"VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\",\n      \"type\": \"string\"\n     },\n     \"volumeNamespace\": {\n      \"description\": \"VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \\\"default\\\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.StorageOSVolumeSource\": {\n    \"description\": \"Represents a StorageOS persistent volume resource.\",\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\",\n      \"type\": \"boolean\"\n     },\n     \"secretRef\": {\n      \"description\": \"SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LocalObjectReference\"\n     },\n     \"volumeName\": {\n      \"description\": \"VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\",\n      \"type\": \"string\"\n     },\n     \"volumeNamespace\": {\n      \"description\": \"VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \\\"default\\\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.TCPSocketAction\": {\n    \"description\": \"TCPSocketAction describes an action based on opening a socket\",\n    \"required\": [\n     \"port\"\n    ],\n    \"properties\": {\n     \"host\": {\n      \"description\": \"Optional: Host name to connect to, defaults to the pod IP.\",\n      \"type\": \"string\"\n     },\n     \"port\": {\n      \"description\": \"Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Taint\": {\n    \"description\": \"The node this Taint is attached to has the effect \\\"effect\\\" on any pod that that does not tolerate the Taint.\",\n    \"required\": [\n     \"key\",\n     \"effect\"\n    ],\n    \"properties\": {\n     \"effect\": {\n      \"description\": \"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\",\n      \"type\": \"string\"\n     },\n     \"key\": {\n      \"description\": \"Required. The taint key to be applied to a node.\",\n      \"type\": \"string\",\n      \"x-kubernetes-patch-merge-key\": \"key\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"timeAdded\": {\n      \"description\": \"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"value\": {\n      \"description\": \"Required. The taint value corresponding to the taint key.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Toleration\": {\n    \"description\": \"The pod this Toleration is attached to tolerates any taint that matches the triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\n    \"properties\": {\n     \"effect\": {\n      \"description\": \"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\n      \"type\": \"string\"\n     },\n     \"key\": {\n      \"description\": \"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\n      \"type\": \"string\",\n      \"x-kubernetes-patch-merge-key\": \"key\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"operator\": {\n      \"description\": \"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\",\n      \"type\": \"string\"\n     },\n     \"tolerationSeconds\": {\n      \"description\": \"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"value\": {\n      \"description\": \"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.Volume\": {\n    \"description\": \"Volume represents a named volume in a pod that may be accessed by any container in the pod.\",\n    \"required\": [\n     \"name\"\n    ],\n    \"properties\": {\n     \"awsElasticBlockStore\": {\n      \"description\": \"AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.AWSElasticBlockStoreVolumeSource\"\n     },\n     \"azureDisk\": {\n      \"description\": \"AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.AzureDiskVolumeSource\"\n     },\n     \"azureFile\": {\n      \"description\": \"AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.AzureFileVolumeSource\"\n     },\n     \"cephfs\": {\n      \"description\": \"CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.CephFSVolumeSource\"\n     },\n     \"cinder\": {\n      \"description\": \"Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.CinderVolumeSource\"\n     },\n     \"configMap\": {\n      \"description\": \"ConfigMap represents a configMap that should populate this volume\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMapVolumeSource\"\n     },\n     \"downwardAPI\": {\n      \"description\": \"DownwardAPI represents downward API about the pod that should populate this volume\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.DownwardAPIVolumeSource\"\n     },\n     \"emptyDir\": {\n      \"description\": \"EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EmptyDirVolumeSource\"\n     },\n     \"fc\": {\n      \"description\": \"FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.FCVolumeSource\"\n     },\n     \"flexVolume\": {\n      \"description\": \"FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.FlexVolumeSource\"\n     },\n     \"flocker\": {\n      \"description\": \"Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.FlockerVolumeSource\"\n     },\n     \"gcePersistentDisk\": {\n      \"description\": \"GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.GCEPersistentDiskVolumeSource\"\n     },\n     \"gitRepo\": {\n      \"description\": \"GitRepo represents a git repository at a particular revision.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.GitRepoVolumeSource\"\n     },\n     \"glusterfs\": {\n      \"description\": \"Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.GlusterfsVolumeSource\"\n     },\n     \"hostPath\": {\n      \"description\": \"HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.HostPathVolumeSource\"\n     },\n     \"iscsi\": {\n      \"description\": \"ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ISCSIVolumeSource\"\n     },\n     \"name\": {\n      \"description\": \"Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\n      \"type\": \"string\"\n     },\n     \"nfs\": {\n      \"description\": \"NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.NFSVolumeSource\"\n     },\n     \"persistentVolumeClaim\": {\n      \"description\": \"PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimVolumeSource\"\n     },\n     \"photonPersistentDisk\": {\n      \"description\": \"PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PhotonPersistentDiskVolumeSource\"\n     },\n     \"portworxVolume\": {\n      \"description\": \"PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PortworxVolumeSource\"\n     },\n     \"projected\": {\n      \"description\": \"Items for all in one resources secrets, configmaps, and downward API\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ProjectedVolumeSource\"\n     },\n     \"quobyte\": {\n      \"description\": \"Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.QuobyteVolumeSource\"\n     },\n     \"rbd\": {\n      \"description\": \"RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.RBDVolumeSource\"\n     },\n     \"scaleIO\": {\n      \"description\": \"ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ScaleIOVolumeSource\"\n     },\n     \"secret\": {\n      \"description\": \"Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SecretVolumeSource\"\n     },\n     \"storageos\": {\n      \"description\": \"StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.StorageOSVolumeSource\"\n     },\n     \"vsphereVolume\": {\n      \"description\": \"VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.VsphereVirtualDiskVolumeSource\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.VolumeMount\": {\n    \"description\": \"VolumeMount describes a mounting of a Volume within a container.\",\n    \"required\": [\n     \"name\",\n     \"mountPath\"\n    ],\n    \"properties\": {\n     \"mountPath\": {\n      \"description\": \"Path within the container at which the volume should be mounted.  Must not contain ':'.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"This must match the Name of a Volume.\",\n      \"type\": \"string\"\n     },\n     \"readOnly\": {\n      \"description\": \"Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\",\n      \"type\": \"boolean\"\n     },\n     \"subPath\": {\n      \"description\": \"Path within the volume from which the container's volume should be mounted. Defaults to \\\"\\\" (volume's root).\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.VolumeProjection\": {\n    \"description\": \"Projection that may be projected along with other supported volume types\",\n    \"properties\": {\n     \"configMap\": {\n      \"description\": \"information about the configMap data to project\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ConfigMapProjection\"\n     },\n     \"downwardAPI\": {\n      \"description\": \"information about the downwardAPI data to project\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.DownwardAPIProjection\"\n     },\n     \"secret\": {\n      \"description\": \"information about the secret data to project\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SecretProjection\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.VsphereVirtualDiskVolumeSource\": {\n    \"description\": \"Represents a vSphere volume resource.\",\n    \"required\": [\n     \"volumePath\"\n    ],\n    \"properties\": {\n     \"fsType\": {\n      \"description\": \"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \\\"ext4\\\", \\\"xfs\\\", \\\"ntfs\\\". Implicitly inferred to be \\\"ext4\\\" if unspecified.\",\n      \"type\": \"string\"\n     },\n     \"storagePolicyID\": {\n      \"description\": \"Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\",\n      \"type\": \"string\"\n     },\n     \"storagePolicyName\": {\n      \"description\": \"Storage Policy Based Management (SPBM) profile name.\",\n      \"type\": \"string\"\n     },\n     \"volumePath\": {\n      \"description\": \"Path that identifies vSphere volume vmdk\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.api.v1.WeightedPodAffinityTerm\": {\n    \"description\": \"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\n    \"required\": [\n     \"weight\",\n     \"podAffinityTerm\"\n    ],\n    \"properties\": {\n     \"podAffinityTerm\": {\n      \"description\": \"Required. A pod affinity term, associated with the corresponding weight.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodAffinityTerm\"\n     },\n     \"weight\": {\n      \"description\": \"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.AdmissionHookClientConfig\": {\n    \"description\": \"AdmissionHookClientConfig contains the information to make a TLS connection with the webhook\",\n    \"required\": [\n     \"service\",\n     \"caBundle\"\n    ],\n    \"properties\": {\n     \"caBundle\": {\n      \"description\": \"CABundle is a PEM encoded CA bundle which will be used to validate webhook's server certificate. Required\",\n      \"type\": \"string\",\n      \"format\": \"byte\"\n     },\n     \"service\": {\n      \"description\": \"Service is a reference to the service for this webhook. If there is only one port open for the service, that port will be used. If there are multiple ports open, port 443 will be used if it is open, otherwise it is an error. Required\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ServiceReference\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHook\": {\n    \"description\": \"ExternalAdmissionHook describes an external admission webhook and the resources and operations it applies to.\",\n    \"required\": [\n     \"name\",\n     \"clientConfig\"\n    ],\n    \"properties\": {\n     \"clientConfig\": {\n      \"description\": \"ClientConfig defines how to communicate with the hook. Required\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.AdmissionHookClientConfig\"\n     },\n     \"failurePolicy\": {\n      \"description\": \"FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"The name of the external admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \\\"imagepolicy\\\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.\",\n      \"type\": \"string\"\n     },\n     \"rules\": {\n      \"description\": \"Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.RuleWithOperations\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\": {\n    \"description\": \"ExternalAdmissionHookConfiguration describes the configuration of initializers.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"externalAdmissionHooks\": {\n      \"description\": \"ExternalAdmissionHooks is a list of external admission webhooks and the affected resources and operations.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHook\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfiguration\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfigurationList\": {\n    \"description\": \"ExternalAdmissionHookConfigurationList is a list of ExternalAdmissionHookConfiguration.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of ExternalAdmissionHookConfiguration.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ExternalAdmissionHookConfiguration\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ExternalAdmissionHookConfigurationList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.Initializer\": {\n    \"description\": \"Initializer describes the name and the failure policy of an initializer, and what resources it applies to.\",\n    \"required\": [\n     \"name\"\n    ],\n    \"properties\": {\n     \"failurePolicy\": {\n      \"description\": \"FailurePolicy defines what happens if the responsible initializer controller fails to takes action. Allowed values are Ignore, or Fail. If \\\"Ignore\\\" is set, initializer is removed from the initializers list of an object if the timeout is reached; If \\\"Fail\\\" is set, admissionregistration returns timeout error if the timeout is reached.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name is the identifier of the initializer. It will be added to the object that needs to be initialized. Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where \\\"alwayspullimages\\\" is the name of the webhook, and kubernetes.io is the name of the organization. Required\",\n      \"type\": \"string\"\n     },\n     \"rules\": {\n      \"description\": \"Rules describes what resources/subresources the initializer cares about. The initializer cares about an operation if it matches _any_ Rule. Rule.Resources must not include subresources.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.Rule\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\": {\n    \"description\": \"InitializerConfiguration describes the configuration of initializers.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"initializers\": {\n      \"description\": \"Initializers is a list of resources and their default initializers Order-sensitive. When merging multiple InitializerConfigurations, we sort the initializers from different InitializerConfigurations by the name of the InitializerConfigurations; the order of the initializers from the same InitializerConfiguration is preserved.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.Initializer\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"name\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfiguration\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfigurationList\": {\n    \"description\": \"InitializerConfigurationList is a list of InitializerConfiguration.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of InitializerConfiguration.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.InitializerConfiguration\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"admissionregistration.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"InitializerConfigurationList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.Rule\": {\n    \"description\": \"Rule is a tuple of APIGroups, APIVersion, and Resources.It is recommended to make sure that all the tuple expansions are valid.\",\n    \"properties\": {\n     \"apiGroups\": {\n      \"description\": \"APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"apiVersions\": {\n      \"description\": \"APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"resources\": {\n      \"description\": \"Resources is a list of resources this rule applies to.\\n\\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\\n\\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\\n\\nDepending on the enclosing object, subresources might not be allowed. Required.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.RuleWithOperations\": {\n    \"description\": \"RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.\",\n    \"properties\": {\n     \"apiGroups\": {\n      \"description\": \"APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"apiVersions\": {\n      \"description\": \"APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"operations\": {\n      \"description\": \"Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If '*' is present, the length of the slice must be one. Required.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"resources\": {\n      \"description\": \"Resources is a list of resources this rule applies to.\\n\\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\\n\\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\\n\\nDepending on the enclosing object, subresources might not be allowed. Required.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.admissionregistration.v1alpha1.ServiceReference\": {\n    \"description\": \"ServiceReference holds a reference to Service.legacy.k8s.io\",\n    \"required\": [\n     \"namespace\",\n     \"name\"\n    ],\n    \"properties\": {\n     \"name\": {\n      \"description\": \"Name is the name of the service Required\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace is the namespace of the service Required\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\": {\n    \"description\": \"ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.\",\n    \"required\": [\n     \"revision\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"data\": {\n      \"description\": \"Data is the serialized representation of the state.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"revision\": {\n      \"description\": \"Revision indicates the revision of the state represented by Data.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevision\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevisionList\": {\n    \"description\": \"ControllerRevisionList is a resource containing a list of ControllerRevision objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of ControllerRevisions\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ControllerRevision\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ControllerRevisionList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\": {\n    \"description\": \"Deployment enables declarative updates for Pods and ReplicaSets.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of the Deployment.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentSpec\"\n     },\n     \"status\": {\n      \"description\": \"Most recently observed status of the Deployment.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentCondition\": {\n    \"description\": \"DeploymentCondition describes the state of a deployment at a certain point.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastTransitionTime\": {\n      \"description\": \"Last time the condition transitioned from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"lastUpdateTime\": {\n      \"description\": \"The last time this condition was updated.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"A human readable message indicating details about the transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"The reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the condition, one of True, False, Unknown.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type of deployment condition.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentList\": {\n    \"description\": \"DeploymentList is a list of Deployments.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of Deployments.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.Deployment\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DeploymentList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentRollback\": {\n    \"description\": \"DeploymentRollback stores the information required to rollback a deployment.\",\n    \"required\": [\n     \"name\",\n     \"rollbackTo\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Required: This must match the Name of a deployment.\",\n      \"type\": \"string\"\n     },\n     \"rollbackTo\": {\n      \"description\": \"The config of this deployment rollback.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.RollbackConfig\"\n     },\n     \"updatedAnnotations\": {\n      \"description\": \"The annotations to be updated to a deployment\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DeploymentRollback\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentSpec\": {\n    \"description\": \"DeploymentSpec is the specification of the desired behavior of the Deployment.\",\n    \"required\": [\n     \"template\"\n    ],\n    \"properties\": {\n     \"minReadySeconds\": {\n      \"description\": \"Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"paused\": {\n      \"description\": \"Indicates that the deployment is paused.\",\n      \"type\": \"boolean\"\n     },\n     \"progressDeadlineSeconds\": {\n      \"description\": \"The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"revisionHistoryLimit\": {\n      \"description\": \"The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"rollbackTo\": {\n      \"description\": \"The config this deployment is rolling back to. Will be cleared after rollback is done.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.RollbackConfig\"\n     },\n     \"selector\": {\n      \"description\": \"Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"strategy\": {\n      \"description\": \"The deployment strategy to use to replace existing pods with new ones.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentStrategy\"\n     },\n     \"template\": {\n      \"description\": \"Template describes the pods that will be created.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentStatus\": {\n    \"description\": \"DeploymentStatus is the most recently observed status of the Deployment.\",\n    \"properties\": {\n     \"availableReplicas\": {\n      \"description\": \"Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"collisionCount\": {\n      \"description\": \"Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"conditions\": {\n      \"description\": \"Represents the latest available observations of a deployment's current state.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"The generation observed by the deployment controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"readyReplicas\": {\n      \"description\": \"Total number of ready pods targeted by this deployment.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Total number of non-terminated pods targeted by this deployment (their labels match the selector).\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"unavailableReplicas\": {\n      \"description\": \"Total number of unavailable pods targeted by this deployment.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"updatedReplicas\": {\n      \"description\": \"Total number of non-terminated pods targeted by this deployment that have the desired template spec.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.DeploymentStrategy\": {\n    \"description\": \"DeploymentStrategy describes how to replace existing pods with new ones.\",\n    \"properties\": {\n     \"rollingUpdate\": {\n      \"description\": \"Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.RollingUpdateDeployment\"\n     },\n     \"type\": {\n      \"description\": \"Type of deployment. Can be \\\"Recreate\\\" or \\\"RollingUpdate\\\". Default is RollingUpdate.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.RollbackConfig\": {\n    \"properties\": {\n     \"revision\": {\n      \"description\": \"The revision to rollback to. If set to 0, rollback to the last revision.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.RollingUpdateDeployment\": {\n    \"description\": \"Spec to control the desired behavior of rolling update.\",\n    \"properties\": {\n     \"maxSurge\": {\n      \"description\": \"The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     },\n     \"maxUnavailable\": {\n      \"description\": \"The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.RollingUpdateStatefulSetStrategy\": {\n    \"description\": \"RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.\",\n    \"properties\": {\n     \"partition\": {\n      \"description\": \"Partition indicates the ordinal at which the StatefulSet should be partitioned.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.Scale\": {\n    \"description\": \"Scale represents a scaling request for a resource.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ScaleSpec\"\n     },\n     \"status\": {\n      \"description\": \"current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.ScaleStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.ScaleSpec\": {\n    \"description\": \"ScaleSpec describes the attributes of a scale subresource\",\n    \"properties\": {\n     \"replicas\": {\n      \"description\": \"desired number of instances for the scaled object.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.ScaleStatus\": {\n    \"description\": \"ScaleStatus represents the current status of a scale subresource.\",\n    \"required\": [\n     \"replicas\"\n    ],\n    \"properties\": {\n     \"replicas\": {\n      \"description\": \"actual number of observed instances of the scaled object.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"targetSelector\": {\n      \"description\": \"label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\": {\n    \"description\": \"StatefulSet represents a set of pods with consistent identities. Identities are defined as:\\n - Network: A single stable DNS and hostname.\\n - Storage: As many VolumeClaims as requested.\\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the desired identities of pods in this set.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSet\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetList\": {\n    \"description\": \"StatefulSetList is a collection of StatefulSets.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSet\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"apps\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StatefulSetList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetSpec\": {\n    \"description\": \"A StatefulSetSpec is the specification of a StatefulSet.\",\n    \"required\": [\n     \"template\",\n     \"serviceName\"\n    ],\n    \"properties\": {\n     \"podManagementPolicy\": {\n      \"description\": \"podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\",\n      \"type\": \"string\"\n     },\n     \"replicas\": {\n      \"description\": \"replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"revisionHistoryLimit\": {\n      \"description\": \"revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"serviceName\": {\n      \"description\": \"serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \\\"pod-specific-string\\\" is managed by the StatefulSet controller.\",\n      \"type\": \"string\"\n     },\n     \"template\": {\n      \"description\": \"template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     },\n     \"updateStrategy\": {\n      \"description\": \"updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetUpdateStrategy\"\n     },\n     \"volumeClaimTemplates\": {\n      \"description\": \"volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetStatus\": {\n    \"description\": \"StatefulSetStatus represents the current state of a StatefulSet.\",\n    \"required\": [\n     \"replicas\"\n    ],\n    \"properties\": {\n     \"currentReplicas\": {\n      \"description\": \"currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"currentRevision\": {\n      \"description\": \"currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).\",\n      \"type\": \"string\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"readyReplicas\": {\n      \"description\": \"readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"replicas is the number of Pods created by the StatefulSet controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"updateRevision\": {\n      \"description\": \"updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)\",\n      \"type\": \"string\"\n     },\n     \"updatedReplicas\": {\n      \"description\": \"updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.apps.v1beta1.StatefulSetUpdateStrategy\": {\n    \"description\": \"StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.\",\n    \"properties\": {\n     \"rollingUpdate\": {\n      \"description\": \"RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.apps.v1beta1.RollingUpdateStatefulSetStrategy\"\n     },\n     \"type\": {\n      \"description\": \"Type indicates the type of the StatefulSetUpdateStrategy.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1.TokenReview\": {\n    \"description\": \"TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1.TokenReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request can be authenticated.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1.TokenReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authentication.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"TokenReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1.TokenReviewSpec\": {\n    \"description\": \"TokenReviewSpec is a description of the token authentication request.\",\n    \"properties\": {\n     \"token\": {\n      \"description\": \"Token is the opaque bearer token.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1.TokenReviewStatus\": {\n    \"description\": \"TokenReviewStatus is the result of the token authentication request.\",\n    \"properties\": {\n     \"authenticated\": {\n      \"description\": \"Authenticated indicates that the token was associated with a known user.\",\n      \"type\": \"boolean\"\n     },\n     \"error\": {\n      \"description\": \"Error indicates that the token couldn't be checked\",\n      \"type\": \"string\"\n     },\n     \"user\": {\n      \"description\": \"User is the UserInfo associated with the provided token.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1.UserInfo\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1.UserInfo\": {\n    \"description\": \"UserInfo holds the information about the user needed to implement the user.Info interface.\",\n    \"properties\": {\n     \"extra\": {\n      \"description\": \"Any additional information provided by the authenticator.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"array\",\n       \"items\": {\n        \"type\": \"string\"\n       }\n      }\n     },\n     \"groups\": {\n      \"description\": \"The names of groups this user is a part of.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"uid\": {\n      \"description\": \"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\",\n      \"type\": \"string\"\n     },\n     \"username\": {\n      \"description\": \"The name that uniquely identifies this user among all active users.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1beta1.TokenReview\": {\n    \"description\": \"TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1beta1.TokenReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request can be authenticated.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1beta1.TokenReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authentication.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"TokenReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1beta1.TokenReviewSpec\": {\n    \"description\": \"TokenReviewSpec is a description of the token authentication request.\",\n    \"properties\": {\n     \"token\": {\n      \"description\": \"Token is the opaque bearer token.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1beta1.TokenReviewStatus\": {\n    \"description\": \"TokenReviewStatus is the result of the token authentication request.\",\n    \"properties\": {\n     \"authenticated\": {\n      \"description\": \"Authenticated indicates that the token was associated with a known user.\",\n      \"type\": \"boolean\"\n     },\n     \"error\": {\n      \"description\": \"Error indicates that the token couldn't be checked\",\n      \"type\": \"string\"\n     },\n     \"user\": {\n      \"description\": \"User is the UserInfo associated with the provided token.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authentication.v1beta1.UserInfo\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authentication.v1beta1.UserInfo\": {\n    \"description\": \"UserInfo holds the information about the user needed to implement the user.Info interface.\",\n    \"properties\": {\n     \"extra\": {\n      \"description\": \"Any additional information provided by the authenticator.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"array\",\n       \"items\": {\n        \"type\": \"string\"\n       }\n      }\n     },\n     \"groups\": {\n      \"description\": \"The names of groups this user is a part of.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"uid\": {\n      \"description\": \"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\",\n      \"type\": \"string\"\n     },\n     \"username\": {\n      \"description\": \"The name that uniquely identifies this user among all active users.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.LocalSubjectAccessReview\": {\n    \"description\": \"LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request is allowed or not\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"LocalSubjectAccessReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.NonResourceAttributes\": {\n    \"description\": \"NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface\",\n    \"properties\": {\n     \"path\": {\n      \"description\": \"Path is the URL path of the request\",\n      \"type\": \"string\"\n     },\n     \"verb\": {\n      \"description\": \"Verb is the standard HTTP verb\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.ResourceAttributes\": {\n    \"description\": \"ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface\",\n    \"properties\": {\n     \"group\": {\n      \"description\": \"Group is the API Group of the Resource.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name is the name of the resource being requested for a \\\"get\\\" or deleted for a \\\"delete\\\". \\\"\\\" (empty) means all.\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \\\"\\\" (empty) is defaulted for LocalSubjectAccessReviews \\\"\\\" (empty) is empty for cluster-scoped resources \\\"\\\" (empty) means \\\"all\\\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\",\n      \"type\": \"string\"\n     },\n     \"resource\": {\n      \"description\": \"Resource is one of the existing resource types.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     },\n     \"subresource\": {\n      \"description\": \"Subresource is one of the existing resource types.  \\\"\\\" means none.\",\n      \"type\": \"string\"\n     },\n     \"verb\": {\n      \"description\": \"Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     },\n     \"version\": {\n      \"description\": \"Version is the API Version of the Resource.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.SelfSubjectAccessReview\": {\n    \"description\": \"SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \\\"in all namespaces\\\".  Self is a special case, because users should always be able to check whether they can perform an action\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated.  user and groups must be empty\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SelfSubjectAccessReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request is allowed or not\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"SelfSubjectAccessReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.SelfSubjectAccessReviewSpec\": {\n    \"description\": \"SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\",\n    \"properties\": {\n     \"nonResourceAttributes\": {\n      \"description\": \"NonResourceAttributes describes information for a non-resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.NonResourceAttributes\"\n     },\n     \"resourceAttributes\": {\n      \"description\": \"ResourceAuthorizationAttributes describes information for a resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.ResourceAttributes\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReview\": {\n    \"description\": \"SubjectAccessReview checks whether or not a user or group can perform an action.\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request is allowed or not\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"SubjectAccessReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReviewSpec\": {\n    \"description\": \"SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\",\n    \"properties\": {\n     \"extra\": {\n      \"description\": \"Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"array\",\n       \"items\": {\n        \"type\": \"string\"\n       }\n      }\n     },\n     \"groups\": {\n      \"description\": \"Groups is the groups you're testing for.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"nonResourceAttributes\": {\n      \"description\": \"NonResourceAttributes describes information for a non-resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.NonResourceAttributes\"\n     },\n     \"resourceAttributes\": {\n      \"description\": \"ResourceAuthorizationAttributes describes information for a resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1.ResourceAttributes\"\n     },\n     \"user\": {\n      \"description\": \"User is the user you're testing for. If you specify \\\"User\\\" but not \\\"Groups\\\", then is it interpreted as \\\"What if User were not a member of any groups\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1.SubjectAccessReviewStatus\": {\n    \"description\": \"SubjectAccessReviewStatus\",\n    \"required\": [\n     \"allowed\"\n    ],\n    \"properties\": {\n     \"allowed\": {\n      \"description\": \"Allowed is required.  True if the action would be allowed, false otherwise.\",\n      \"type\": \"boolean\"\n     },\n     \"evaluationError\": {\n      \"description\": \"EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"Reason is optional.  It indicates why a request was allowed or denied.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.LocalSubjectAccessReview\": {\n    \"description\": \"LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request is allowed or not\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"LocalSubjectAccessReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.NonResourceAttributes\": {\n    \"description\": \"NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface\",\n    \"properties\": {\n     \"path\": {\n      \"description\": \"Path is the URL path of the request\",\n      \"type\": \"string\"\n     },\n     \"verb\": {\n      \"description\": \"Verb is the standard HTTP verb\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.ResourceAttributes\": {\n    \"description\": \"ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface\",\n    \"properties\": {\n     \"group\": {\n      \"description\": \"Group is the API Group of the Resource.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name is the name of the resource being requested for a \\\"get\\\" or deleted for a \\\"delete\\\". \\\"\\\" (empty) means all.\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \\\"\\\" (empty) is defaulted for LocalSubjectAccessReviews \\\"\\\" (empty) is empty for cluster-scoped resources \\\"\\\" (empty) means \\\"all\\\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview\",\n      \"type\": \"string\"\n     },\n     \"resource\": {\n      \"description\": \"Resource is one of the existing resource types.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     },\n     \"subresource\": {\n      \"description\": \"Subresource is one of the existing resource types.  \\\"\\\" means none.\",\n      \"type\": \"string\"\n     },\n     \"verb\": {\n      \"description\": \"Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     },\n     \"version\": {\n      \"description\": \"Version is the API Version of the Resource.  \\\"*\\\" means all.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SelfSubjectAccessReview\": {\n    \"description\": \"SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \\\"in all namespaces\\\".  Self is a special case, because users should always be able to check whether they can perform an action\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated.  user and groups must be empty\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SelfSubjectAccessReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request is allowed or not\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"SelfSubjectAccessReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SelfSubjectAccessReviewSpec\": {\n    \"description\": \"SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\",\n    \"properties\": {\n     \"nonResourceAttributes\": {\n      \"description\": \"NonResourceAttributes describes information for a non-resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.NonResourceAttributes\"\n     },\n     \"resourceAttributes\": {\n      \"description\": \"ResourceAuthorizationAttributes describes information for a resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.ResourceAttributes\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReview\": {\n    \"description\": \"SubjectAccessReview checks whether or not a user or group can perform an action.\",\n    \"required\": [\n     \"spec\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec holds information about the request being evaluated\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReviewSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is filled in by the server and indicates whether the request is allowed or not\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReviewStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"SubjectAccessReview\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReviewSpec\": {\n    \"description\": \"SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set\",\n    \"properties\": {\n     \"extra\": {\n      \"description\": \"Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"array\",\n       \"items\": {\n        \"type\": \"string\"\n       }\n      }\n     },\n     \"group\": {\n      \"description\": \"Groups is the groups you're testing for.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"nonResourceAttributes\": {\n      \"description\": \"NonResourceAttributes describes information for a non-resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.NonResourceAttributes\"\n     },\n     \"resourceAttributes\": {\n      \"description\": \"ResourceAuthorizationAttributes describes information for a resource access request\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.authorization.v1beta1.ResourceAttributes\"\n     },\n     \"user\": {\n      \"description\": \"User is the user you're testing for. If you specify \\\"User\\\" but not \\\"Group\\\", then is it interpreted as \\\"What if User were not a member of any groups\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.authorization.v1beta1.SubjectAccessReviewStatus\": {\n    \"description\": \"SubjectAccessReviewStatus\",\n    \"required\": [\n     \"allowed\"\n    ],\n    \"properties\": {\n     \"allowed\": {\n      \"description\": \"Allowed is required.  True if the action would be allowed, false otherwise.\",\n      \"type\": \"boolean\"\n     },\n     \"evaluationError\": {\n      \"description\": \"EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"Reason is optional.  It indicates why a request was allowed or denied.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.CrossVersionObjectReference\": {\n    \"description\": \"CrossVersionObjectReference contains enough information to let you identify the referred resource.\",\n    \"required\": [\n     \"kind\",\n     \"name\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"API version of the referent\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\\\"\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\": {\n    \"description\": \"configuration of a horizontal pod autoscaler.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerSpec\"\n     },\n     \"status\": {\n      \"description\": \"current information about the autoscaler.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerList\": {\n    \"description\": \"list of horizontal pod autoscaler objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"list of horizontal pod autoscaler objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"HorizontalPodAutoscalerList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerSpec\": {\n    \"description\": \"specification of a horizontal pod autoscaler.\",\n    \"required\": [\n     \"scaleTargetRef\",\n     \"maxReplicas\"\n    ],\n    \"properties\": {\n     \"maxReplicas\": {\n      \"description\": \"upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"minReplicas\": {\n      \"description\": \"lower limit for the number of pods that can be set by the autoscaler, default 1.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"scaleTargetRef\": {\n      \"description\": \"reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.CrossVersionObjectReference\"\n     },\n     \"targetCPUUtilizationPercentage\": {\n      \"description\": \"target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerStatus\": {\n    \"description\": \"current status of a horizontal pod autoscaler\",\n    \"required\": [\n     \"currentReplicas\",\n     \"desiredReplicas\"\n    ],\n    \"properties\": {\n     \"currentCPUUtilizationPercentage\": {\n      \"description\": \"current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"currentReplicas\": {\n      \"description\": \"current number of replicas of pods managed by this autoscaler.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"desiredReplicas\": {\n      \"description\": \"desired number of replicas of pods managed by this autoscaler.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"lastScaleTime\": {\n      \"description\": \"last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"most recent generation observed by this autoscaler.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.Scale\": {\n    \"description\": \"Scale represents a scaling request for a resource.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.ScaleSpec\"\n     },\n     \"status\": {\n      \"description\": \"current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v1.ScaleStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"autoscaling\",\n      \"version\": \"v1\",\n      \"kind\": \"Scale\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.ScaleSpec\": {\n    \"description\": \"ScaleSpec describes the attributes of a scale subresource.\",\n    \"properties\": {\n     \"replicas\": {\n      \"description\": \"desired number of instances for the scaled object.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v1.ScaleStatus\": {\n    \"description\": \"ScaleStatus represents the current status of a scale subresource.\",\n    \"required\": [\n     \"replicas\"\n    ],\n    \"properties\": {\n     \"replicas\": {\n      \"description\": \"actual number of observed instances of the scaled object.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.CrossVersionObjectReference\": {\n    \"description\": \"CrossVersionObjectReference contains enough information to let you identify the referred resource.\",\n    \"required\": [\n     \"kind\",\n     \"name\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"API version of the referent\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\\\"\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\": {\n    \"description\": \"HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerSpec\"\n     },\n     \"status\": {\n      \"description\": \"status is the current information about the autoscaler.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscaler\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerCondition\": {\n    \"description\": \"HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastTransitionTime\": {\n      \"description\": \"lastTransitionTime is the last time the condition transitioned from one status to another\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"message is a human-readable explanation containing details about the transition\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"reason is the reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"status is the status of the condition (True, False, Unknown)\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"type describes the current condition\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerList\": {\n    \"description\": \"HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"items is the list of horizontal pod autoscaler objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscaler\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"metadata is the standard list metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"autoscaling\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"HorizontalPodAutoscalerList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerSpec\": {\n    \"description\": \"HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.\",\n    \"required\": [\n     \"scaleTargetRef\",\n     \"maxReplicas\"\n    ],\n    \"properties\": {\n     \"maxReplicas\": {\n      \"description\": \"maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"metrics\": {\n      \"description\": \"metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.MetricSpec\"\n      }\n     },\n     \"minReplicas\": {\n      \"description\": \"minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"scaleTargetRef\": {\n      \"description\": \"scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.CrossVersionObjectReference\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerStatus\": {\n    \"description\": \"HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.\",\n    \"required\": [\n     \"currentReplicas\",\n     \"desiredReplicas\",\n     \"currentMetrics\",\n     \"conditions\"\n    ],\n    \"properties\": {\n     \"conditions\": {\n      \"description\": \"conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.HorizontalPodAutoscalerCondition\"\n      }\n     },\n     \"currentMetrics\": {\n      \"description\": \"currentMetrics is the last read state of the metrics used by this autoscaler.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.MetricStatus\"\n      }\n     },\n     \"currentReplicas\": {\n      \"description\": \"currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"desiredReplicas\": {\n      \"description\": \"desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"lastScaleTime\": {\n      \"description\": \"lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"observedGeneration is the most recent generation observed by this autoscaler.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.MetricSpec\": {\n    \"description\": \"MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).\",\n    \"required\": [\n     \"type\"\n    ],\n    \"properties\": {\n     \"object\": {\n      \"description\": \"object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ObjectMetricSource\"\n     },\n     \"pods\": {\n      \"description\": \"pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.PodsMetricSource\"\n     },\n     \"resource\": {\n      \"description\": \"resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \\\"pods\\\" source.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ResourceMetricSource\"\n     },\n     \"type\": {\n      \"description\": \"type is the type of metric source.  It should match one of the fields below.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.MetricStatus\": {\n    \"description\": \"MetricStatus describes the last-read state of a single metric.\",\n    \"required\": [\n     \"type\"\n    ],\n    \"properties\": {\n     \"object\": {\n      \"description\": \"object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ObjectMetricStatus\"\n     },\n     \"pods\": {\n      \"description\": \"pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.PodsMetricStatus\"\n     },\n     \"resource\": {\n      \"description\": \"resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \\\"pods\\\" source.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ResourceMetricStatus\"\n     },\n     \"type\": {\n      \"description\": \"type is the type of metric source.  It will match one of the fields below.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ObjectMetricSource\": {\n    \"description\": \"ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).\",\n    \"required\": [\n     \"target\",\n     \"metricName\",\n     \"targetValue\"\n    ],\n    \"properties\": {\n     \"metricName\": {\n      \"description\": \"metricName is the name of the metric in question.\",\n      \"type\": \"string\"\n     },\n     \"target\": {\n      \"description\": \"target is the described Kubernetes object.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.CrossVersionObjectReference\"\n     },\n     \"targetValue\": {\n      \"description\": \"targetValue is the target value of the metric (as a quantity).\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ObjectMetricStatus\": {\n    \"description\": \"ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).\",\n    \"required\": [\n     \"target\",\n     \"metricName\",\n     \"currentValue\"\n    ],\n    \"properties\": {\n     \"currentValue\": {\n      \"description\": \"currentValue is the current value of the metric (as a quantity).\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     },\n     \"metricName\": {\n      \"description\": \"metricName is the name of the metric in question.\",\n      \"type\": \"string\"\n     },\n     \"target\": {\n      \"description\": \"target is the described Kubernetes object.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.CrossVersionObjectReference\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.PodsMetricSource\": {\n    \"description\": \"PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.\",\n    \"required\": [\n     \"metricName\",\n     \"targetAverageValue\"\n    ],\n    \"properties\": {\n     \"metricName\": {\n      \"description\": \"metricName is the name of the metric in question\",\n      \"type\": \"string\"\n     },\n     \"targetAverageValue\": {\n      \"description\": \"targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.PodsMetricStatus\": {\n    \"description\": \"PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).\",\n    \"required\": [\n     \"metricName\",\n     \"currentAverageValue\"\n    ],\n    \"properties\": {\n     \"currentAverageValue\": {\n      \"description\": \"currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     },\n     \"metricName\": {\n      \"description\": \"metricName is the name of the metric in question\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ResourceMetricSource\": {\n    \"description\": \"ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \\\"pods\\\" source.  Only one \\\"target\\\" type should be set.\",\n    \"required\": [\n     \"name\"\n    ],\n    \"properties\": {\n     \"name\": {\n      \"description\": \"name is the name of the resource in question.\",\n      \"type\": \"string\"\n     },\n     \"targetAverageUtilization\": {\n      \"description\": \"targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"targetAverageValue\": {\n      \"description\": \"targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \\\"pods\\\" metric source type.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.autoscaling.v2alpha1.ResourceMetricStatus\": {\n    \"description\": \"ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \\\"pods\\\" source.\",\n    \"required\": [\n     \"name\",\n     \"currentAverageValue\"\n    ],\n    \"properties\": {\n     \"currentAverageUtilization\": {\n      \"description\": \"currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"currentAverageValue\": {\n      \"description\": \"currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \\\"pods\\\" metric source type. It will always be set, regardless of the corresponding metric specification.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity\"\n     },\n     \"name\": {\n      \"description\": \"name is the name of the resource in question.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v1.Job\": {\n    \"description\": \"Job represents the configuration of a single job.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.JobSpec\"\n     },\n     \"status\": {\n      \"description\": \"Current status of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.JobStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"Job\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v1.JobCondition\": {\n    \"description\": \"JobCondition describes current state of a job.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastProbeTime\": {\n      \"description\": \"Last time the condition was checked.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"lastTransitionTime\": {\n      \"description\": \"Last time the condition transit from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"Human readable message indicating details about last transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"(brief) reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the condition, one of True, False, Unknown.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type of job condition, Complete or Failed.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v1.JobList\": {\n    \"description\": \"JobList is a collection of jobs.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"items is the list of Jobs.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.Job\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"batch\",\n      \"version\": \"v1\",\n      \"kind\": \"JobList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v1.JobSpec\": {\n    \"description\": \"JobSpec describes how the job execution will look like.\",\n    \"required\": [\n     \"template\"\n    ],\n    \"properties\": {\n     \"activeDeadlineSeconds\": {\n      \"description\": \"Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"completions\": {\n      \"description\": \"Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"manualSelector\": {\n      \"description\": \"manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md\",\n      \"type\": \"boolean\"\n     },\n     \"parallelism\": {\n      \"description\": \"Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \\u003c .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"template\": {\n      \"description\": \"Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v1.JobStatus\": {\n    \"description\": \"JobStatus represents the current state of a Job.\",\n    \"properties\": {\n     \"active\": {\n      \"description\": \"The number of actively running pods.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"completionTime\": {\n      \"description\": \"Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"conditions\": {\n      \"description\": \"The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.JobCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"failed\": {\n      \"description\": \"The number of pods which reached phase Failed.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"startTime\": {\n      \"description\": \"Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"succeeded\": {\n      \"description\": \"The number of pods which reached phase Succeeded.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\": {\n    \"description\": \"CronJob represents the configuration of a single cron job.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobSpec\"\n     },\n     \"status\": {\n      \"description\": \"Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJob\"\n     },\n     {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJob\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobList\": {\n    \"description\": \"CronJobList is a collection of cron jobs.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"items is the list of CronJobs.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJob\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"CronJobList\"\n     },\n     {\n      \"group\": \"batch\",\n      \"version\": \"v2alpha1\",\n      \"kind\": \"ScheduledJobList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobSpec\": {\n    \"description\": \"CronJobSpec describes how the job execution will look like and when it will actually run.\",\n    \"required\": [\n     \"schedule\",\n     \"jobTemplate\"\n    ],\n    \"properties\": {\n     \"concurrencyPolicy\": {\n      \"description\": \"Specifies how to treat concurrent executions of a Job. Defaults to Allow.\",\n      \"type\": \"string\"\n     },\n     \"failedJobsHistoryLimit\": {\n      \"description\": \"The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"jobTemplate\": {\n      \"description\": \"Specifies the job that will be created when executing a CronJob.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v2alpha1.JobTemplateSpec\"\n     },\n     \"schedule\": {\n      \"description\": \"The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.\",\n      \"type\": \"string\"\n     },\n     \"startingDeadlineSeconds\": {\n      \"description\": \"Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"successfulJobsHistoryLimit\": {\n      \"description\": \"The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"suspend\": {\n      \"description\": \"This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.\",\n      \"type\": \"boolean\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v2alpha1.CronJobStatus\": {\n    \"description\": \"CronJobStatus represents the current state of a cron job.\",\n    \"properties\": {\n     \"active\": {\n      \"description\": \"A list of pointers to currently running jobs.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference\"\n      }\n     },\n     \"lastScheduleTime\": {\n      \"description\": \"Information when was the last time the job was successfully scheduled.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.batch.v2alpha1.JobTemplateSpec\": {\n    \"description\": \"JobTemplateSpec describes the data a Job should have when created from a template\",\n    \"properties\": {\n     \"metadata\": {\n      \"description\": \"Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.batch.v1.JobSpec\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\": {\n    \"description\": \"Describes a certificate signing request\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"The certificate request itself and any additional information.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestSpec\"\n     },\n     \"status\": {\n      \"description\": \"Derived information about the request.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequest\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestCondition\": {\n    \"required\": [\n     \"type\"\n    ],\n    \"properties\": {\n     \"lastUpdateTime\": {\n      \"description\": \"timestamp for the last update to this condition\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"human readable message with details about the request state\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"brief reason for the request state\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"request approval state, currently Approved or Denied.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestList\": {\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequest\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"certificates.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"CertificateSigningRequestList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestSpec\": {\n    \"description\": \"This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.\",\n    \"required\": [\n     \"request\"\n    ],\n    \"properties\": {\n     \"extra\": {\n      \"description\": \"Extra information about the requesting user. See user.Info interface for details.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"array\",\n       \"items\": {\n        \"type\": \"string\"\n       }\n      }\n     },\n     \"groups\": {\n      \"description\": \"Group information about the requesting user. See user.Info interface for details.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"request\": {\n      \"description\": \"Base64-encoded PKCS#10 CSR data\",\n      \"type\": \"string\",\n      \"format\": \"byte\"\n     },\n     \"uid\": {\n      \"description\": \"UID information about the requesting user. See user.Info interface for details.\",\n      \"type\": \"string\"\n     },\n     \"usages\": {\n      \"description\": \"allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3\\n     https://tools.ietf.org/html/rfc5280#section-4.2.1.12\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"username\": {\n      \"description\": \"Information about the requesting user. See user.Info interface for details.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestStatus\": {\n    \"properties\": {\n     \"certificate\": {\n      \"description\": \"If request was approved, the controller will place the issued certificate here.\",\n      \"type\": \"string\",\n      \"format\": \"byte\"\n     },\n     \"conditions\": {\n      \"description\": \"Conditions applied to the request, such as approval or denial.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.certificates.v1beta1.CertificateSigningRequestCondition\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.APIVersion\": {\n    \"description\": \"An APIVersion represents a single concrete version of an object model.\",\n    \"properties\": {\n     \"name\": {\n      \"description\": \"Name of this version (e.g. 'v1').\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\": {\n    \"description\": \"DaemonSet represents the configuration of a daemon set.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetSpec\"\n     },\n     \"status\": {\n      \"description\": \"The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSet\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetList\": {\n    \"description\": \"DaemonSetList is a collection of daemon sets.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"A list of daemon sets.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DaemonSetList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetSpec\": {\n    \"description\": \"DaemonSetSpec is the specification of a daemon set.\",\n    \"required\": [\n     \"template\"\n    ],\n    \"properties\": {\n     \"minReadySeconds\": {\n      \"description\": \"The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"revisionHistoryLimit\": {\n      \"description\": \"The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"template\": {\n      \"description\": \"An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     },\n     \"templateGeneration\": {\n      \"description\": \"DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"updateStrategy\": {\n      \"description\": \"An update strategy to replace existing DaemonSet pods with new pods.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetUpdateStrategy\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetStatus\": {\n    \"description\": \"DaemonSetStatus represents the current status of a daemon set.\",\n    \"required\": [\n     \"currentNumberScheduled\",\n     \"numberMisscheduled\",\n     \"desiredNumberScheduled\",\n     \"numberReady\"\n    ],\n    \"properties\": {\n     \"collisionCount\": {\n      \"description\": \"Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"currentNumberScheduled\": {\n      \"description\": \"The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"desiredNumberScheduled\": {\n      \"description\": \"The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"numberAvailable\": {\n      \"description\": \"The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"numberMisscheduled\": {\n      \"description\": \"The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"numberReady\": {\n      \"description\": \"The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"numberUnavailable\": {\n      \"description\": \"The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"The most recent generation observed by the daemon set controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"updatedNumberScheduled\": {\n      \"description\": \"The total number of nodes that are running updated daemon pod\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetUpdateStrategy\": {\n    \"properties\": {\n     \"rollingUpdate\": {\n      \"description\": \"Rolling update config params. Present only if type = \\\"RollingUpdate\\\".\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollingUpdateDaemonSet\"\n     },\n     \"type\": {\n      \"description\": \"Type of daemon set update. Can be \\\"RollingUpdate\\\" or \\\"OnDelete\\\". Default is OnDelete.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\": {\n    \"description\": \"Deployment enables declarative updates for Pods and ReplicaSets.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of the Deployment.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentSpec\"\n     },\n     \"status\": {\n      \"description\": \"Most recently observed status of the Deployment.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Deployment\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentCondition\": {\n    \"description\": \"DeploymentCondition describes the state of a deployment at a certain point.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastTransitionTime\": {\n      \"description\": \"Last time the condition transitioned from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"lastUpdateTime\": {\n      \"description\": \"The last time this condition was updated.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"A human readable message indicating details about the transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"The reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the condition, one of True, False, Unknown.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type of deployment condition.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentList\": {\n    \"description\": \"DeploymentList is a list of Deployments.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of Deployments.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DeploymentList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentRollback\": {\n    \"description\": \"DeploymentRollback stores the information required to rollback a deployment.\",\n    \"required\": [\n     \"name\",\n     \"rollbackTo\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Required: This must match the Name of a deployment.\",\n      \"type\": \"string\"\n     },\n     \"rollbackTo\": {\n      \"description\": \"The config of this deployment rollback.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollbackConfig\"\n     },\n     \"updatedAnnotations\": {\n      \"description\": \"The annotations to be updated to a deployment\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"DeploymentRollback\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentSpec\": {\n    \"description\": \"DeploymentSpec is the specification of the desired behavior of the Deployment.\",\n    \"required\": [\n     \"template\"\n    ],\n    \"properties\": {\n     \"minReadySeconds\": {\n      \"description\": \"Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"paused\": {\n      \"description\": \"Indicates that the deployment is paused and will not be processed by the deployment controller.\",\n      \"type\": \"boolean\"\n     },\n     \"progressDeadlineSeconds\": {\n      \"description\": \"The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"revisionHistoryLimit\": {\n      \"description\": \"The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"rollbackTo\": {\n      \"description\": \"The config this deployment is rolling back to. Will be cleared after rollback is done.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollbackConfig\"\n     },\n     \"selector\": {\n      \"description\": \"Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"strategy\": {\n      \"description\": \"The deployment strategy to use to replace existing pods with new ones.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentStrategy\"\n     },\n     \"template\": {\n      \"description\": \"Template describes the pods that will be created.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentStatus\": {\n    \"description\": \"DeploymentStatus is the most recently observed status of the Deployment.\",\n    \"properties\": {\n     \"availableReplicas\": {\n      \"description\": \"Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"collisionCount\": {\n      \"description\": \"Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"conditions\": {\n      \"description\": \"Represents the latest available observations of a deployment's current state.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"The generation observed by the deployment controller.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"readyReplicas\": {\n      \"description\": \"Total number of ready pods targeted by this deployment.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Total number of non-terminated pods targeted by this deployment (their labels match the selector).\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"unavailableReplicas\": {\n      \"description\": \"Total number of unavailable pods targeted by this deployment.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"updatedReplicas\": {\n      \"description\": \"Total number of non-terminated pods targeted by this deployment that have the desired template spec.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentStrategy\": {\n    \"description\": \"DeploymentStrategy describes how to replace existing pods with new ones.\",\n    \"properties\": {\n     \"rollingUpdate\": {\n      \"description\": \"Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollingUpdateDeployment\"\n     },\n     \"type\": {\n      \"description\": \"Type of deployment. Can be \\\"Recreate\\\" or \\\"RollingUpdate\\\". Default is RollingUpdate.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.FSGroupStrategyOptions\": {\n    \"description\": \"FSGroupStrategyOptions defines the strategy type and options used to create the strategy.\",\n    \"properties\": {\n     \"ranges\": {\n      \"description\": \"Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IDRange\"\n      }\n     },\n     \"rule\": {\n      \"description\": \"Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HTTPIngressPath\": {\n    \"description\": \"HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.\",\n    \"required\": [\n     \"backend\"\n    ],\n    \"properties\": {\n     \"backend\": {\n      \"description\": \"Backend defines the referenced service endpoint to which the traffic will be forwarded to.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressBackend\"\n     },\n     \"path\": {\n      \"description\": \"Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \\\"path\\\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HTTPIngressRuleValue\": {\n    \"description\": \"HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\\u003chost\\u003e/\\u003cpath\\u003e?\\u003csearchpart\\u003e -\\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.\",\n    \"required\": [\n     \"paths\"\n    ],\n    \"properties\": {\n     \"paths\": {\n      \"description\": \"A collection of paths that map requests to backends.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HTTPIngressPath\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HostPortRange\": {\n    \"description\": \"Host Port Range defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.\",\n    \"required\": [\n     \"min\",\n     \"max\"\n    ],\n    \"properties\": {\n     \"max\": {\n      \"description\": \"max is the end of the range, inclusive.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"min\": {\n      \"description\": \"min is the start of the range, inclusive.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IDRange\": {\n    \"description\": \"ID Range provides a min/max of an allowed range of IDs.\",\n    \"required\": [\n     \"min\",\n     \"max\"\n    ],\n    \"properties\": {\n     \"max\": {\n      \"description\": \"Max is the end of the range, inclusive.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"min\": {\n      \"description\": \"Min is the start of the range, inclusive.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\": {\n    \"description\": \"Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Ingress\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressBackend\": {\n    \"description\": \"IngressBackend describes all endpoints for a given service and port.\",\n    \"required\": [\n     \"serviceName\",\n     \"servicePort\"\n    ],\n    \"properties\": {\n     \"serviceName\": {\n      \"description\": \"Specifies the name of the referenced service.\",\n      \"type\": \"string\"\n     },\n     \"servicePort\": {\n      \"description\": \"Specifies the port of the referenced service.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressList\": {\n    \"description\": \"IngressList is a collection of Ingress.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of Ingress.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"IngressList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressRule\": {\n    \"description\": \"IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.\",\n    \"properties\": {\n     \"host\": {\n      \"description\": \"Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \\\"host\\\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\\n\\t  IP in the Spec of the parent Ingress.\\n2. The `:` delimiter is not respected because ports are not allowed.\\n\\t  Currently the port of an Ingress is implicitly :80 for http and\\n\\t  :443 for https.\\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\",\n      \"type\": \"string\"\n     },\n     \"http\": {\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HTTPIngressRuleValue\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressSpec\": {\n    \"description\": \"IngressSpec describes the Ingress the user wishes to exist.\",\n    \"properties\": {\n     \"backend\": {\n      \"description\": \"A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressBackend\"\n     },\n     \"rules\": {\n      \"description\": \"A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressRule\"\n      }\n     },\n     \"tls\": {\n      \"description\": \"TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressTLS\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressStatus\": {\n    \"description\": \"IngressStatus describe the current state of the Ingress.\",\n    \"properties\": {\n     \"loadBalancer\": {\n      \"description\": \"LoadBalancer contains the current status of the load-balancer.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.LoadBalancerStatus\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressTLS\": {\n    \"description\": \"IngressTLS describes the transport layer security associated with an Ingress.\",\n    \"properties\": {\n     \"hosts\": {\n      \"description\": \"Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"secretName\": {\n      \"description\": \"SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \\\"Host\\\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\": {\n    \"description\": \"NetworkPolicy describes what network traffic is allowed for a set of Pods\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior for this NetworkPolicy.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicySpec\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyIngressRule\": {\n    \"description\": \"This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.\",\n    \"properties\": {\n     \"from\": {\n      \"description\": \"List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyPeer\"\n      }\n     },\n     \"ports\": {\n      \"description\": \"List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyPort\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyList\": {\n    \"description\": \"Network Policy List is a list of NetworkPolicy objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of schema objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicy\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"NetworkPolicyList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyPeer\": {\n    \"properties\": {\n     \"namespaceSelector\": {\n      \"description\": \"Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"podSelector\": {\n      \"description\": \"This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyPort\": {\n    \"properties\": {\n     \"port\": {\n      \"description\": \"If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     },\n     \"protocol\": {\n      \"description\": \"Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicySpec\": {\n    \"required\": [\n     \"podSelector\"\n    ],\n    \"properties\": {\n     \"ingress\": {\n      \"description\": \"List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.NetworkPolicyIngressRule\"\n      }\n     },\n     \"podSelector\": {\n      \"description\": \"Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\": {\n    \"description\": \"Pod Security Policy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"spec defines the policy enforced.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicySpec\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicy\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicyList\": {\n    \"description\": \"Pod Security Policy List is a list of PodSecurityPolicy objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of schema objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicy\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodSecurityPolicyList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.PodSecurityPolicySpec\": {\n    \"description\": \"Pod Security Policy Spec defines the policy enforced.\",\n    \"required\": [\n     \"seLinux\",\n     \"runAsUser\",\n     \"supplementalGroups\",\n     \"fsGroup\"\n    ],\n    \"properties\": {\n     \"allowedCapabilities\": {\n      \"description\": \"AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"defaultAddCapabilities\": {\n      \"description\": \"DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"fsGroup\": {\n      \"description\": \"FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.FSGroupStrategyOptions\"\n     },\n     \"hostIPC\": {\n      \"description\": \"hostIPC determines if the policy allows the use of HostIPC in the pod spec.\",\n      \"type\": \"boolean\"\n     },\n     \"hostNetwork\": {\n      \"description\": \"hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.\",\n      \"type\": \"boolean\"\n     },\n     \"hostPID\": {\n      \"description\": \"hostPID determines if the policy allows the use of HostPID in the pod spec.\",\n      \"type\": \"boolean\"\n     },\n     \"hostPorts\": {\n      \"description\": \"hostPorts determines which host port ranges are allowed to be exposed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HostPortRange\"\n      }\n     },\n     \"privileged\": {\n      \"description\": \"privileged determines if a pod can request to be run as privileged.\",\n      \"type\": \"boolean\"\n     },\n     \"readOnlyRootFilesystem\": {\n      \"description\": \"ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.\",\n      \"type\": \"boolean\"\n     },\n     \"requiredDropCapabilities\": {\n      \"description\": \"RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"runAsUser\": {\n      \"description\": \"runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RunAsUserStrategyOptions\"\n     },\n     \"seLinux\": {\n      \"description\": \"seLinux is the strategy that will dictate the allowable labels that may be set.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.SELinuxStrategyOptions\"\n     },\n     \"supplementalGroups\": {\n      \"description\": \"SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.SupplementalGroupsStrategyOptions\"\n     },\n     \"volumes\": {\n      \"description\": \"volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\": {\n    \"description\": \"ReplicaSet represents the configuration of a ReplicaSet.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetSpec\"\n     },\n     \"status\": {\n      \"description\": \"Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSet\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetCondition\": {\n    \"description\": \"ReplicaSetCondition describes the state of a replica set at a certain point.\",\n    \"required\": [\n     \"type\",\n     \"status\"\n    ],\n    \"properties\": {\n     \"lastTransitionTime\": {\n      \"description\": \"The last time the condition transitioned from one status to another.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n     },\n     \"message\": {\n      \"description\": \"A human readable message indicating details about the transition.\",\n      \"type\": \"string\"\n     },\n     \"reason\": {\n      \"description\": \"The reason for the condition's last transition.\",\n      \"type\": \"string\"\n     },\n     \"status\": {\n      \"description\": \"Status of the condition, one of True, False, Unknown.\",\n      \"type\": \"string\"\n     },\n     \"type\": {\n      \"description\": \"Type of replica set condition.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetList\": {\n    \"description\": \"ReplicaSetList is a collection of ReplicaSets.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ReplicaSetList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetSpec\": {\n    \"description\": \"ReplicaSetSpec is the specification of a ReplicaSet.\",\n    \"properties\": {\n     \"minReadySeconds\": {\n      \"description\": \"Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"template\": {\n      \"description\": \"Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetStatus\": {\n    \"description\": \"ReplicaSetStatus represents the current status of a ReplicaSet.\",\n    \"required\": [\n     \"replicas\"\n    ],\n    \"properties\": {\n     \"availableReplicas\": {\n      \"description\": \"The number of available replicas (ready for at least minReadySeconds) for this replica set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"conditions\": {\n      \"description\": \"Represents the latest available observations of a replica set's current state.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetCondition\"\n      },\n      \"x-kubernetes-patch-merge-key\": \"type\",\n      \"x-kubernetes-patch-strategy\": \"merge\"\n     },\n     \"fullyLabeledReplicas\": {\n      \"description\": \"The number of pods that have labels matching the labels of the pod template of the replicaset.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"ObservedGeneration reflects the generation of the most recently observed ReplicaSet.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     },\n     \"readyReplicas\": {\n      \"description\": \"The number of ready replicas for this replica set.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"replicas\": {\n      \"description\": \"Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollbackConfig\": {\n    \"properties\": {\n     \"revision\": {\n      \"description\": \"The revision to rollback to. If set to 0, rollback to the last revision.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollingUpdateDaemonSet\": {\n    \"description\": \"Spec to control the desired behavior of daemon set rolling update.\",\n    \"properties\": {\n     \"maxUnavailable\": {\n      \"description\": \"The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollingUpdateDeployment\": {\n    \"description\": \"Spec to control the desired behavior of rolling update.\",\n    \"properties\": {\n     \"maxSurge\": {\n      \"description\": \"The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     },\n     \"maxUnavailable\": {\n      \"description\": \"The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RunAsUserStrategyOptions\": {\n    \"description\": \"Run A sUser Strategy Options defines the strategy type and any options used to create the strategy.\",\n    \"required\": [\n     \"rule\"\n    ],\n    \"properties\": {\n     \"ranges\": {\n      \"description\": \"Ranges are the allowed ranges of uids that may be used.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IDRange\"\n      }\n     },\n     \"rule\": {\n      \"description\": \"Rule is the strategy that will dictate the allowable RunAsUser values that may be set.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.SELinuxStrategyOptions\": {\n    \"description\": \"SELinux  Strategy Options defines the strategy type and any options used to create the strategy.\",\n    \"required\": [\n     \"rule\"\n    ],\n    \"properties\": {\n     \"rule\": {\n      \"description\": \"type is the strategy that will dictate the allowable labels that may be set.\",\n      \"type\": \"string\"\n     },\n     \"seLinuxOptions\": {\n      \"description\": \"seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.SELinuxOptions\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale\": {\n    \"description\": \"represents a scaling request for a resource.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ScaleSpec\"\n     },\n     \"status\": {\n      \"description\": \"current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ScaleStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Scale\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ScaleSpec\": {\n    \"description\": \"describes the attributes of a scale subresource\",\n    \"properties\": {\n     \"replicas\": {\n      \"description\": \"desired number of instances for the scaled object.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ScaleStatus\": {\n    \"description\": \"represents the current status of a scale subresource.\",\n    \"required\": [\n     \"replicas\"\n    ],\n    \"properties\": {\n     \"replicas\": {\n      \"description\": \"actual number of observed instances of the scaled object.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"selector\": {\n      \"description\": \"label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"targetSelector\": {\n      \"description\": \"label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.SupplementalGroupsStrategyOptions\": {\n    \"description\": \"SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.\",\n    \"properties\": {\n     \"ranges\": {\n      \"description\": \"Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IDRange\"\n      }\n     },\n     \"rule\": {\n      \"description\": \"Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\": {\n    \"description\": \"A ThirdPartyResource is a generic representation of a resource, it is used by add-ons and plugins to add new resource types to the API.  It consists of one or more Versions of the api.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"description\": {\n      \"description\": \"Description is the description of this object.\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"versions\": {\n      \"description\": \"Versions are versions for this third party object\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.APIVersion\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResource\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResourceList\": {\n    \"description\": \"ThirdPartyResourceList is a list of ThirdPartyResources.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of ThirdPartyResources.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ThirdPartyResource\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"extensions\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ThirdPartyResourceList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\": {\n    \"description\": \"NetworkPolicy describes what network traffic is allowed for a set of Pods\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior for this NetworkPolicy.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicySpec\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicy\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyIngressRule\": {\n    \"description\": \"NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.\",\n    \"properties\": {\n     \"from\": {\n      \"description\": \"List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyPeer\"\n      }\n     },\n     \"ports\": {\n      \"description\": \"List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyPort\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyList\": {\n    \"description\": \"NetworkPolicyList is a list of NetworkPolicy objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of schema objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicy\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"networking.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"NetworkPolicyList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyPeer\": {\n    \"description\": \"NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.\",\n    \"properties\": {\n     \"namespaceSelector\": {\n      \"description\": \"Selects Namespaces using cluster scoped-labels. This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"podSelector\": {\n      \"description\": \"This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyPort\": {\n    \"description\": \"NetworkPolicyPort describes a port to allow traffic on\",\n    \"properties\": {\n     \"port\": {\n      \"description\": \"The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     },\n     \"protocol\": {\n      \"description\": \"The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicySpec\": {\n    \"description\": \"NetworkPolicySpec provides the specification of a NetworkPolicy\",\n    \"required\": [\n     \"podSelector\"\n    ],\n    \"properties\": {\n     \"ingress\": {\n      \"description\": \"List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.networking.v1.NetworkPolicyIngressRule\"\n      }\n     },\n     \"podSelector\": {\n      \"description\": \"Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.policy.v1beta1.Eviction\": {\n    \"description\": \"Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/\\u003cpod name\\u003e/evictions.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"deleteOptions\": {\n      \"description\": \"DeleteOptions may be provided\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"ObjectMeta describes the pod that is being evicted.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Eviction\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\": {\n    \"description\": \"PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"description\": \"Specification of the desired behavior of the PodDisruptionBudget.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudgetSpec\"\n     },\n     \"status\": {\n      \"description\": \"Most recently observed status of the PodDisruptionBudget.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudgetStatus\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudget\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudgetList\": {\n    \"description\": \"PodDisruptionBudgetList is a collection of PodDisruptionBudgets.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudget\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"policy\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"PodDisruptionBudgetList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudgetSpec\": {\n    \"description\": \"PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.\",\n    \"properties\": {\n     \"maxUnavailable\": {\n      \"description\": \"An eviction is allowed if at most \\\"maxUnavailable\\\" pods selected by \\\"selector\\\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \\\"minAvailable\\\".\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     },\n     \"minAvailable\": {\n      \"description\": \"An eviction is allowed if at least \\\"minAvailable\\\" pods selected by \\\"selector\\\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \\\"100%\\\".\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString\"\n     },\n     \"selector\": {\n      \"description\": \"Label query over pods whose evictions are managed by the disruption budget.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.policy.v1beta1.PodDisruptionBudgetStatus\": {\n    \"description\": \"PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.\",\n    \"required\": [\n     \"disruptedPods\",\n     \"disruptionsAllowed\",\n     \"currentHealthy\",\n     \"desiredHealthy\",\n     \"expectedPods\"\n    ],\n    \"properties\": {\n     \"currentHealthy\": {\n      \"description\": \"current number of healthy pods\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"desiredHealthy\": {\n      \"description\": \"minimum desired number of healthy pods\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"disruptedPods\": {\n      \"description\": \"DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time\"\n      }\n     },\n     \"disruptionsAllowed\": {\n      \"description\": \"Number of pod disruptions that are currently allowed.\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"expectedPods\": {\n      \"description\": \"total number of pods counted by this disruption budget\",\n      \"type\": \"integer\",\n      \"format\": \"int32\"\n     },\n     \"observedGeneration\": {\n      \"description\": \"Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB's object generation.\",\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\": {\n    \"description\": \"ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\",\n    \"required\": [\n     \"rules\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"rules\": {\n      \"description\": \"Rules holds all the PolicyRules for this ClusterRole\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.PolicyRule\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRole\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\": {\n    \"description\": \"ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.\",\n    \"required\": [\n     \"subjects\",\n     \"roleRef\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"roleRef\": {\n      \"description\": \"RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleRef\"\n     },\n     \"subjects\": {\n      \"description\": \"Subjects holds references to the objects the role applies to.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Subject\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBindingList\": {\n    \"description\": \"ClusterRoleBindingList is a collection of ClusterRoleBindings\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of ClusterRoleBindings\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleBinding\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleBindingList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRoleList\": {\n    \"description\": \"ClusterRoleList is a collection of ClusterRoles\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of ClusterRoles\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.ClusterRole\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"ClusterRoleList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.PolicyRule\": {\n    \"description\": \"PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.\",\n    \"required\": [\n     \"verbs\"\n    ],\n    \"properties\": {\n     \"apiGroups\": {\n      \"description\": \"APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"nonResourceURLs\": {\n      \"description\": \"NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \\\"pods\\\" or \\\"secrets\\\") or non-resource URL paths (such as \\\"/api\\\"),  but not both.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"resourceNames\": {\n      \"description\": \"ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"resources\": {\n      \"description\": \"Resources is a list of resources this rule applies to.  ResourceAll represents all resources.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"verbs\": {\n      \"description\": \"Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\": {\n    \"description\": \"Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\",\n    \"required\": [\n     \"rules\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"rules\": {\n      \"description\": \"Rules holds all the PolicyRules for this Role\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.PolicyRule\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"Role\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\": {\n    \"description\": \"RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.\",\n    \"required\": [\n     \"subjects\",\n     \"roleRef\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"roleRef\": {\n      \"description\": \"RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleRef\"\n     },\n     \"subjects\": {\n      \"description\": \"Subjects holds references to the objects the role applies to.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Subject\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBinding\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBindingList\": {\n    \"description\": \"RoleBindingList is a collection of RoleBindings\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of RoleBindings\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleBinding\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleBindingList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleList\": {\n    \"description\": \"RoleList is a collection of Roles\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of Roles\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Role\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"RoleList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.RoleRef\": {\n    \"description\": \"RoleRef contains information that points to the role being used\",\n    \"required\": [\n     \"apiGroup\",\n     \"kind\",\n     \"name\"\n    ],\n    \"properties\": {\n     \"apiGroup\": {\n      \"description\": \"APIGroup is the group for the resource being referenced\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is the type of resource being referenced\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name is the name of resource being referenced\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1alpha1.Subject\": {\n    \"description\": \"Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.\",\n    \"required\": [\n     \"kind\",\n     \"name\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion holds the API group and version of the referenced subject. Defaults to \\\"v1\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io/v1alpha1\\\" for User and Group subjects.\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the object being referenced.\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\": {\n    \"description\": \"ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\",\n    \"required\": [\n     \"rules\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"rules\": {\n      \"description\": \"Rules holds all the PolicyRules for this ClusterRole\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.PolicyRule\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRole\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\": {\n    \"description\": \"ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.\",\n    \"required\": [\n     \"subjects\",\n     \"roleRef\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"roleRef\": {\n      \"description\": \"RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleRef\"\n     },\n     \"subjects\": {\n      \"description\": \"Subjects holds references to the objects the role applies to.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Subject\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBinding\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBindingList\": {\n    \"description\": \"ClusterRoleBindingList is a collection of ClusterRoleBindings\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of ClusterRoleBindings\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleBinding\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleBindingList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRoleList\": {\n    \"description\": \"ClusterRoleList is a collection of ClusterRoles\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of ClusterRoles\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.ClusterRole\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"ClusterRoleList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.PolicyRule\": {\n    \"description\": \"PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.\",\n    \"required\": [\n     \"verbs\"\n    ],\n    \"properties\": {\n     \"apiGroups\": {\n      \"description\": \"APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"nonResourceURLs\": {\n      \"description\": \"NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \\\"pods\\\" or \\\"secrets\\\") or non-resource URL paths (such as \\\"/api\\\"),  but not both.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"resourceNames\": {\n      \"description\": \"ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"resources\": {\n      \"description\": \"Resources is a list of resources this rule applies to.  ResourceAll represents all resources.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     },\n     \"verbs\": {\n      \"description\": \"Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"type\": \"string\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\": {\n    \"description\": \"Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\",\n    \"required\": [\n     \"rules\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"rules\": {\n      \"description\": \"Rules holds all the PolicyRules for this Role\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.PolicyRule\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"Role\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\": {\n    \"description\": \"RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.\",\n    \"required\": [\n     \"subjects\",\n     \"roleRef\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"roleRef\": {\n      \"description\": \"RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.\",\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleRef\"\n     },\n     \"subjects\": {\n      \"description\": \"Subjects holds references to the objects the role applies to.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Subject\"\n      }\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBinding\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBindingList\": {\n    \"description\": \"RoleBindingList is a collection of RoleBindings\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of RoleBindings\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleBinding\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleBindingList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleList\": {\n    \"description\": \"RoleList is a collection of Roles\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of Roles\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Role\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"rbac.authorization.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"RoleList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.RoleRef\": {\n    \"description\": \"RoleRef contains information that points to the role being used\",\n    \"required\": [\n     \"apiGroup\",\n     \"kind\",\n     \"name\"\n    ],\n    \"properties\": {\n     \"apiGroup\": {\n      \"description\": \"APIGroup is the group for the resource being referenced\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is the type of resource being referenced\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name is the name of resource being referenced\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.rbac.v1beta1.Subject\": {\n    \"description\": \"Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.\",\n    \"required\": [\n     \"kind\",\n     \"name\"\n    ],\n    \"properties\": {\n     \"apiGroup\": {\n      \"description\": \"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\",\n      \"type\": \"string\"\n     },\n     \"name\": {\n      \"description\": \"Name of the object being referenced.\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\",\n      \"type\": \"string\"\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\": {\n    \"description\": \"PodPreset is a policy resource that defines additional runtime requirements for a Pod.\",\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"spec\": {\n      \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPresetSpec\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPreset\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPresetList\": {\n    \"description\": \"PodPresetList is a list of PodPreset objects.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is a list of schema objects.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPreset\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"settings.k8s.io\",\n      \"version\": \"v1alpha1\",\n      \"kind\": \"PodPresetList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.settings.v1alpha1.PodPresetSpec\": {\n    \"description\": \"PodPresetSpec is a description of a pod preset.\",\n    \"properties\": {\n     \"env\": {\n      \"description\": \"Env defines the collection of EnvVar to inject into containers.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EnvVar\"\n      }\n     },\n     \"envFrom\": {\n      \"description\": \"EnvFrom defines the collection of EnvFromSource to inject into containers.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.EnvFromSource\"\n      }\n     },\n     \"selector\": {\n      \"description\": \"Selector is a label query over a set of resources, in this case pods. Required.\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector\"\n     },\n     \"volumeMounts\": {\n      \"description\": \"VolumeMounts defines the collection of VolumeMount to inject into containers.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.VolumeMount\"\n      }\n     },\n     \"volumes\": {\n      \"description\": \"Volumes defines the collection of Volume to inject into the pod.\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.api.v1.Volume\"\n      }\n     }\n    }\n   },\n   \"io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\": {\n    \"description\": \"StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\\n\\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.\",\n    \"required\": [\n     \"provisioner\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"parameters\": {\n      \"description\": \"Parameters holds the parameters for the provisioner that should create volumes of this storage class.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"provisioner\": {\n      \"description\": \"Provisioner indicates the type of the provisioner.\",\n      \"type\": \"string\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClass\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.storage.v1.StorageClassList\": {\n    \"description\": \"StorageClassList is a collection of storage classes.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of StorageClasses\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1.StorageClass\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1\",\n      \"kind\": \"StorageClassList\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\": {\n    \"description\": \"StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\\n\\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.\",\n    \"required\": [\n     \"provisioner\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta\"\n     },\n     \"parameters\": {\n      \"description\": \"Parameters holds the parameters for the provisioner that should create volumes of this storage class.\",\n      \"type\": \"object\",\n      \"additionalProperties\": {\n       \"type\": \"string\"\n      }\n     },\n     \"provisioner\": {\n      \"description\": \"Provisioner indicates the type of the provisioner.\",\n      \"type\": \"string\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClass\"\n     }\n    ]\n   },\n   \"io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClassList\": {\n    \"description\": \"StorageClassList is a collection of storage classes.\",\n    \"required\": [\n     \"items\"\n    ],\n    \"properties\": {\n     \"apiVersion\": {\n      \"description\": \"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\",\n      \"type\": \"string\"\n     },\n     \"items\": {\n      \"description\": \"Items is the list of StorageClasses\",\n      \"type\": \"array\",\n      \"items\": {\n       \"$ref\": \"#/definitions/io.k8s.kubernetes.pkg.apis.storage.v1beta1.StorageClass\"\n      }\n     },\n     \"kind\": {\n      \"description\": \"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\",\n      \"type\": \"string\"\n     },\n     \"metadata\": {\n      \"description\": \"Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\",\n      \"$ref\": \"#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta\"\n     }\n    },\n    \"x-kubernetes-group-version-kind\": [\n     {\n      \"group\": \"storage.k8s.io\",\n      \"version\": \"v1beta1\",\n      \"kind\": \"StorageClassList\"\n     }\n    ]\n   }\n  },\n  \"securityDefinitions\": {\n   \"BearerToken\": {\n    \"description\": \"Bearer Token authentication\",\n    \"type\": \"apiKey\",\n    \"name\": \"authorization\",\n    \"in\": \"header\"\n   }\n  },\n  \"security\": [\n   {\n    \"BearerToken\": []\n   }\n  ]\n }\n"},"type":"directory","full_path":"/Users/tehut/test/environments/default/.metadata"},"default.jsonnet":"local base = import \"/Users/tehut/test/environments/base.libsonnet\";\nlocal k = import \"k.libsonnet\";\n\nbase + {\n  // Insert user-specified overrides here. For example if a component is named \"nginx-deployment\", you might have something like:\n  //   \"nginx-deployment\"+: k.deployment.mixin.metadata.labels({foo: \"bar\"})\n}\n","params.libsonnet":"local params = import \"/Users/tehut/test/components/params.libsonnet\";\nparams + {\n  components +: {\n    // Insert component parameter overrides here. Ex:\n    // guestbook +: {\n    //   name: \"guestbook-dev\",\n    //   replicas: params.global.replicas,\n    // },\n  },\n}\n","spec.json":"{\n  \"server\": \"https://kubecfg-t-apiloadb-1k1vqoxu7q212-666493100.us-west-2.elb.amazonaws.com\",\n  \"namespace\": \"dev-tehut\"\n}"},"type":"directory","full_path":"/Users/tehut/test/environments/default"}},"type":"directory","full_path":"/Users/tehut/test/environments"},"lib":{"children":{},"type":"directory","full_path":"/Users/tehut/test/lib"},"vendor":{"children":{},"type":"directory","full_path":"/Users/tehut/test/vendor"}}